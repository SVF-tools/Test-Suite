; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/complex_tests/test-clone.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test-clone.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ptrs = dso_local global [10 x ptr] zeroinitializer, align 16
@my_malloc1.a = internal global ptr null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @my_malloc(i32 noundef %idx, i32 noundef %length) #0 {
entry:
  %idx.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %a = alloca ptr, align 8
  store i32 %idx, ptr %idx.addr, align 4
  store i32 %length, ptr %length.addr, align 4
  %0 = load i32, ptr %length.addr, align 4
  %call = call ptr @malloc(i32 noundef %0)
  store ptr %call, ptr %a, align 8
  %1 = load i32, ptr %idx.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x ptr], ptr @ptrs, i64 0, i64 %idxprom
  %2 = load ptr, ptr %arrayidx, align 8
  call void @free(ptr noundef %2)
  %3 = load ptr, ptr %a, align 8
  %4 = load i32, ptr %idx.addr, align 4
  %idxprom1 = zext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [10 x ptr], ptr @ptrs, i64 0, i64 %idxprom1
  store ptr %3, ptr %arrayidx2, align 8
  ret void
}

declare ptr @malloc(i32 noundef) #1

declare void @free(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @my_malloc1(i32 noundef %idx, i32 noundef %lenght) #0 {
entry:
  %idx.addr = alloca i32, align 4
  %lenght.addr = alloca i32, align 4
  store i32 %idx, ptr %idx.addr, align 4
  store i32 %lenght, ptr %lenght.addr, align 4
  %0 = load ptr, ptr @my_malloc1.a, align 8
  %cmp = icmp ne ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @my_malloc1.a, align 8
  call void @free(ptr noundef %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, ptr %idx.addr, align 4
  %call = call ptr @malloc(i32 noundef %2)
  store ptr %call, ptr @my_malloc1.a, align 8
  %3 = load ptr, ptr @my_malloc1.a, align 8
  ret ptr %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @malloc2(i32 noundef %idx, i32 noundef %length) #0 {
entry:
  %retval = alloca i32, align 4
  %idx.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %curidx = alloca i32, align 4
  store i32 %idx, ptr %idx.addr, align 4
  store i32 %length, ptr %length.addr, align 4
  %0 = load i32, ptr %idx.addr, align 4
  %1 = load i32, ptr %length.addr, align 4
  call void @my_malloc(i32 noundef %0, i32 noundef %1)
  %2 = load i32, ptr %idx.addr, align 4
  %add = add i32 %2, 1
  %3 = load i32, ptr %length.addr, align 4
  %call = call ptr @my_malloc1(i32 noundef %add, i32 noundef %3)
  %4 = load i32, ptr %idx.addr, align 4
  %add1 = add i32 %4, 2
  store i32 %add1, ptr %curidx, align 4
  %5 = load i32, ptr %curidx, align 4
  %cmp = icmp ult i32 %5, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, ptr %curidx, align 4
  %7 = load i32, ptr %length.addr, align 4
  %call2 = call i32 @malloc2(i32 noundef %6, i32 noundef %7)
  store i32 %call2, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i32, ptr %curidx, align 4
  store i32 %8, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, ptr %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %call = call i32 @malloc2(i32 noundef 1, i32 noundef 10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
