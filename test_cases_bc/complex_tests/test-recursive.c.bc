; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/complex_tests/test-recursive.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test-recursive.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list = type { i32, ptr, ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @construct(ptr noundef %head, i32 noundef %i) #0 {
entry:
  %retval = alloca ptr, align 8
  %head.addr = alloca ptr, align 8
  %i.addr = alloca i32, align 4
  %tmp = alloca ptr, align 8
  store ptr %head, ptr %head.addr, align 8
  store i32 %i, ptr %i.addr, align 4
  %0 = load i32, ptr %i.addr, align 4
  %cmp = icmp ugt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call ptr @malloc(i32 noundef 24)
  store ptr %call, ptr %tmp, align 8
  %1 = load ptr, ptr %tmp, align 8
  %field = getelementptr inbounds %struct.list, ptr %1, i32 0, i32 0
  store i32 0, ptr %field, align 8
  %2 = load ptr, ptr %head.addr, align 8
  %3 = load ptr, ptr %tmp, align 8
  %next = getelementptr inbounds %struct.list, ptr %3, i32 0, i32 1
  store ptr %2, ptr %next, align 8
  %4 = load ptr, ptr %tmp, align 8
  %5 = load ptr, ptr %head.addr, align 8
  %prev = getelementptr inbounds %struct.list, ptr %5, i32 0, i32 2
  store ptr %4, ptr %prev, align 8
  %6 = load ptr, ptr %tmp, align 8
  %prev1 = getelementptr inbounds %struct.list, ptr %6, i32 0, i32 2
  store ptr null, ptr %prev1, align 8
  %7 = load ptr, ptr %tmp, align 8
  %8 = load i32, ptr %i.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, ptr %i.addr, align 4
  %call2 = call ptr @construct(ptr noundef %7, i32 noundef %8)
  store ptr %call2, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %9 = load ptr, ptr %head.addr, align 8
  store ptr %9, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load ptr, ptr %retval, align 8
  ret ptr %10
}

declare ptr @malloc(i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %head = alloca ptr, align 8
  %call = call ptr @malloc(i32 noundef 24)
  store ptr %call, ptr %head, align 8
  %0 = load ptr, ptr %head, align 8
  %field = getelementptr inbounds %struct.list, ptr %0, i32 0, i32 0
  store i32 0, ptr %field, align 8
  %1 = load ptr, ptr %head, align 8
  %next = getelementptr inbounds %struct.list, ptr %1, i32 0, i32 1
  store ptr null, ptr %next, align 8
  %2 = load ptr, ptr %head, align 8
  %prev = getelementptr inbounds %struct.list, ptr %2, i32 0, i32 2
  store ptr null, ptr %prev, align 8
  %3 = load ptr, ptr %head, align 8
  %call1 = call ptr @construct(ptr noundef %3, i32 noundef 10)
  store ptr %call1, ptr %head, align 8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
