; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/complex_tests/test-linklist.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test-linklist.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list = type { i32, ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @destroy(ptr noundef %head) #0 {
entry:
  %head.addr = alloca ptr, align 8
  %cur = alloca ptr, align 8
  store ptr %head, ptr %head.addr, align 8
  %0 = load ptr, ptr %head.addr, align 8
  store ptr %0, ptr %cur, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load ptr, ptr %cur, align 8
  %flag = getelementptr inbounds %struct.list, ptr %1, i32 0, i32 0
  %2 = load i32, ptr %flag, align 8
  %cmp = icmp ne i32 %2, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load ptr, ptr %cur, align 8
  %next = getelementptr inbounds %struct.list, ptr %3, i32 0, i32 1
  %4 = load ptr, ptr %next, align 8
  store ptr %4, ptr %cur, align 8
  %5 = load ptr, ptr %cur, align 8
  call void @free(ptr noundef %5)
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %while.cond
  ret void
}

declare void @free(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @construct(i32 noundef %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  %head = alloca ptr, align 8
  %i = alloca i32, align 4
  %cur = alloca ptr, align 8
  store i32 %idx, ptr %idx.addr, align 4
  store i32 0, ptr %i, align 4
  %call = call ptr @malloc(i32 noundef 16)
  store ptr %call, ptr %head, align 8
  %0 = load ptr, ptr %head, align 8
  %next = getelementptr inbounds %struct.list, ptr %0, i32 0, i32 1
  store ptr null, ptr %next, align 8
  %1 = load ptr, ptr %head, align 8
  %flag = getelementptr inbounds %struct.list, ptr %1, i32 0, i32 0
  store i32 -1, ptr %flag, align 8
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, ptr %i, align 4
  %3 = load i32, ptr %idx.addr, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call ptr @malloc(i32 noundef 16)
  store ptr %call1, ptr %cur, align 8
  %4 = load i32, ptr %idx.addr, align 4
  %5 = load ptr, ptr %cur, align 8
  %flag2 = getelementptr inbounds %struct.list, ptr %5, i32 0, i32 0
  store i32 %4, ptr %flag2, align 8
  %6 = load ptr, ptr %head, align 8
  %7 = load ptr, ptr %cur, align 8
  %next3 = getelementptr inbounds %struct.list, ptr %7, i32 0, i32 1
  store ptr %6, ptr %next3, align 8
  %8 = load ptr, ptr %cur, align 8
  store ptr %8, ptr %head, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, ptr %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %10 = load ptr, ptr %head, align 8
  ret ptr %10
}

declare ptr @malloc(i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @addlist(ptr noundef %l, ptr noundef %elem) #0 {
entry:
  %l.addr = alloca ptr, align 8
  %elem.addr = alloca ptr, align 8
  %head = alloca ptr, align 8
  %t = alloca ptr, align 8
  store ptr %l, ptr %l.addr, align 8
  store ptr %elem, ptr %elem.addr, align 8
  %0 = load ptr, ptr %l.addr, align 8
  store ptr %0, ptr %head, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load ptr, ptr %head, align 8
  %next = getelementptr inbounds %struct.list, ptr %1, i32 0, i32 1
  %2 = load ptr, ptr %next, align 8
  store ptr %2, ptr %t, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load ptr, ptr %t, align 8
  store ptr %3, ptr %head, align 8
  br label %while.cond, !llvm.loop !9

while.end:                                        ; preds = %while.cond
  %4 = load ptr, ptr %elem.addr, align 8
  %5 = load ptr, ptr %head, align 8
  %next1 = getelementptr inbounds %struct.list, ptr %5, i32 0, i32 1
  store ptr %4, ptr %next1, align 8
  %6 = load ptr, ptr %l.addr, align 8
  ret ptr %6
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
entry:
  %head = alloca ptr, align 8
  %head1 = alloca ptr, align 8
  %call = call ptr @construct(i32 noundef 10)
  store ptr %call, ptr %head, align 8
  %call1 = call ptr @construct(i32 noundef 2)
  store ptr %call1, ptr %head1, align 8
  %0 = load ptr, ptr %head, align 8
  %flag = getelementptr inbounds %struct.list, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %flag, align 8
  %cmp = icmp eq i32 %1, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %head, align 8
  store ptr %2, ptr %head1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load ptr, ptr %head, align 8
  %4 = load ptr, ptr %head1, align 8
  %call2 = call ptr @addlist(ptr noundef %3, ptr noundef %4)
  store ptr %call2, ptr %head, align 8
  %5 = load ptr, ptr %head, align 8
  call void @destroy(ptr noundef %5)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
