; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_64-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/INTERVAL_test_64-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @increment(ptr noundef %a) #0 !dbg !10 {
entry:
  %a.addr = alloca ptr, align 8
  store ptr %a, ptr %a.addr, align 8
    #dbg_declare(ptr %a.addr, !17, !DIExpression(), !18)
  %0 = load ptr, ptr %a.addr, align 8, !dbg !19
  %1 = load i32, ptr %0, align 4, !dbg !20
  %add = add nsw i32 %1, 1, !dbg !21
  %2 = load ptr, ptr %a.addr, align 8, !dbg !22
  store i32 %add, ptr %2, align 4, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @recursive(i32 noundef %a) #0 !dbg !25 {
entry:
  %a.addr = alloca i32, align 4
  store i32 %a, ptr %a.addr, align 4
    #dbg_declare(ptr %a.addr, !28, !DIExpression(), !29)
  %0 = load i32, ptr %a.addr, align 4, !dbg !30
  %dec = add nsw i32 %0, -1, !dbg !30
  store i32 %dec, ptr %a.addr, align 4, !dbg !30
  %1 = load i32, ptr %a.addr, align 4, !dbg !31
  %tobool = icmp ne i32 %1, 0, !dbg !31
  br i1 %tobool, label %if.then, label %if.end, !dbg !31

if.then:                                          ; preds = %entry
  %2 = load i32, ptr %a.addr, align 4, !dbg !33
  %call = call i32 @recursive(i32 noundef %2), !dbg !35
  store i32 %call, ptr %a.addr, align 4, !dbg !36
  br label %if.end, !dbg !37

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, ptr %a.addr, align 4, !dbg !38
  ret i32 %3, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !40 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %a, !43, !DIExpression(), !44)
  br label %LOOP, !dbg !45

LOOP:                                             ; preds = %if.then5, %entry
    #dbg_label(!46, !47)
  %0 = load i32, ptr %a, align 4, !dbg !48
  %cmp = icmp sgt i32 %0, 5, !dbg !50
  br i1 %cmp, label %if.then, label %if.else, !dbg !50

if.then:                                          ; preds = %LOOP
  %1 = load i32, ptr %a, align 4, !dbg !51
  %dec = add nsw i32 %1, -1, !dbg !51
  store i32 %dec, ptr %a, align 4, !dbg !51
  br label %if.end3, !dbg !53

if.else:                                          ; preds = %LOOP
  %2 = load i32, ptr %a, align 4, !dbg !54
  %cmp1 = icmp slt i32 %2, 5, !dbg !56
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !56

if.then2:                                         ; preds = %if.else
  %3 = load i32, ptr %a, align 4, !dbg !57
  %inc = add nsw i32 %3, 1, !dbg !57
  store i32 %inc, ptr %a, align 4, !dbg !57
  br label %if.end, !dbg !59

if.end:                                           ; preds = %if.then2, %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %4 = load i32, ptr %a, align 4, !dbg !60
  %cmp4 = icmp ne i32 %4, 5, !dbg !62
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !62

if.then5:                                         ; preds = %if.end3
  br label %LOOP, !dbg !63

if.else6:                                         ; preds = %if.end3
  %5 = load i32, ptr %a, align 4, !dbg !65
  %call = call i32 @recursive(i32 noundef %5), !dbg !67
  store i32 %call, ptr %a, align 4, !dbg !68
  br label %if.end7

if.end7:                                          ; preds = %if.else6
  br label %while.body, !dbg !69

while.body:                                       ; preds = %if.end10, %if.end7
  call void @increment(ptr noundef %a), !dbg !70
  %6 = load i32, ptr %a, align 4, !dbg !72
  %cmp8 = icmp eq i32 %6, 10, !dbg !74
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !74

if.then9:                                         ; preds = %while.body
  call void @exit(i32 noundef 0) #2, !dbg !75
  unreachable, !dbg !75

if.end10:                                         ; preds = %while.body
  br label %while.body, !dbg !69, !llvm.loop !77
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/INTERVAL_test_64-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "e19c5df3ee58bf593f3fa39eb8472508")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!10 = distinct !DISubprogram(name: "increment", scope: !11, file: !11, line: 9, type: !12, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!11 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_64-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "e19c5df3ee58bf593f3fa39eb8472508")
!12 = !DISubroutineType(types: !13)
!13 = !{null, !14}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !{}
!17 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !11, line: 9, type: !14)
!18 = !DILocation(line: 9, column: 21, scope: !10)
!19 = !DILocation(line: 10, column: 8, scope: !10)
!20 = !DILocation(line: 10, column: 7, scope: !10)
!21 = !DILocation(line: 10, column: 10, scope: !10)
!22 = !DILocation(line: 10, column: 3, scope: !10)
!23 = !DILocation(line: 10, column: 5, scope: !10)
!24 = !DILocation(line: 11, column: 1, scope: !10)
!25 = distinct !DISubprogram(name: "recursive", scope: !11, file: !11, line: 13, type: !26, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!26 = !DISubroutineType(types: !27)
!27 = !{!15, !15}
!28 = !DILocalVariable(name: "a", arg: 1, scope: !25, file: !11, line: 13, type: !15)
!29 = !DILocation(line: 13, column: 19, scope: !25)
!30 = !DILocation(line: 14, column: 3, scope: !25)
!31 = !DILocation(line: 15, column: 5, scope: !32)
!32 = distinct !DILexicalBlock(scope: !25, file: !11, line: 15, column: 5)
!33 = !DILocation(line: 16, column: 17, scope: !34)
!34 = distinct !DILexicalBlock(scope: !32, file: !11, line: 15, column: 8)
!35 = !DILocation(line: 16, column: 7, scope: !34)
!36 = !DILocation(line: 16, column: 5, scope: !34)
!37 = !DILocation(line: 17, column: 2, scope: !34)
!38 = !DILocation(line: 18, column: 9, scope: !25)
!39 = !DILocation(line: 18, column: 2, scope: !25)
!40 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 21, type: !41, scopeLine: 21, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!41 = !DISubroutineType(types: !42)
!42 = !{!15}
!43 = !DILocalVariable(name: "a", scope: !40, file: !11, line: 22, type: !15)
!44 = !DILocation(line: 22, column: 6, scope: !40)
!45 = !DILocation(line: 22, column: 2, scope: !40)
!46 = !DILabel(scope: !40, name: "LOOP", file: !11, line: 23)
!47 = !DILocation(line: 23, column: 2, scope: !40)
!48 = !DILocation(line: 24, column: 5, scope: !49)
!49 = distinct !DILexicalBlock(scope: !40, file: !11, line: 24, column: 5)
!50 = !DILocation(line: 24, column: 7, scope: !49)
!51 = !DILocation(line: 25, column: 4, scope: !52)
!52 = distinct !DILexicalBlock(scope: !49, file: !11, line: 24, column: 12)
!53 = !DILocation(line: 26, column: 2, scope: !52)
!54 = !DILocation(line: 27, column: 10, scope: !55)
!55 = distinct !DILexicalBlock(scope: !49, file: !11, line: 27, column: 10)
!56 = !DILocation(line: 27, column: 12, scope: !55)
!57 = !DILocation(line: 28, column: 4, scope: !58)
!58 = distinct !DILexicalBlock(scope: !55, file: !11, line: 27, column: 17)
!59 = !DILocation(line: 29, column: 2, scope: !58)
!60 = !DILocation(line: 31, column: 5, scope: !61)
!61 = distinct !DILexicalBlock(scope: !40, file: !11, line: 31, column: 5)
!62 = !DILocation(line: 31, column: 7, scope: !61)
!63 = !DILocation(line: 32, column: 3, scope: !64)
!64 = distinct !DILexicalBlock(scope: !61, file: !11, line: 31, column: 13)
!65 = !DILocation(line: 35, column: 17, scope: !66)
!66 = distinct !DILexicalBlock(scope: !61, file: !11, line: 34, column: 7)
!67 = !DILocation(line: 35, column: 7, scope: !66)
!68 = !DILocation(line: 35, column: 5, scope: !66)
!69 = !DILocation(line: 37, column: 2, scope: !40)
!70 = !DILocation(line: 38, column: 3, scope: !71)
!71 = distinct !DILexicalBlock(scope: !40, file: !11, line: 37, column: 14)
!72 = !DILocation(line: 39, column: 6, scope: !73)
!73 = distinct !DILexicalBlock(scope: !71, file: !11, line: 39, column: 6)
!74 = !DILocation(line: 39, column: 8, scope: !73)
!75 = !DILocation(line: 40, column: 4, scope: !76)
!76 = distinct !DILexicalBlock(scope: !73, file: !11, line: 39, column: 15)
!77 = distinct !{!77, !69, !78}
!78 = !DILocation(line: 42, column: 2, scope: !40)
