; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34918-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34918-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.nft_set = type { i32, ptr }
%struct.nft_data_desc = type { i32, i32 }
%struct.nft_data = type { ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @nft_set_elem_init(ptr noundef %set, ptr noundef %data) #0 {
entry:
  %retval = alloca ptr, align 8
  %set.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  store ptr %set, ptr %set.addr, align 8
  store ptr %data, ptr %data.addr, align 8
  %0 = load ptr, ptr %data.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8
  %2 = load ptr, ptr %set.addr, align 8
  %data1 = getelementptr inbounds %struct.nft_set, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %data1, align 8
  %4 = load ptr, ptr %set.addr, align 8
  %dlen = getelementptr inbounds %struct.nft_set, ptr %4, i32 0, i32 0
  %5 = load i32, ptr %dlen, align 8
  %conv = sext i32 %5 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr align 1 %3, i64 %conv, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load ptr, ptr %retval, align 8
  ret ptr %6
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_setelem_parse_data(ptr noundef %set, ptr noundef %desc, ptr noundef %data) #0 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %err = alloca i32, align 4
  store ptr %set, ptr %set.addr, align 8
  store ptr %desc, ptr %desc.addr, align 8
  store ptr %data, ptr %data.addr, align 8
  %0 = load ptr, ptr %data.addr, align 8
  %1 = load ptr, ptr %desc.addr, align 8
  %call = call i32 @nft_data_init(ptr noundef %0, ptr noundef %1)
  store i32 %call, ptr %err, align 4
  %2 = load i32, ptr %err, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, ptr %err, align 4
  store i32 %3, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %desc.addr, align 8
  %type = getelementptr inbounds %struct.nft_data_desc, ptr %4, i32 0, i32 0
  %5 = load i32, ptr %type, align 4
  %cmp1 = icmp ne i32 %5, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %6 = load ptr, ptr %desc.addr, align 8
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %6, i32 0, i32 1
  %7 = load i32, ptr %len, align 4
  %8 = load ptr, ptr %set.addr, align 8
  %dlen = getelementptr inbounds %struct.nft_set, ptr %8, i32 0, i32 0
  %9 = load i32, ptr %dlen, align 8
  %cmp2 = icmp ne i32 %7, %9
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %land.lhs.true
  %10 = load ptr, ptr %data.addr, align 8
  %11 = load ptr, ptr %desc.addr, align 8
  %call4 = call i32 @nft_data_release(ptr noundef %10, ptr noundef %11)
  store i32 -1, ptr %retval, align 4
  br label %return

if.end5:                                          ; preds = %land.lhs.true, %if.end
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %12 = load i32, ptr %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_add_set_elem(ptr noundef %set) #0 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %data = alloca %struct.nft_data, align 8
  %desc = alloca %struct.nft_data_desc, align 4
  store ptr %set, ptr %set.addr, align 8
  %0 = load ptr, ptr %set.addr, align 8
  %dlen = getelementptr inbounds %struct.nft_set, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %dlen, align 8
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %desc, i32 0, i32 1
  store i32 %1, ptr %len, align 4
  %call = call i32 @nd()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %set.addr, align 8
  %call1 = call i32 @nft_setelem_parse_data(ptr noundef %2, ptr noundef %desc, ptr noundef %data)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load ptr, ptr %set.addr, align 8
  %data2 = getelementptr inbounds %struct.nft_data, ptr %data, i32 0, i32 0
  %4 = load ptr, ptr %data2, align 8
  %call3 = call ptr @nft_set_elem_init(ptr noundef %3, ptr noundef %4)
  %5 = load i32, ptr %retval, align 4
  ret i32 %5
}

declare i32 @nd() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_init(ptr noundef %data, ptr noundef %desc) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  store ptr %desc, ptr %desc.addr, align 8
  %call = call i32 @nd()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %0 = load ptr, ptr %desc.addr, align 8
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %0, i32 0, i32 1
  %1 = load i32, ptr %len, align 4
  %call1 = call i32 (i32, ...) @ALLOC(i32 noundef %1)
  %conv = sext i32 %call1 to i64
  %2 = inttoptr i64 %conv to ptr
  %3 = load ptr, ptr %data.addr, align 8
  %data2 = getelementptr inbounds %struct.nft_data, ptr %3, i32 0, i32 0
  store ptr %2, ptr %data2, align 8
  %4 = load ptr, ptr %desc.addr, align 8
  %type = getelementptr inbounds %struct.nft_data_desc, ptr %4, i32 0, i32 0
  store i32 0, ptr %type, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load ptr, ptr %desc.addr, align 8
  %len3 = getelementptr inbounds %struct.nft_data_desc, ptr %5, i32 0, i32 1
  %6 = load i32, ptr %len3, align 4
  %sub = sub nsw i32 %6, 2
  %call4 = call i32 (i32, ...) @ALLOC(i32 noundef %sub)
  %conv5 = sext i32 %call4 to i64
  %7 = inttoptr i64 %conv5 to ptr
  %8 = load ptr, ptr %data.addr, align 8
  %data6 = getelementptr inbounds %struct.nft_data, ptr %8, i32 0, i32 0
  store ptr %7, ptr %data6, align 8
  %9 = load ptr, ptr %desc.addr, align 8
  %type7 = getelementptr inbounds %struct.nft_data_desc, ptr %9, i32 0, i32 0
  store i32 0, ptr %type7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, ptr %retval, align 4
  ret i32 %10
}

declare i32 @ALLOC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_release(ptr noundef %data, ptr noundef %desc) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  store ptr %desc, ptr %desc.addr, align 8
  %0 = load ptr, ptr %data.addr, align 8
  %data1 = getelementptr inbounds %struct.nft_data, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %data1, align 8
  call void @free(ptr noundef %1) #4
  %2 = load ptr, ptr %data.addr, align 8
  %data2 = getelementptr inbounds %struct.nft_data, ptr %2, i32 0, i32 0
  store ptr null, ptr %data2, align 8
  %3 = load ptr, ptr %desc.addr, align 8
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %3, i32 0, i32 1
  store i32 0, ptr %len, align 4
  %4 = load i32, ptr %retval, align 4
  ret i32 %4
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %set = alloca %struct.nft_set, align 8
  %dlen = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 0
  store i32 10, ptr %dlen, align 8
  %dlen1 = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 0
  %0 = load i32, ptr %dlen1, align 8
  %conv = sext i32 %0 to i64
  %1 = alloca i8, i64 %conv, align 16
  %data = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 1
  store ptr %1, ptr %data, align 8
  %call = call i32 @nft_add_set_elem(ptr noundef %set)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
