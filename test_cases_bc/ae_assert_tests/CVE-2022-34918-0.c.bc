; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34918-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-34918-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.nft_set = type { i32, ptr }
%struct.nft_data_desc = type { i32, i32 }
%struct.nft_data = type { ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @nft_set_elem_init(ptr noundef %set, ptr noundef %data) #0 !dbg !20 {
entry:
  %retval = alloca ptr, align 8
  %set.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  store ptr %set, ptr %set.addr, align 8
    #dbg_declare(ptr %set.addr, !34, !DIExpression(), !35)
  store ptr %data, ptr %data.addr, align 8
    #dbg_declare(ptr %data.addr, !36, !DIExpression(), !37)
  %0 = load ptr, ptr %data.addr, align 8, !dbg !38
  %tobool = icmp ne ptr %0, null, !dbg !38
  br i1 %tobool, label %if.then, label %if.end, !dbg !38

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !40
  %2 = load ptr, ptr %set.addr, align 8, !dbg !41
  %data1 = getelementptr inbounds nuw %struct.nft_set, ptr %2, i32 0, i32 1, !dbg !42
  %3 = load ptr, ptr %data1, align 8, !dbg !42
  %4 = load ptr, ptr %set.addr, align 8, !dbg !43
  %dlen = getelementptr inbounds nuw %struct.nft_set, ptr %4, i32 0, i32 0, !dbg !44
  %5 = load i32, ptr %dlen, align 8, !dbg !44
  %conv = sext i32 %5 to i64, !dbg !43
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr align 1 %3, i64 %conv, i1 false), !dbg !45
  br label %if.end, !dbg !45

if.end:                                           ; preds = %if.then, %entry
  %6 = load ptr, ptr %retval, align 8, !dbg !46
  ret ptr %6, !dbg !46
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_setelem_parse_data(ptr noundef %set, ptr noundef %desc, ptr noundef %data) #0 !dbg !47 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %err = alloca i32, align 4
  store ptr %set, ptr %set.addr, align 8
    #dbg_declare(ptr %set.addr, !60, !DIExpression(), !61)
  store ptr %desc, ptr %desc.addr, align 8
    #dbg_declare(ptr %desc.addr, !62, !DIExpression(), !63)
  store ptr %data, ptr %data.addr, align 8
    #dbg_declare(ptr %data.addr, !64, !DIExpression(), !65)
    #dbg_declare(ptr %err, !66, !DIExpression(), !67)
  %0 = load ptr, ptr %data.addr, align 8, !dbg !68
  %1 = load ptr, ptr %desc.addr, align 8, !dbg !69
  %call = call i32 @nft_data_init(ptr noundef %0, ptr noundef %1), !dbg !70
  store i32 %call, ptr %err, align 4, !dbg !71
  %2 = load i32, ptr %err, align 4, !dbg !72
  %cmp = icmp slt i32 %2, 0, !dbg !74
  br i1 %cmp, label %if.then, label %if.end, !dbg !74

if.then:                                          ; preds = %entry
  %3 = load i32, ptr %err, align 4, !dbg !75
  store i32 %3, ptr %retval, align 4, !dbg !76
  br label %return, !dbg !76

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %desc.addr, align 8, !dbg !77
  %type = getelementptr inbounds nuw %struct.nft_data_desc, ptr %4, i32 0, i32 0, !dbg !79
  %5 = load i32, ptr %type, align 4, !dbg !79
  %cmp1 = icmp ne i32 %5, 0, !dbg !80
  br i1 %cmp1, label %land.lhs.true, label %if.end5, !dbg !81

land.lhs.true:                                    ; preds = %if.end
  %6 = load ptr, ptr %desc.addr, align 8, !dbg !82
  %len = getelementptr inbounds nuw %struct.nft_data_desc, ptr %6, i32 0, i32 1, !dbg !83
  %7 = load i32, ptr %len, align 4, !dbg !83
  %8 = load ptr, ptr %set.addr, align 8, !dbg !84
  %dlen = getelementptr inbounds nuw %struct.nft_set, ptr %8, i32 0, i32 0, !dbg !85
  %9 = load i32, ptr %dlen, align 8, !dbg !85
  %cmp2 = icmp ne i32 %7, %9, !dbg !86
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !81

if.then3:                                         ; preds = %land.lhs.true
  %10 = load ptr, ptr %data.addr, align 8, !dbg !87
  %11 = load ptr, ptr %desc.addr, align 8, !dbg !89
  %call4 = call i32 @nft_data_release(ptr noundef %10, ptr noundef %11), !dbg !90
  store i32 -1, ptr %retval, align 4, !dbg !91
  br label %return, !dbg !91

if.end5:                                          ; preds = %land.lhs.true, %if.end
  store i32 0, ptr %retval, align 4, !dbg !92
  br label %return, !dbg !92

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %12 = load i32, ptr %retval, align 4, !dbg !93
  ret i32 %12, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_add_set_elem(ptr noundef %set) #0 !dbg !94 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %data = alloca %struct.nft_data, align 8
  %desc = alloca %struct.nft_data_desc, align 4
  store ptr %set, ptr %set.addr, align 8
    #dbg_declare(ptr %set.addr, !97, !DIExpression(), !98)
    #dbg_declare(ptr %data, !99, !DIExpression(), !100)
    #dbg_declare(ptr %desc, !101, !DIExpression(), !102)
  %0 = load ptr, ptr %set.addr, align 8, !dbg !103
  %dlen = getelementptr inbounds nuw %struct.nft_set, ptr %0, i32 0, i32 0, !dbg !104
  %1 = load i32, ptr %dlen, align 8, !dbg !104
  %len = getelementptr inbounds nuw %struct.nft_data_desc, ptr %desc, i32 0, i32 1, !dbg !105
  store i32 %1, ptr %len, align 4, !dbg !106
  %call = call i32 @nd(), !dbg !107
  %tobool = icmp ne i32 %call, 0, !dbg !107
  br i1 %tobool, label %if.then, label %if.end, !dbg !107

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %set.addr, align 8, !dbg !109
  %call1 = call i32 @nft_setelem_parse_data(ptr noundef %2, ptr noundef %desc, ptr noundef %data), !dbg !111
  br label %if.end, !dbg !112

if.end:                                           ; preds = %if.then, %entry
  %3 = load ptr, ptr %set.addr, align 8, !dbg !113
  %data2 = getelementptr inbounds nuw %struct.nft_data, ptr %data, i32 0, i32 0, !dbg !114
  %4 = load ptr, ptr %data2, align 8, !dbg !114
  %call3 = call ptr @nft_set_elem_init(ptr noundef %3, ptr noundef %4), !dbg !115
  %5 = load i32, ptr %retval, align 4, !dbg !116
  ret i32 %5, !dbg !116
}

declare i32 @nd() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_init(ptr noundef %data, ptr noundef %desc) #0 !dbg !117 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
    #dbg_declare(ptr %data.addr, !120, !DIExpression(), !121)
  store ptr %desc, ptr %desc.addr, align 8
    #dbg_declare(ptr %desc.addr, !122, !DIExpression(), !123)
  %call = call i32 @nd(), !dbg !124
  %tobool = icmp ne i32 %call, 0, !dbg !124
  br i1 %tobool, label %if.then, label %if.else, !dbg !124

if.then:                                          ; preds = %entry
  %0 = load ptr, ptr %desc.addr, align 8, !dbg !126
  %len = getelementptr inbounds nuw %struct.nft_data_desc, ptr %0, i32 0, i32 1, !dbg !128
  %1 = load i32, ptr %len, align 4, !dbg !128
  %call1 = call i32 (i32, ...) @ALLOC(i32 noundef %1), !dbg !129
  %conv = sext i32 %call1 to i64, !dbg !130
  %2 = inttoptr i64 %conv to ptr, !dbg !130
  %3 = load ptr, ptr %data.addr, align 8, !dbg !131
  %data2 = getelementptr inbounds nuw %struct.nft_data, ptr %3, i32 0, i32 0, !dbg !132
  store ptr %2, ptr %data2, align 8, !dbg !133
  %4 = load ptr, ptr %desc.addr, align 8, !dbg !134
  %type = getelementptr inbounds nuw %struct.nft_data_desc, ptr %4, i32 0, i32 0, !dbg !135
  store i32 0, ptr %type, align 4, !dbg !136
  br label %if.end, !dbg !137

if.else:                                          ; preds = %entry
  %5 = load ptr, ptr %desc.addr, align 8, !dbg !138
  %len3 = getelementptr inbounds nuw %struct.nft_data_desc, ptr %5, i32 0, i32 1, !dbg !140
  %6 = load i32, ptr %len3, align 4, !dbg !140
  %sub = sub nsw i32 %6, 2, !dbg !141
  %call4 = call i32 (i32, ...) @ALLOC(i32 noundef %sub), !dbg !142
  %conv5 = sext i32 %call4 to i64, !dbg !143
  %7 = inttoptr i64 %conv5 to ptr, !dbg !143
  %8 = load ptr, ptr %data.addr, align 8, !dbg !144
  %data6 = getelementptr inbounds nuw %struct.nft_data, ptr %8, i32 0, i32 0, !dbg !145
  store ptr %7, ptr %data6, align 8, !dbg !146
  %9 = load ptr, ptr %desc.addr, align 8, !dbg !147
  %type7 = getelementptr inbounds nuw %struct.nft_data_desc, ptr %9, i32 0, i32 0, !dbg !148
  store i32 0, ptr %type7, align 4, !dbg !149
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, ptr %retval, align 4, !dbg !150
  ret i32 %10, !dbg !150
}

declare i32 @ALLOC(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_release(ptr noundef %data, ptr noundef %desc) #0 !dbg !151 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
    #dbg_declare(ptr %data.addr, !152, !DIExpression(), !153)
  store ptr %desc, ptr %desc.addr, align 8
    #dbg_declare(ptr %desc.addr, !154, !DIExpression(), !155)
  %0 = load ptr, ptr %data.addr, align 8, !dbg !156
  %data1 = getelementptr inbounds nuw %struct.nft_data, ptr %0, i32 0, i32 0, !dbg !157
  %1 = load ptr, ptr %data1, align 8, !dbg !157
  call void @free(ptr noundef %1) #4, !dbg !158
  %2 = load ptr, ptr %data.addr, align 8, !dbg !159
  %data2 = getelementptr inbounds nuw %struct.nft_data, ptr %2, i32 0, i32 0, !dbg !160
  store ptr null, ptr %data2, align 8, !dbg !161
  %3 = load ptr, ptr %desc.addr, align 8, !dbg !162
  %len = getelementptr inbounds nuw %struct.nft_data_desc, ptr %3, i32 0, i32 1, !dbg !163
  store i32 0, ptr %len, align 4, !dbg !164
  %4 = load i32, ptr %retval, align 4, !dbg !165
  ret i32 %4, !dbg !165
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !166 {
entry:
  %set = alloca %struct.nft_set, align 8
    #dbg_declare(ptr %set, !169, !DIExpression(), !170)
  %dlen = getelementptr inbounds nuw %struct.nft_set, ptr %set, i32 0, i32 0, !dbg !171
  store i32 10, ptr %dlen, align 8, !dbg !172
  %dlen1 = getelementptr inbounds nuw %struct.nft_set, ptr %set, i32 0, i32 0, !dbg !173
  %0 = load i32, ptr %dlen1, align 8, !dbg !173
  %conv = sext i32 %0 to i64, !dbg !173
  %1 = alloca i8, i64 %conv, align 16, !dbg !173
  %data = getelementptr inbounds nuw %struct.nft_set, ptr %set, i32 0, i32 1, !dbg !174
  store ptr %1, ptr %data, align 8, !dbg !175
  %call = call i32 @nft_add_set_elem(ptr noundef %set), !dbg !176
  ret i32 0, !dbg !177
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13, !14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !9, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-34918-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c8a2d66ad333035256a4fd01bc4f5bf0")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TYPE", file: !4, line: 20, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-34918-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c8a2d66ad333035256a4fd01bc4f5bf0")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8}
!7 = !DIEnumerator(name: "NFT_DATA_VERDICT", value: 0)
!8 = !DIEnumerator(name: "NFT_DATA_OTHER", value: 1)
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 8, !"PIC Level", i32 2}
!16 = !{i32 7, !"PIE Level", i32 2}
!17 = !{i32 7, !"uwtable", i32 2}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!20 = distinct !DISubprogram(name: "nft_set_elem_init", scope: !4, file: !4, line: 32, type: !21, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !24, !31}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_set", file: !4, line: 14, size: 128, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "dlen", scope: !26, file: !4, line: 15, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !26, file: !4, line: 16, baseType: !10, size: 64, offset: 64)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!33 = !{}
!34 = !DILocalVariable(name: "set", arg: 1, scope: !20, file: !4, line: 32, type: !24)
!35 = !DILocation(line: 32, column: 47, scope: !20)
!36 = !DILocalVariable(name: "data", arg: 2, scope: !20, file: !4, line: 33, type: !31)
!37 = !DILocation(line: 33, column: 37, scope: !20)
!38 = !DILocation(line: 35, column: 7, scope: !39)
!39 = distinct !DILexicalBlock(scope: !20, file: !4, line: 35, column: 7)
!40 = !DILocation(line: 36, column: 12, scope: !39)
!41 = !DILocation(line: 36, column: 18, scope: !39)
!42 = !DILocation(line: 36, column: 23, scope: !39)
!43 = !DILocation(line: 36, column: 29, scope: !39)
!44 = !DILocation(line: 36, column: 34, scope: !39)
!45 = !DILocation(line: 36, column: 5, scope: !39)
!46 = !DILocation(line: 37, column: 1, scope: !20)
!47 = distinct !DISubprogram(name: "nft_setelem_parse_data", scope: !4, file: !4, line: 39, type: !48, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!48 = !DISubroutineType(types: !49)
!49 = !{!29, !50, !51, !56}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_data_desc", file: !4, line: 19, size: 64, elements: !53)
!53 = !{!54, !55}
!54 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !52, file: !4, line: 24, baseType: !3, size: 32)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !52, file: !4, line: 25, baseType: !29, size: 32, offset: 32)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_data", file: !4, line: 28, size: 64, elements: !58)
!58 = !{!59}
!59 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !57, file: !4, line: 29, baseType: !10, size: 64)
!60 = !DILocalVariable(name: "set", arg: 1, scope: !47, file: !4, line: 39, type: !50)
!61 = !DILocation(line: 39, column: 45, scope: !47)
!62 = !DILocalVariable(name: "desc", arg: 2, scope: !47, file: !4, line: 40, type: !51)
!63 = !DILocation(line: 40, column: 50, scope: !47)
!64 = !DILocalVariable(name: "data", arg: 3, scope: !47, file: !4, line: 41, type: !56)
!65 = !DILocation(line: 41, column: 45, scope: !47)
!66 = !DILocalVariable(name: "err", scope: !47, file: !4, line: 43, type: !29)
!67 = !DILocation(line: 43, column: 7, scope: !47)
!68 = !DILocation(line: 44, column: 23, scope: !47)
!69 = !DILocation(line: 44, column: 29, scope: !47)
!70 = !DILocation(line: 44, column: 9, scope: !47)
!71 = !DILocation(line: 44, column: 7, scope: !47)
!72 = !DILocation(line: 45, column: 7, scope: !73)
!73 = distinct !DILexicalBlock(scope: !47, file: !4, line: 45, column: 7)
!74 = !DILocation(line: 45, column: 11, scope: !73)
!75 = !DILocation(line: 46, column: 12, scope: !73)
!76 = !DILocation(line: 46, column: 5, scope: !73)
!77 = !DILocation(line: 48, column: 7, scope: !78)
!78 = distinct !DILexicalBlock(scope: !47, file: !4, line: 48, column: 7)
!79 = !DILocation(line: 48, column: 13, scope: !78)
!80 = !DILocation(line: 48, column: 18, scope: !78)
!81 = !DILocation(line: 48, column: 38, scope: !78)
!82 = !DILocation(line: 48, column: 41, scope: !78)
!83 = !DILocation(line: 48, column: 47, scope: !78)
!84 = !DILocation(line: 48, column: 54, scope: !78)
!85 = !DILocation(line: 48, column: 59, scope: !78)
!86 = !DILocation(line: 48, column: 51, scope: !78)
!87 = !DILocation(line: 49, column: 22, scope: !88)
!88 = distinct !DILexicalBlock(scope: !78, file: !4, line: 48, column: 65)
!89 = !DILocation(line: 49, column: 28, scope: !88)
!90 = !DILocation(line: 49, column: 5, scope: !88)
!91 = !DILocation(line: 50, column: 5, scope: !88)
!92 = !DILocation(line: 53, column: 3, scope: !47)
!93 = !DILocation(line: 54, column: 1, scope: !47)
!94 = distinct !DISubprogram(name: "nft_add_set_elem", scope: !4, file: !4, line: 56, type: !95, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!95 = !DISubroutineType(types: !96)
!96 = !{!29, !50}
!97 = !DILocalVariable(name: "set", arg: 1, scope: !94, file: !4, line: 56, type: !50)
!98 = !DILocation(line: 56, column: 38, scope: !94)
!99 = !DILocalVariable(name: "data", scope: !94, file: !4, line: 57, type: !57)
!100 = !DILocation(line: 57, column: 19, scope: !94)
!101 = !DILocalVariable(name: "desc", scope: !94, file: !4, line: 58, type: !52)
!102 = !DILocation(line: 58, column: 24, scope: !94)
!103 = !DILocation(line: 59, column: 14, scope: !94)
!104 = !DILocation(line: 59, column: 19, scope: !94)
!105 = !DILocation(line: 59, column: 8, scope: !94)
!106 = !DILocation(line: 59, column: 12, scope: !94)
!107 = !DILocation(line: 61, column: 7, scope: !108)
!108 = distinct !DILexicalBlock(scope: !94, file: !4, line: 61, column: 7)
!109 = !DILocation(line: 62, column: 28, scope: !110)
!110 = distinct !DILexicalBlock(scope: !108, file: !4, line: 61, column: 13)
!111 = !DILocation(line: 62, column: 5, scope: !110)
!112 = !DILocation(line: 63, column: 3, scope: !110)
!113 = !DILocation(line: 64, column: 21, scope: !94)
!114 = !DILocation(line: 64, column: 31, scope: !94)
!115 = !DILocation(line: 64, column: 3, scope: !94)
!116 = !DILocation(line: 65, column: 1, scope: !94)
!117 = distinct !DISubprogram(name: "nft_data_init", scope: !4, file: !4, line: 67, type: !118, scopeLine: 67, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!118 = !DISubroutineType(types: !119)
!119 = !{!29, !56, !51}
!120 = !DILocalVariable(name: "data", arg: 1, scope: !117, file: !4, line: 67, type: !56)
!121 = !DILocation(line: 67, column: 36, scope: !117)
!122 = !DILocalVariable(name: "desc", arg: 2, scope: !117, file: !4, line: 67, type: !51)
!123 = !DILocation(line: 67, column: 64, scope: !117)
!124 = !DILocation(line: 68, column: 9, scope: !125)
!125 = distinct !DILexicalBlock(scope: !117, file: !4, line: 68, column: 9)
!126 = !DILocation(line: 69, column: 33, scope: !127)
!127 = distinct !DILexicalBlock(scope: !125, file: !4, line: 68, column: 15)
!128 = !DILocation(line: 69, column: 39, scope: !127)
!129 = !DILocation(line: 69, column: 27, scope: !127)
!130 = !DILocation(line: 69, column: 20, scope: !127)
!131 = !DILocation(line: 69, column: 7, scope: !127)
!132 = !DILocation(line: 69, column: 13, scope: !127)
!133 = !DILocation(line: 69, column: 18, scope: !127)
!134 = !DILocation(line: 70, column: 7, scope: !127)
!135 = !DILocation(line: 70, column: 13, scope: !127)
!136 = !DILocation(line: 70, column: 18, scope: !127)
!137 = !DILocation(line: 71, column: 5, scope: !127)
!138 = !DILocation(line: 72, column: 33, scope: !139)
!139 = distinct !DILexicalBlock(scope: !125, file: !4, line: 71, column: 12)
!140 = !DILocation(line: 72, column: 39, scope: !139)
!141 = !DILocation(line: 72, column: 43, scope: !139)
!142 = !DILocation(line: 72, column: 27, scope: !139)
!143 = !DILocation(line: 72, column: 20, scope: !139)
!144 = !DILocation(line: 72, column: 7, scope: !139)
!145 = !DILocation(line: 72, column: 13, scope: !139)
!146 = !DILocation(line: 72, column: 18, scope: !139)
!147 = !DILocation(line: 73, column: 7, scope: !139)
!148 = !DILocation(line: 73, column: 13, scope: !139)
!149 = !DILocation(line: 73, column: 18, scope: !139)
!150 = !DILocation(line: 75, column: 1, scope: !117)
!151 = distinct !DISubprogram(name: "nft_data_release", scope: !4, file: !4, line: 77, type: !118, scopeLine: 77, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!152 = !DILocalVariable(name: "data", arg: 1, scope: !151, file: !4, line: 77, type: !56)
!153 = !DILocation(line: 77, column: 39, scope: !151)
!154 = !DILocalVariable(name: "desc", arg: 2, scope: !151, file: !4, line: 77, type: !51)
!155 = !DILocation(line: 77, column: 67, scope: !151)
!156 = !DILocation(line: 78, column: 9, scope: !151)
!157 = !DILocation(line: 78, column: 15, scope: !151)
!158 = !DILocation(line: 78, column: 4, scope: !151)
!159 = !DILocation(line: 79, column: 4, scope: !151)
!160 = !DILocation(line: 79, column: 10, scope: !151)
!161 = !DILocation(line: 79, column: 15, scope: !151)
!162 = !DILocation(line: 80, column: 4, scope: !151)
!163 = !DILocation(line: 80, column: 10, scope: !151)
!164 = !DILocation(line: 80, column: 14, scope: !151)
!165 = !DILocation(line: 81, column: 1, scope: !151)
!166 = distinct !DISubprogram(name: "main", scope: !4, file: !4, line: 83, type: !167, scopeLine: 83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!167 = !DISubroutineType(types: !168)
!168 = !{!29}
!169 = !DILocalVariable(name: "set", scope: !166, file: !4, line: 84, type: !26)
!170 = !DILocation(line: 84, column: 18, scope: !166)
!171 = !DILocation(line: 85, column: 7, scope: !166)
!172 = !DILocation(line: 85, column: 12, scope: !166)
!173 = !DILocation(line: 86, column: 21, scope: !166)
!174 = !DILocation(line: 86, column: 7, scope: !166)
!175 = !DILocation(line: 86, column: 12, scope: !166)
!176 = !DILocation(line: 87, column: 3, scope: !166)
!177 = !DILocation(line: 88, column: 1, scope: !166)
