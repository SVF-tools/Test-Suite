; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34918-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34918-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.nft_set = type { i32, ptr }
%struct.nft_data_desc = type { i32, i32 }
%struct.nft_data = type { ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @nft_set_elem_init(ptr noundef %set, ptr noundef %data) #0 !dbg !20 {
entry:
  %retval = alloca ptr, align 8
  %set.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  store ptr %set, ptr %set.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %set.addr, metadata !34, metadata !DIExpression()), !dbg !35
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load ptr, ptr %data.addr, align 8, !dbg !38
  %tobool = icmp ne ptr %0, null, !dbg !38
  br i1 %tobool, label %if.then, label %if.end, !dbg !40

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %data.addr, align 8, !dbg !41
  %2 = load ptr, ptr %set.addr, align 8, !dbg !42
  %data1 = getelementptr inbounds %struct.nft_set, ptr %2, i32 0, i32 1, !dbg !43
  %3 = load ptr, ptr %data1, align 8, !dbg !43
  %4 = load ptr, ptr %set.addr, align 8, !dbg !44
  %dlen = getelementptr inbounds %struct.nft_set, ptr %4, i32 0, i32 0, !dbg !45
  %5 = load i32, ptr %dlen, align 8, !dbg !45
  %conv = sext i32 %5 to i64, !dbg !44
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr align 1 %3, i64 %conv, i1 false), !dbg !46
  br label %if.end, !dbg !46

if.end:                                           ; preds = %if.then, %entry
  %6 = load ptr, ptr %retval, align 8, !dbg !47
  ret ptr %6, !dbg !47
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_setelem_parse_data(ptr noundef %set, ptr noundef %desc, ptr noundef %data) #0 !dbg !48 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %err = alloca i32, align 4
  store ptr %set, ptr %set.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %set.addr, metadata !61, metadata !DIExpression()), !dbg !62
  store ptr %desc, ptr %desc.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %desc.addr, metadata !63, metadata !DIExpression()), !dbg !64
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !65, metadata !DIExpression()), !dbg !66
  call void @llvm.dbg.declare(metadata ptr %err, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load ptr, ptr %data.addr, align 8, !dbg !69
  %1 = load ptr, ptr %desc.addr, align 8, !dbg !70
  %call = call i32 @nft_data_init(ptr noundef %0, ptr noundef %1), !dbg !71
  store i32 %call, ptr %err, align 4, !dbg !72
  %2 = load i32, ptr %err, align 4, !dbg !73
  %cmp = icmp slt i32 %2, 0, !dbg !75
  br i1 %cmp, label %if.then, label %if.end, !dbg !76

if.then:                                          ; preds = %entry
  %3 = load i32, ptr %err, align 4, !dbg !77
  store i32 %3, ptr %retval, align 4, !dbg !78
  br label %return, !dbg !78

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %desc.addr, align 8, !dbg !79
  %type = getelementptr inbounds %struct.nft_data_desc, ptr %4, i32 0, i32 0, !dbg !81
  %5 = load i32, ptr %type, align 4, !dbg !81
  %cmp1 = icmp ne i32 %5, 0, !dbg !82
  br i1 %cmp1, label %land.lhs.true, label %if.end5, !dbg !83

land.lhs.true:                                    ; preds = %if.end
  %6 = load ptr, ptr %desc.addr, align 8, !dbg !84
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %6, i32 0, i32 1, !dbg !85
  %7 = load i32, ptr %len, align 4, !dbg !85
  %8 = load ptr, ptr %set.addr, align 8, !dbg !86
  %dlen = getelementptr inbounds %struct.nft_set, ptr %8, i32 0, i32 0, !dbg !87
  %9 = load i32, ptr %dlen, align 8, !dbg !87
  %cmp2 = icmp ne i32 %7, %9, !dbg !88
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !89

if.then3:                                         ; preds = %land.lhs.true
  %10 = load ptr, ptr %data.addr, align 8, !dbg !90
  %11 = load ptr, ptr %desc.addr, align 8, !dbg !92
  %call4 = call i32 @nft_data_release(ptr noundef %10, ptr noundef %11), !dbg !93
  store i32 -1, ptr %retval, align 4, !dbg !94
  br label %return, !dbg !94

if.end5:                                          ; preds = %land.lhs.true, %if.end
  store i32 0, ptr %retval, align 4, !dbg !95
  br label %return, !dbg !95

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %12 = load i32, ptr %retval, align 4, !dbg !96
  ret i32 %12, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_add_set_elem(ptr noundef %set) #0 !dbg !97 {
entry:
  %retval = alloca i32, align 4
  %set.addr = alloca ptr, align 8
  %data = alloca %struct.nft_data, align 8
  %desc = alloca %struct.nft_data_desc, align 4
  store ptr %set, ptr %set.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %set.addr, metadata !100, metadata !DIExpression()), !dbg !101
  call void @llvm.dbg.declare(metadata ptr %data, metadata !102, metadata !DIExpression()), !dbg !103
  call void @llvm.dbg.declare(metadata ptr %desc, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load ptr, ptr %set.addr, align 8, !dbg !106
  %dlen = getelementptr inbounds %struct.nft_set, ptr %0, i32 0, i32 0, !dbg !107
  %1 = load i32, ptr %dlen, align 8, !dbg !107
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %desc, i32 0, i32 1, !dbg !108
  store i32 %1, ptr %len, align 4, !dbg !109
  %call = call i32 @nd(), !dbg !110
  %tobool = icmp ne i32 %call, 0, !dbg !110
  br i1 %tobool, label %if.then, label %if.end, !dbg !112

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %set.addr, align 8, !dbg !113
  %call1 = call i32 @nft_setelem_parse_data(ptr noundef %2, ptr noundef %desc, ptr noundef %data), !dbg !115
  br label %if.end, !dbg !116

if.end:                                           ; preds = %if.then, %entry
  %3 = load ptr, ptr %set.addr, align 8, !dbg !117
  %data2 = getelementptr inbounds %struct.nft_data, ptr %data, i32 0, i32 0, !dbg !118
  %4 = load ptr, ptr %data2, align 8, !dbg !118
  %call3 = call ptr @nft_set_elem_init(ptr noundef %3, ptr noundef %4), !dbg !119
  %5 = load i32, ptr %retval, align 4, !dbg !120
  ret i32 %5, !dbg !120
}

declare i32 @nd() #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_init(ptr noundef %data, ptr noundef %desc) #0 !dbg !121 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !124, metadata !DIExpression()), !dbg !125
  store ptr %desc, ptr %desc.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %desc.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %call = call i32 @nd(), !dbg !128
  %tobool = icmp ne i32 %call, 0, !dbg !128
  br i1 %tobool, label %if.then, label %if.else, !dbg !130

if.then:                                          ; preds = %entry
  %0 = load ptr, ptr %desc.addr, align 8, !dbg !131
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %0, i32 0, i32 1, !dbg !133
  %1 = load i32, ptr %len, align 4, !dbg !133
  %call1 = call i32 (i32, ...) @ALLOC(i32 noundef %1), !dbg !134
  %conv = sext i32 %call1 to i64, !dbg !135
  %2 = inttoptr i64 %conv to ptr, !dbg !135
  %3 = load ptr, ptr %data.addr, align 8, !dbg !136
  %data2 = getelementptr inbounds %struct.nft_data, ptr %3, i32 0, i32 0, !dbg !137
  store ptr %2, ptr %data2, align 8, !dbg !138
  %4 = load ptr, ptr %desc.addr, align 8, !dbg !139
  %type = getelementptr inbounds %struct.nft_data_desc, ptr %4, i32 0, i32 0, !dbg !140
  store i32 0, ptr %type, align 4, !dbg !141
  br label %if.end, !dbg !142

if.else:                                          ; preds = %entry
  %5 = load ptr, ptr %desc.addr, align 8, !dbg !143
  %len3 = getelementptr inbounds %struct.nft_data_desc, ptr %5, i32 0, i32 1, !dbg !145
  %6 = load i32, ptr %len3, align 4, !dbg !145
  %sub = sub nsw i32 %6, 2, !dbg !146
  %call4 = call i32 (i32, ...) @ALLOC(i32 noundef %sub), !dbg !147
  %conv5 = sext i32 %call4 to i64, !dbg !148
  %7 = inttoptr i64 %conv5 to ptr, !dbg !148
  %8 = load ptr, ptr %data.addr, align 8, !dbg !149
  %data6 = getelementptr inbounds %struct.nft_data, ptr %8, i32 0, i32 0, !dbg !150
  store ptr %7, ptr %data6, align 8, !dbg !151
  %9 = load ptr, ptr %desc.addr, align 8, !dbg !152
  %type7 = getelementptr inbounds %struct.nft_data_desc, ptr %9, i32 0, i32 0, !dbg !153
  store i32 0, ptr %type7, align 4, !dbg !154
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i32, ptr %retval, align 4, !dbg !155
  ret i32 %10, !dbg !155
}

declare i32 @ALLOC(...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nft_data_release(ptr noundef %data, ptr noundef %desc) #0 !dbg !156 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %desc.addr = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %data.addr, metadata !157, metadata !DIExpression()), !dbg !158
  store ptr %desc, ptr %desc.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %desc.addr, metadata !159, metadata !DIExpression()), !dbg !160
  %0 = load ptr, ptr %data.addr, align 8, !dbg !161
  %data1 = getelementptr inbounds %struct.nft_data, ptr %0, i32 0, i32 0, !dbg !162
  %1 = load ptr, ptr %data1, align 8, !dbg !162
  call void @free(ptr noundef %1) #5, !dbg !163
  %2 = load ptr, ptr %data.addr, align 8, !dbg !164
  %data2 = getelementptr inbounds %struct.nft_data, ptr %2, i32 0, i32 0, !dbg !165
  store ptr null, ptr %data2, align 8, !dbg !166
  %3 = load ptr, ptr %desc.addr, align 8, !dbg !167
  %len = getelementptr inbounds %struct.nft_data_desc, ptr %3, i32 0, i32 1, !dbg !168
  store i32 0, ptr %len, align 4, !dbg !169
  %4 = load i32, ptr %retval, align 4, !dbg !170
  ret i32 %4, !dbg !170
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !171 {
entry:
  %set = alloca %struct.nft_set, align 8
  call void @llvm.dbg.declare(metadata ptr %set, metadata !174, metadata !DIExpression()), !dbg !175
  %dlen = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 0, !dbg !176
  store i32 10, ptr %dlen, align 8, !dbg !177
  %dlen1 = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 0, !dbg !178
  %0 = load i32, ptr %dlen1, align 8, !dbg !178
  %conv = sext i32 %0 to i64, !dbg !178
  %1 = alloca i8, i64 %conv, align 16, !dbg !178
  %data = getelementptr inbounds %struct.nft_set, ptr %set, i32 0, i32 1, !dbg !179
  store ptr %1, ptr %data, align 8, !dbg !180
  %call = call i32 @nft_add_set_elem(ptr noundef %set), !dbg !181
  ret i32 0, !dbg !182
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13, !14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !9, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34918-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "c8a2d66ad333035256a4fd01bc4f5bf0")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TYPE", file: !4, line: 20, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-34918-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "c8a2d66ad333035256a4fd01bc4f5bf0")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8}
!7 = !DIEnumerator(name: "NFT_DATA_VERDICT", value: 0)
!8 = !DIEnumerator(name: "NFT_DATA_OTHER", value: 1)
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 8, !"PIC Level", i32 2}
!16 = !{i32 7, !"PIE Level", i32 2}
!17 = !{i32 7, !"uwtable", i32 2}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 16.0.0"}
!20 = distinct !DISubprogram(name: "nft_set_elem_init", scope: !4, file: !4, line: 32, type: !21, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !24, !31}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_set", file: !4, line: 14, size: 128, elements: !27)
!27 = !{!28, !30}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "dlen", scope: !26, file: !4, line: 15, baseType: !29, size: 32)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !26, file: !4, line: 16, baseType: !10, size: 64, offset: 64)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!33 = !{}
!34 = !DILocalVariable(name: "set", arg: 1, scope: !20, file: !4, line: 32, type: !24)
!35 = !DILocation(line: 32, column: 47, scope: !20)
!36 = !DILocalVariable(name: "data", arg: 2, scope: !20, file: !4, line: 33, type: !31)
!37 = !DILocation(line: 33, column: 37, scope: !20)
!38 = !DILocation(line: 35, column: 7, scope: !39)
!39 = distinct !DILexicalBlock(scope: !20, file: !4, line: 35, column: 7)
!40 = !DILocation(line: 35, column: 7, scope: !20)
!41 = !DILocation(line: 36, column: 12, scope: !39)
!42 = !DILocation(line: 36, column: 18, scope: !39)
!43 = !DILocation(line: 36, column: 23, scope: !39)
!44 = !DILocation(line: 36, column: 29, scope: !39)
!45 = !DILocation(line: 36, column: 34, scope: !39)
!46 = !DILocation(line: 36, column: 5, scope: !39)
!47 = !DILocation(line: 37, column: 1, scope: !20)
!48 = distinct !DISubprogram(name: "nft_setelem_parse_data", scope: !4, file: !4, line: 39, type: !49, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!49 = !DISubroutineType(types: !50)
!50 = !{!29, !51, !52, !57}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!53 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_data_desc", file: !4, line: 19, size: 64, elements: !54)
!54 = !{!55, !56}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !53, file: !4, line: 24, baseType: !3, size: 32)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !53, file: !4, line: 25, baseType: !29, size: 32, offset: 32)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nft_data", file: !4, line: 28, size: 64, elements: !59)
!59 = !{!60}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !58, file: !4, line: 29, baseType: !10, size: 64)
!61 = !DILocalVariable(name: "set", arg: 1, scope: !48, file: !4, line: 39, type: !51)
!62 = !DILocation(line: 39, column: 45, scope: !48)
!63 = !DILocalVariable(name: "desc", arg: 2, scope: !48, file: !4, line: 40, type: !52)
!64 = !DILocation(line: 40, column: 50, scope: !48)
!65 = !DILocalVariable(name: "data", arg: 3, scope: !48, file: !4, line: 41, type: !57)
!66 = !DILocation(line: 41, column: 45, scope: !48)
!67 = !DILocalVariable(name: "err", scope: !48, file: !4, line: 43, type: !29)
!68 = !DILocation(line: 43, column: 7, scope: !48)
!69 = !DILocation(line: 44, column: 23, scope: !48)
!70 = !DILocation(line: 44, column: 29, scope: !48)
!71 = !DILocation(line: 44, column: 9, scope: !48)
!72 = !DILocation(line: 44, column: 7, scope: !48)
!73 = !DILocation(line: 45, column: 7, scope: !74)
!74 = distinct !DILexicalBlock(scope: !48, file: !4, line: 45, column: 7)
!75 = !DILocation(line: 45, column: 11, scope: !74)
!76 = !DILocation(line: 45, column: 7, scope: !48)
!77 = !DILocation(line: 46, column: 12, scope: !74)
!78 = !DILocation(line: 46, column: 5, scope: !74)
!79 = !DILocation(line: 48, column: 7, scope: !80)
!80 = distinct !DILexicalBlock(scope: !48, file: !4, line: 48, column: 7)
!81 = !DILocation(line: 48, column: 13, scope: !80)
!82 = !DILocation(line: 48, column: 18, scope: !80)
!83 = !DILocation(line: 48, column: 38, scope: !80)
!84 = !DILocation(line: 48, column: 41, scope: !80)
!85 = !DILocation(line: 48, column: 47, scope: !80)
!86 = !DILocation(line: 48, column: 54, scope: !80)
!87 = !DILocation(line: 48, column: 59, scope: !80)
!88 = !DILocation(line: 48, column: 51, scope: !80)
!89 = !DILocation(line: 48, column: 7, scope: !48)
!90 = !DILocation(line: 49, column: 22, scope: !91)
!91 = distinct !DILexicalBlock(scope: !80, file: !4, line: 48, column: 65)
!92 = !DILocation(line: 49, column: 28, scope: !91)
!93 = !DILocation(line: 49, column: 5, scope: !91)
!94 = !DILocation(line: 50, column: 5, scope: !91)
!95 = !DILocation(line: 53, column: 3, scope: !48)
!96 = !DILocation(line: 54, column: 1, scope: !48)
!97 = distinct !DISubprogram(name: "nft_add_set_elem", scope: !4, file: !4, line: 56, type: !98, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!98 = !DISubroutineType(types: !99)
!99 = !{!29, !51}
!100 = !DILocalVariable(name: "set", arg: 1, scope: !97, file: !4, line: 56, type: !51)
!101 = !DILocation(line: 56, column: 38, scope: !97)
!102 = !DILocalVariable(name: "data", scope: !97, file: !4, line: 57, type: !58)
!103 = !DILocation(line: 57, column: 19, scope: !97)
!104 = !DILocalVariable(name: "desc", scope: !97, file: !4, line: 58, type: !53)
!105 = !DILocation(line: 58, column: 24, scope: !97)
!106 = !DILocation(line: 59, column: 14, scope: !97)
!107 = !DILocation(line: 59, column: 19, scope: !97)
!108 = !DILocation(line: 59, column: 8, scope: !97)
!109 = !DILocation(line: 59, column: 12, scope: !97)
!110 = !DILocation(line: 61, column: 7, scope: !111)
!111 = distinct !DILexicalBlock(scope: !97, file: !4, line: 61, column: 7)
!112 = !DILocation(line: 61, column: 7, scope: !97)
!113 = !DILocation(line: 62, column: 28, scope: !114)
!114 = distinct !DILexicalBlock(scope: !111, file: !4, line: 61, column: 13)
!115 = !DILocation(line: 62, column: 5, scope: !114)
!116 = !DILocation(line: 63, column: 3, scope: !114)
!117 = !DILocation(line: 64, column: 21, scope: !97)
!118 = !DILocation(line: 64, column: 31, scope: !97)
!119 = !DILocation(line: 64, column: 3, scope: !97)
!120 = !DILocation(line: 65, column: 1, scope: !97)
!121 = distinct !DISubprogram(name: "nft_data_init", scope: !4, file: !4, line: 67, type: !122, scopeLine: 67, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!122 = !DISubroutineType(types: !123)
!123 = !{!29, !57, !52}
!124 = !DILocalVariable(name: "data", arg: 1, scope: !121, file: !4, line: 67, type: !57)
!125 = !DILocation(line: 67, column: 36, scope: !121)
!126 = !DILocalVariable(name: "desc", arg: 2, scope: !121, file: !4, line: 67, type: !52)
!127 = !DILocation(line: 67, column: 64, scope: !121)
!128 = !DILocation(line: 68, column: 9, scope: !129)
!129 = distinct !DILexicalBlock(scope: !121, file: !4, line: 68, column: 9)
!130 = !DILocation(line: 68, column: 9, scope: !121)
!131 = !DILocation(line: 69, column: 33, scope: !132)
!132 = distinct !DILexicalBlock(scope: !129, file: !4, line: 68, column: 15)
!133 = !DILocation(line: 69, column: 39, scope: !132)
!134 = !DILocation(line: 69, column: 27, scope: !132)
!135 = !DILocation(line: 69, column: 20, scope: !132)
!136 = !DILocation(line: 69, column: 7, scope: !132)
!137 = !DILocation(line: 69, column: 13, scope: !132)
!138 = !DILocation(line: 69, column: 18, scope: !132)
!139 = !DILocation(line: 70, column: 7, scope: !132)
!140 = !DILocation(line: 70, column: 13, scope: !132)
!141 = !DILocation(line: 70, column: 18, scope: !132)
!142 = !DILocation(line: 71, column: 5, scope: !132)
!143 = !DILocation(line: 72, column: 33, scope: !144)
!144 = distinct !DILexicalBlock(scope: !129, file: !4, line: 71, column: 12)
!145 = !DILocation(line: 72, column: 39, scope: !144)
!146 = !DILocation(line: 72, column: 43, scope: !144)
!147 = !DILocation(line: 72, column: 27, scope: !144)
!148 = !DILocation(line: 72, column: 20, scope: !144)
!149 = !DILocation(line: 72, column: 7, scope: !144)
!150 = !DILocation(line: 72, column: 13, scope: !144)
!151 = !DILocation(line: 72, column: 18, scope: !144)
!152 = !DILocation(line: 73, column: 7, scope: !144)
!153 = !DILocation(line: 73, column: 13, scope: !144)
!154 = !DILocation(line: 73, column: 18, scope: !144)
!155 = !DILocation(line: 75, column: 1, scope: !121)
!156 = distinct !DISubprogram(name: "nft_data_release", scope: !4, file: !4, line: 77, type: !122, scopeLine: 77, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!157 = !DILocalVariable(name: "data", arg: 1, scope: !156, file: !4, line: 77, type: !57)
!158 = !DILocation(line: 77, column: 39, scope: !156)
!159 = !DILocalVariable(name: "desc", arg: 2, scope: !156, file: !4, line: 77, type: !52)
!160 = !DILocation(line: 77, column: 67, scope: !156)
!161 = !DILocation(line: 78, column: 9, scope: !156)
!162 = !DILocation(line: 78, column: 15, scope: !156)
!163 = !DILocation(line: 78, column: 4, scope: !156)
!164 = !DILocation(line: 79, column: 4, scope: !156)
!165 = !DILocation(line: 79, column: 10, scope: !156)
!166 = !DILocation(line: 79, column: 15, scope: !156)
!167 = !DILocation(line: 80, column: 4, scope: !156)
!168 = !DILocation(line: 80, column: 10, scope: !156)
!169 = !DILocation(line: 80, column: 14, scope: !156)
!170 = !DILocation(line: 81, column: 1, scope: !156)
!171 = distinct !DISubprogram(name: "main", scope: !4, file: !4, line: 83, type: !172, scopeLine: 83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !33)
!172 = !DISubroutineType(types: !173)
!173 = !{!29}
!174 = !DILocalVariable(name: "set", scope: !171, file: !4, line: 84, type: !26)
!175 = !DILocation(line: 84, column: 18, scope: !171)
!176 = !DILocation(line: 85, column: 7, scope: !171)
!177 = !DILocation(line: 85, column: 12, scope: !171)
!178 = !DILocation(line: 86, column: 21, scope: !171)
!179 = !DILocation(line: 86, column: 7, scope: !171)
!180 = !DILocation(line: 86, column: 12, scope: !171)
!181 = !DILocation(line: 87, column: 3, scope: !171)
!182 = !DILocation(line: 88, column: 1, scope: !171)
