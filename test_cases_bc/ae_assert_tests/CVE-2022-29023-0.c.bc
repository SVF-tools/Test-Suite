; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-29023-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/CVE-2022-29023-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.razer_report = type { [80 x i8] }

@.str = private unnamed_addr constant [7 x i8] c"13aa45\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_razer_report(ptr dead_on_unwind noalias writable sret(%struct.razer_report) align 1 %agg.result) #0 !dbg !24 {
entry:
    #dbg_declare(ptr %agg.result, !34, !DIExpression(), !35)
  call void @llvm.memset.p0.i64(ptr align 1 %agg.result, i8 0, i64 80, i1 false), !dbg !35
  call void @llvm.memset.p0.i64(ptr align 1 %agg.result, i8 0, i64 80, i1 false), !dbg !36
  ret void, !dbg !37
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @razer_chroma_standard_matrix_set_custom_frame(ptr dead_on_unwind noalias writable sret(%struct.razer_report) align 1 %agg.result, i8 noundef zeroext %start_col, i8 noundef zeroext %stop_col, ptr noundef %rgb_data) #0 !dbg !38 {
entry:
  %start_col.addr = alloca i8, align 1
  %stop_col.addr = alloca i8, align 1
  %rgb_data.addr = alloca ptr, align 8
  %row_length = alloca i64, align 8
  store i8 %start_col, ptr %start_col.addr, align 1
    #dbg_declare(ptr %start_col.addr, !41, !DIExpression(), !42)
  store i8 %stop_col, ptr %stop_col.addr, align 1
    #dbg_declare(ptr %stop_col.addr, !43, !DIExpression(), !44)
  store ptr %rgb_data, ptr %rgb_data.addr, align 8
    #dbg_declare(ptr %rgb_data.addr, !45, !DIExpression(), !46)
    #dbg_declare(ptr %row_length, !47, !DIExpression(), !48)
  %0 = load i8, ptr %stop_col.addr, align 1, !dbg !49
  %conv = zext i8 %0 to i32, !dbg !49
  %add = add nsw i32 %conv, 1, !dbg !50
  %1 = load i8, ptr %start_col.addr, align 1, !dbg !51
  %conv1 = zext i8 %1 to i32, !dbg !51
  %sub = sub nsw i32 %add, %conv1, !dbg !52
  %mul = mul nsw i32 %sub, 3, !dbg !53
  %conv2 = sext i32 %mul to i64, !dbg !54
  store i64 %conv2, ptr %row_length, align 8, !dbg !48
    #dbg_declare(ptr %agg.result, !55, !DIExpression(), !56)
  call void @get_razer_report(ptr dead_on_unwind writable sret(%struct.razer_report) align 1 %agg.result), !dbg !57
  %arguments = getelementptr inbounds nuw %struct.razer_report, ptr %agg.result, i32 0, i32 0, !dbg !58
  %arrayidx = getelementptr inbounds [80 x i8], ptr %arguments, i64 0, i64 4, !dbg !59
  %2 = load ptr, ptr %rgb_data.addr, align 8, !dbg !60
  %3 = load i64, ptr %row_length, align 8, !dbg !61
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %arrayidx, ptr align 1 %2, i64 %3, i1 false), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @razer_attr_write_set_key_row(ptr noundef %buf, i64 noundef %count) #0 !dbg !64 {
entry:
  %buf.addr = alloca ptr, align 8
  %count.addr = alloca i64, align 8
  %report = alloca %struct.razer_report, align 1
  %offset = alloca i64, align 8
  %row_id = alloca i8, align 1
  %start_col = alloca i8, align 1
  %stop_col = alloca i8, align 1
  %row_length = alloca i8, align 1
  %tmp = alloca %struct.razer_report, align 1
  store ptr %buf, ptr %buf.addr, align 8
    #dbg_declare(ptr %buf.addr, !74, !DIExpression(), !75)
  store i64 %count, ptr %count.addr, align 8
    #dbg_declare(ptr %count.addr, !76, !DIExpression(), !77)
    #dbg_declare(ptr %report, !78, !DIExpression(), !79)
  call void @llvm.memset.p0.i64(ptr align 1 %report, i8 0, i64 80, i1 false), !dbg !79
    #dbg_declare(ptr %offset, !80, !DIExpression(), !81)
  store i64 0, ptr %offset, align 8, !dbg !81
    #dbg_declare(ptr %row_id, !82, !DIExpression(), !83)
    #dbg_declare(ptr %start_col, !84, !DIExpression(), !85)
    #dbg_declare(ptr %stop_col, !86, !DIExpression(), !87)
    #dbg_declare(ptr %row_length, !88, !DIExpression(), !89)
  br label %while.cond, !dbg !90

while.cond:                                       ; preds = %if.end24, %entry
  %0 = load i64, ptr %offset, align 8, !dbg !91
  %1 = load i64, ptr %count.addr, align 8, !dbg !92
  %cmp = icmp ult i64 %0, %1, !dbg !93
  br i1 %cmp, label %while.body, label %while.end, !dbg !90

while.body:                                       ; preds = %while.cond
  %2 = load i64, ptr %offset, align 8, !dbg !94
  %add = add i64 %2, 3, !dbg !97
  %3 = load i64, ptr %count.addr, align 8, !dbg !98
  %cmp1 = icmp ugt i64 %add, %3, !dbg !99
  br i1 %cmp1, label %if.then, label %if.end, !dbg !99

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !100

if.end:                                           ; preds = %while.body
  %4 = load ptr, ptr %buf.addr, align 8, !dbg !102
  %5 = load i64, ptr %offset, align 8, !dbg !103
  %inc = add i64 %5, 1, !dbg !103
  store i64 %inc, ptr %offset, align 8, !dbg !103
  %arrayidx = getelementptr inbounds nuw i8, ptr %4, i64 %5, !dbg !102
  %6 = load i8, ptr %arrayidx, align 1, !dbg !102
  store i8 %6, ptr %row_id, align 1, !dbg !104
  %7 = load ptr, ptr %buf.addr, align 8, !dbg !105
  %8 = load i64, ptr %offset, align 8, !dbg !106
  %inc2 = add i64 %8, 1, !dbg !106
  store i64 %inc2, ptr %offset, align 8, !dbg !106
  %arrayidx3 = getelementptr inbounds nuw i8, ptr %7, i64 %8, !dbg !105
  %9 = load i8, ptr %arrayidx3, align 1, !dbg !105
  store i8 %9, ptr %start_col, align 1, !dbg !107
  %10 = load ptr, ptr %buf.addr, align 8, !dbg !108
  %11 = load i64, ptr %offset, align 8, !dbg !109
  %inc4 = add i64 %11, 1, !dbg !109
  store i64 %inc4, ptr %offset, align 8, !dbg !109
  %arrayidx5 = getelementptr inbounds nuw i8, ptr %10, i64 %11, !dbg !108
  %12 = load i8, ptr %arrayidx5, align 1, !dbg !108
  store i8 %12, ptr %stop_col, align 1, !dbg !110
  %13 = load i8, ptr %stop_col, align 1, !dbg !111
  %conv = zext i8 %13 to i32, !dbg !111
  %add6 = add nsw i32 %conv, 1, !dbg !112
  %14 = load i8, ptr %start_col, align 1, !dbg !113
  %conv7 = zext i8 %14 to i32, !dbg !113
  %sub = sub nsw i32 %add6, %conv7, !dbg !114
  %mul = mul nsw i32 %sub, 3, !dbg !115
  %conv8 = trunc i32 %mul to i8, !dbg !116
  store i8 %conv8, ptr %row_length, align 1, !dbg !117
  %15 = load i8, ptr %start_col, align 1, !dbg !118
  %conv9 = zext i8 %15 to i32, !dbg !118
  %16 = load i8, ptr %stop_col, align 1, !dbg !120
  %conv10 = zext i8 %16 to i32, !dbg !120
  %cmp11 = icmp sgt i32 %conv9, %conv10, !dbg !121
  br i1 %cmp11, label %if.then17, label %lor.lhs.false, !dbg !122

lor.lhs.false:                                    ; preds = %if.end
  %17 = load i64, ptr %offset, align 8, !dbg !123
  %18 = load i8, ptr %row_length, align 1, !dbg !124
  %conv13 = zext i8 %18 to i64, !dbg !124
  %add14 = add i64 %17, %conv13, !dbg !125
  %19 = load i64, ptr %count.addr, align 8, !dbg !126
  %cmp15 = icmp ugt i64 %add14, %19, !dbg !127
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !122

if.then17:                                        ; preds = %lor.lhs.false, %if.end
  br label %while.end, !dbg !128

if.end18:                                         ; preds = %lor.lhs.false
  %20 = load i64, ptr %offset, align 8, !dbg !130
  %21 = load i8, ptr %row_length, align 1, !dbg !132
  %conv19 = zext i8 %21 to i64, !dbg !132
  %add20 = add i64 %20, %conv19, !dbg !133
  %22 = load i64, ptr %count.addr, align 8, !dbg !134
  %cmp21 = icmp ugt i64 %add20, %22, !dbg !135
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !135

if.then23:                                        ; preds = %if.end18
  br label %while.end, !dbg !136

if.end24:                                         ; preds = %if.end18
  %23 = load i8, ptr %start_col, align 1, !dbg !138
  %24 = load i8, ptr %stop_col, align 1, !dbg !139
  %25 = load ptr, ptr %buf.addr, align 8, !dbg !140
  %26 = load i64, ptr %offset, align 8, !dbg !141
  %arrayidx25 = getelementptr inbounds nuw i8, ptr %25, i64 %26, !dbg !140
  call void @razer_chroma_standard_matrix_set_custom_frame(ptr dead_on_unwind writable sret(%struct.razer_report) align 1 %tmp, i8 noundef zeroext %23, i8 noundef zeroext %24, ptr noundef %arrayidx25), !dbg !142
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %report, ptr align 1 %tmp, i64 80, i1 false), !dbg !142
  %27 = load i8, ptr %row_length, align 1, !dbg !143
  %conv26 = zext i8 %27 to i64, !dbg !143
  %28 = load i64, ptr %offset, align 8, !dbg !144
  %add27 = add i64 %28, %conv26, !dbg !144
  store i64 %add27, ptr %offset, align 8, !dbg !144
  br label %while.cond, !dbg !90, !llvm.loop !145

while.end:                                        ; preds = %if.then23, %if.then17, %if.then, %while.cond
  %29 = load i64, ptr %count.addr, align 8, !dbg !148
  ret i64 %29, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !150 {
entry:
  %call = call i64 @razer_attr_write_set_key_row(ptr noundef @.str, i64 noundef 144), !dbg !154
  ret i32 0, !dbg !155
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!16, !17, !18, !19, !20, !21, !22}
!llvm.ident = !{!23}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 76, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-29023-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "cceef4c72d4f080f8e7aa9990265496a")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 56, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 7)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !9, globals: !15, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/CVE-2022-29023-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "cceef4c72d4f080f8e7aa9990265496a")
!9 = !{!10, !13}
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !11, line: 18, baseType: !12)
!11 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!12 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!15 = !{!0}
!16 = !{i32 7, !"Dwarf Version", i32 5}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{i32 1, !"wchar_size", i32 4}
!19 = !{i32 8, !"PIC Level", i32 2}
!20 = !{i32 7, !"PIE Level", i32 2}
!21 = !{i32 7, !"uwtable", i32 2}
!22 = !{i32 7, !"frame-pointer", i32 2}
!23 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!24 = distinct !DISubprogram(name: "get_razer_report", scope: !2, file: !2, line: 27, type: !25, scopeLine: 27, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !33)
!25 = !DISubroutineType(types: !26)
!26 = !{!27}
!27 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "razer_report", file: !2, line: 23, size: 640, elements: !28)
!28 = !{!29}
!29 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !27, file: !2, line: 24, baseType: !30, size: 640)
!30 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 640, elements: !31)
!31 = !{!32}
!32 = !DISubrange(count: 80)
!33 = !{}
!34 = !DILocalVariable(name: "new_report", scope: !24, file: !2, line: 28, type: !27)
!35 = !DILocation(line: 28, column: 25, scope: !24)
!36 = !DILocation(line: 29, column: 5, scope: !24)
!37 = !DILocation(line: 30, column: 5, scope: !24)
!38 = distinct !DISubprogram(name: "razer_chroma_standard_matrix_set_custom_frame", scope: !2, file: !2, line: 33, type: !39, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !33)
!39 = !DISubroutineType(types: !40)
!40 = !{!27, !14, !14, !13}
!41 = !DILocalVariable(name: "start_col", arg: 1, scope: !38, file: !2, line: 33, type: !14)
!42 = !DILocation(line: 33, column: 81, scope: !38)
!43 = !DILocalVariable(name: "stop_col", arg: 2, scope: !38, file: !2, line: 33, type: !14)
!44 = !DILocation(line: 33, column: 106, scope: !38)
!45 = !DILocalVariable(name: "rgb_data", arg: 3, scope: !38, file: !2, line: 33, type: !13)
!46 = !DILocation(line: 33, column: 131, scope: !38)
!47 = !DILocalVariable(name: "row_length", scope: !38, file: !2, line: 34, type: !10)
!48 = !DILocation(line: 34, column: 12, scope: !38)
!49 = !DILocation(line: 34, column: 37, scope: !38)
!50 = !DILocation(line: 34, column: 46, scope: !38)
!51 = !DILocation(line: 34, column: 53, scope: !38)
!52 = !DILocation(line: 34, column: 51, scope: !38)
!53 = !DILocation(line: 34, column: 64, scope: !38)
!54 = !DILocation(line: 34, column: 25, scope: !38)
!55 = !DILocalVariable(name: "report", scope: !38, file: !2, line: 35, type: !27)
!56 = !DILocation(line: 35, column: 25, scope: !38)
!57 = !DILocation(line: 35, column: 34, scope: !38)
!58 = !DILocation(line: 37, column: 20, scope: !38)
!59 = !DILocation(line: 37, column: 13, scope: !38)
!60 = !DILocation(line: 37, column: 34, scope: !38)
!61 = !DILocation(line: 37, column: 44, scope: !38)
!62 = !DILocation(line: 37, column: 5, scope: !38)
!63 = !DILocation(line: 38, column: 5, scope: !38)
!64 = distinct !DISubprogram(name: "razer_attr_write_set_key_row", scope: !2, file: !2, line: 41, type: !65, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !33)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !72, !10}
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !68, line: 78, baseType: !69)
!68 = !DIFile(filename: "/usr/include/stdio.h", directory: "", checksumkind: CSK_MD5, checksum: "1e435c46987a169d9f9186f63a512303")
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !70, line: 194, baseType: !71)
!70 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "e1865d9fe29fe1b5ced550b7ba458f9e")
!71 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64)
!73 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!74 = !DILocalVariable(name: "buf", arg: 1, scope: !64, file: !2, line: 41, type: !72)
!75 = !DILocation(line: 41, column: 50, scope: !64)
!76 = !DILocalVariable(name: "count", arg: 2, scope: !64, file: !2, line: 41, type: !10)
!77 = !DILocation(line: 41, column: 62, scope: !64)
!78 = !DILocalVariable(name: "report", scope: !64, file: !2, line: 42, type: !27)
!79 = !DILocation(line: 42, column: 25, scope: !64)
!80 = !DILocalVariable(name: "offset", scope: !64, file: !2, line: 43, type: !10)
!81 = !DILocation(line: 43, column: 12, scope: !64)
!82 = !DILocalVariable(name: "row_id", scope: !64, file: !2, line: 44, type: !14)
!83 = !DILocation(line: 44, column: 19, scope: !64)
!84 = !DILocalVariable(name: "start_col", scope: !64, file: !2, line: 45, type: !14)
!85 = !DILocation(line: 45, column: 19, scope: !64)
!86 = !DILocalVariable(name: "stop_col", scope: !64, file: !2, line: 46, type: !14)
!87 = !DILocation(line: 46, column: 19, scope: !64)
!88 = !DILocalVariable(name: "row_length", scope: !64, file: !2, line: 47, type: !14)
!89 = !DILocation(line: 47, column: 19, scope: !64)
!90 = !DILocation(line: 49, column: 5, scope: !64)
!91 = !DILocation(line: 49, column: 11, scope: !64)
!92 = !DILocation(line: 49, column: 20, scope: !64)
!93 = !DILocation(line: 49, column: 18, scope: !64)
!94 = !DILocation(line: 50, column: 12, scope: !95)
!95 = distinct !DILexicalBlock(scope: !96, file: !2, line: 50, column: 12)
!96 = distinct !DILexicalBlock(scope: !64, file: !2, line: 49, column: 27)
!97 = !DILocation(line: 50, column: 19, scope: !95)
!98 = !DILocation(line: 50, column: 25, scope: !95)
!99 = !DILocation(line: 50, column: 23, scope: !95)
!100 = !DILocation(line: 51, column: 13, scope: !101)
!101 = distinct !DILexicalBlock(scope: !95, file: !2, line: 50, column: 32)
!102 = !DILocation(line: 54, column: 18, scope: !96)
!103 = !DILocation(line: 54, column: 28, scope: !96)
!104 = !DILocation(line: 54, column: 16, scope: !96)
!105 = !DILocation(line: 55, column: 21, scope: !96)
!106 = !DILocation(line: 55, column: 31, scope: !96)
!107 = !DILocation(line: 55, column: 19, scope: !96)
!108 = !DILocation(line: 56, column: 20, scope: !96)
!109 = !DILocation(line: 56, column: 30, scope: !96)
!110 = !DILocation(line: 56, column: 18, scope: !96)
!111 = !DILocation(line: 57, column: 24, scope: !96)
!112 = !DILocation(line: 57, column: 32, scope: !96)
!113 = !DILocation(line: 57, column: 38, scope: !96)
!114 = !DILocation(line: 57, column: 36, scope: !96)
!115 = !DILocation(line: 57, column: 49, scope: !96)
!116 = !DILocation(line: 57, column: 22, scope: !96)
!117 = !DILocation(line: 57, column: 20, scope: !96)
!118 = !DILocation(line: 62, column: 12, scope: !119)
!119 = distinct !DILexicalBlock(scope: !96, file: !2, line: 62, column: 12)
!120 = !DILocation(line: 62, column: 24, scope: !119)
!121 = !DILocation(line: 62, column: 22, scope: !119)
!122 = !DILocation(line: 62, column: 33, scope: !119)
!123 = !DILocation(line: 62, column: 36, scope: !119)
!124 = !DILocation(line: 62, column: 45, scope: !119)
!125 = !DILocation(line: 62, column: 43, scope: !119)
!126 = !DILocation(line: 62, column: 58, scope: !119)
!127 = !DILocation(line: 62, column: 56, scope: !119)
!128 = !DILocation(line: 63, column: 13, scope: !129)
!129 = distinct !DILexicalBlock(scope: !119, file: !2, line: 62, column: 65)
!130 = !DILocation(line: 65, column: 12, scope: !131)
!131 = distinct !DILexicalBlock(scope: !96, file: !2, line: 65, column: 12)
!132 = !DILocation(line: 65, column: 21, scope: !131)
!133 = !DILocation(line: 65, column: 19, scope: !131)
!134 = !DILocation(line: 65, column: 34, scope: !131)
!135 = !DILocation(line: 65, column: 32, scope: !131)
!136 = !DILocation(line: 66, column: 13, scope: !137)
!137 = distinct !DILexicalBlock(scope: !131, file: !2, line: 65, column: 41)
!138 = !DILocation(line: 69, column: 64, scope: !96)
!139 = !DILocation(line: 69, column: 75, scope: !96)
!140 = !DILocation(line: 69, column: 102, scope: !96)
!141 = !DILocation(line: 69, column: 106, scope: !96)
!142 = !DILocation(line: 69, column: 18, scope: !96)
!143 = !DILocation(line: 70, column: 19, scope: !96)
!144 = !DILocation(line: 70, column: 16, scope: !96)
!145 = distinct !{!145, !90, !146, !147}
!146 = !DILocation(line: 71, column: 5, scope: !64)
!147 = !{!"llvm.loop.mustprogress"}
!148 = !DILocation(line: 72, column: 12, scope: !64)
!149 = !DILocation(line: 72, column: 5, scope: !64)
!150 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 75, type: !151, scopeLine: 75, spFlags: DISPFlagDefinition, unit: !7)
!151 = !DISubroutineType(types: !152)
!152 = !{!153}
!153 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!154 = !DILocation(line: 76, column: 5, scope: !150)
!155 = !DILocation(line: 77, column: 1, scope: !150)
