; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-29023-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-29023-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.razer_report = type { [80 x i8] }

@.str = private unnamed_addr constant [7 x i8] c"13aa45\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_razer_report(ptr noalias sret(%struct.razer_report) align 1 %agg.result) #0 {
entry:
  call void @llvm.memset.p0.i64(ptr align 1 %agg.result, i8 0, i64 80, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %agg.result, i8 0, i64 80, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @razer_chroma_standard_matrix_set_custom_frame(ptr noalias sret(%struct.razer_report) align 1 %agg.result, i8 noundef zeroext %start_col, i8 noundef zeroext %stop_col, ptr noundef %rgb_data) #0 {
entry:
  %start_col.addr = alloca i8, align 1
  %stop_col.addr = alloca i8, align 1
  %rgb_data.addr = alloca ptr, align 8
  %row_length = alloca i64, align 8
  store i8 %start_col, ptr %start_col.addr, align 1
  store i8 %stop_col, ptr %stop_col.addr, align 1
  store ptr %rgb_data, ptr %rgb_data.addr, align 8
  %0 = load i8, ptr %stop_col.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 1
  %1 = load i8, ptr %start_col.addr, align 1
  %conv1 = zext i8 %1 to i32
  %sub = sub nsw i32 %add, %conv1
  %mul = mul nsw i32 %sub, 3
  %conv2 = sext i32 %mul to i64
  store i64 %conv2, ptr %row_length, align 8
  call void @get_razer_report(ptr sret(%struct.razer_report) align 1 %agg.result)
  %arguments = getelementptr inbounds %struct.razer_report, ptr %agg.result, i32 0, i32 0
  %arrayidx = getelementptr inbounds [80 x i8], ptr %arguments, i64 0, i64 4
  %2 = load ptr, ptr %rgb_data.addr, align 8
  %3 = load i64, ptr %row_length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %arrayidx, ptr align 1 %2, i64 %3, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @razer_attr_write_set_key_row(ptr noundef %buf, i64 noundef %count) #0 {
entry:
  %buf.addr = alloca ptr, align 8
  %count.addr = alloca i64, align 8
  %report = alloca %struct.razer_report, align 1
  %offset = alloca i64, align 8
  %row_id = alloca i8, align 1
  %start_col = alloca i8, align 1
  %stop_col = alloca i8, align 1
  %row_length = alloca i8, align 1
  %tmp = alloca %struct.razer_report, align 1
  store ptr %buf, ptr %buf.addr, align 8
  store i64 %count, ptr %count.addr, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %report, i8 0, i64 80, i1 false)
  store i64 0, ptr %offset, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end24, %entry
  %0 = load i64, ptr %offset, align 8
  %1 = load i64, ptr %count.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64, ptr %offset, align 8
  %add = add i64 %2, 3
  %3 = load i64, ptr %count.addr, align 8
  %cmp1 = icmp ugt i64 %add, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %4 = load ptr, ptr %buf.addr, align 8
  %5 = load i64, ptr %offset, align 8
  %inc = add i64 %5, 1
  store i64 %inc, ptr %offset, align 8
  %arrayidx = getelementptr inbounds i8, ptr %4, i64 %5
  %6 = load i8, ptr %arrayidx, align 1
  store i8 %6, ptr %row_id, align 1
  %7 = load ptr, ptr %buf.addr, align 8
  %8 = load i64, ptr %offset, align 8
  %inc2 = add i64 %8, 1
  store i64 %inc2, ptr %offset, align 8
  %arrayidx3 = getelementptr inbounds i8, ptr %7, i64 %8
  %9 = load i8, ptr %arrayidx3, align 1
  store i8 %9, ptr %start_col, align 1
  %10 = load ptr, ptr %buf.addr, align 8
  %11 = load i64, ptr %offset, align 8
  %inc4 = add i64 %11, 1
  store i64 %inc4, ptr %offset, align 8
  %arrayidx5 = getelementptr inbounds i8, ptr %10, i64 %11
  %12 = load i8, ptr %arrayidx5, align 1
  store i8 %12, ptr %stop_col, align 1
  %13 = load i8, ptr %stop_col, align 1
  %conv = zext i8 %13 to i32
  %add6 = add nsw i32 %conv, 1
  %14 = load i8, ptr %start_col, align 1
  %conv7 = zext i8 %14 to i32
  %sub = sub nsw i32 %add6, %conv7
  %mul = mul nsw i32 %sub, 3
  %conv8 = trunc i32 %mul to i8
  store i8 %conv8, ptr %row_length, align 1
  %15 = load i8, ptr %start_col, align 1
  %conv9 = zext i8 %15 to i32
  %16 = load i8, ptr %stop_col, align 1
  %conv10 = zext i8 %16 to i32
  %cmp11 = icmp sgt i32 %conv9, %conv10
  br i1 %cmp11, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %17 = load i64, ptr %offset, align 8
  %18 = load i8, ptr %row_length, align 1
  %conv13 = zext i8 %18 to i64
  %add14 = add i64 %17, %conv13
  %19 = load i64, ptr %count.addr, align 8
  %cmp15 = icmp ugt i64 %add14, %19
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %lor.lhs.false, %if.end
  br label %while.end

if.end18:                                         ; preds = %lor.lhs.false
  %20 = load i64, ptr %offset, align 8
  %21 = load i8, ptr %row_length, align 1
  %conv19 = zext i8 %21 to i64
  %add20 = add i64 %20, %conv19
  %22 = load i64, ptr %count.addr, align 8
  %cmp21 = icmp ugt i64 %add20, %22
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end18
  br label %while.end

if.end24:                                         ; preds = %if.end18
  %23 = load i8, ptr %start_col, align 1
  %24 = load i8, ptr %stop_col, align 1
  %25 = load ptr, ptr %buf.addr, align 8
  %26 = load i64, ptr %offset, align 8
  %arrayidx25 = getelementptr inbounds i8, ptr %25, i64 %26
  call void @razer_chroma_standard_matrix_set_custom_frame(ptr sret(%struct.razer_report) align 1 %tmp, i8 noundef zeroext %23, i8 noundef zeroext %24, ptr noundef %arrayidx25)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %report, ptr align 1 %tmp, i64 80, i1 false)
  %27 = load i8, ptr %row_length, align 1
  %conv26 = zext i8 %27 to i64
  %28 = load i64, ptr %offset, align 8
  %add27 = add i64 %28, %conv26
  store i64 %add27, ptr %offset, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %if.then23, %if.then17, %if.then, %while.cond
  %29 = load i64, ptr %count.addr, align 8
  ret i64 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %call = call i64 @razer_attr_write_set_key_row(ptr noundef @.str, i64 noundef 144)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
