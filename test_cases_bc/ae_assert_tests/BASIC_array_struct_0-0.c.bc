; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_array_struct_0-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_array_struct_0-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.A = type { i32, i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [2 x %struct.A], align 16
  %c = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %a, !16, !DIExpression(), !25)
  %arrayidx = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 0, !dbg !26
  %a1 = getelementptr inbounds nuw %struct.A, ptr %arrayidx, i32 0, i32 0, !dbg !27
  store i32 10, ptr %a1, align 16, !dbg !28
  %arrayidx2 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 0, !dbg !29
  %b = getelementptr inbounds nuw %struct.A, ptr %arrayidx2, i32 0, i32 1, !dbg !30
  store i32 11, ptr %b, align 4, !dbg !31
  %arrayidx3 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 1, !dbg !32
  %a4 = getelementptr inbounds nuw %struct.A, ptr %arrayidx3, i32 0, i32 0, !dbg !33
  store i32 20, ptr %a4, align 8, !dbg !34
  %arrayidx5 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 1, !dbg !35
  %b6 = getelementptr inbounds nuw %struct.A, ptr %arrayidx5, i32 0, i32 1, !dbg !36
  store i32 21, ptr %b6, align 4, !dbg !37
    #dbg_declare(ptr %c, !38, !DIExpression(), !39)
  store i32 0, ptr %c, align 4, !dbg !39
  %0 = load i32, ptr %c, align 4, !dbg !40
  %idxprom = sext i32 %0 to i64, !dbg !41
  %arrayidx7 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 %idxprom, !dbg !41
  %b8 = getelementptr inbounds nuw %struct.A, ptr %arrayidx7, i32 0, i32 1, !dbg !42
  %1 = load i32, ptr %b8, align 4, !dbg !42
  %cmp = icmp eq i32 %1, 11, !dbg !43
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !44
  ret i32 0, !dbg !45
}

declare void @svf_assert(i1 noundef zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_array_struct_0-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "78e446f45362b8103119869dd85fd930")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!10 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 13, type: !12, scopeLine: 13, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_array_struct_0-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "78e446f45362b8103119869dd85fd930")
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "a", scope: !10, file: !11, line: 14, type: !17)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 128, elements: !23)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "A", file: !11, line: 12, baseType: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 9, size: 64, elements: !20)
!20 = !{!21, !22}
!21 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !19, file: !11, line: 10, baseType: !14, size: 32)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !19, file: !11, line: 11, baseType: !14, size: 32, offset: 32)
!23 = !{!24}
!24 = !DISubrange(count: 2)
!25 = !DILocation(line: 14, column: 7, scope: !10)
!26 = !DILocation(line: 15, column: 5, scope: !10)
!27 = !DILocation(line: 15, column: 10, scope: !10)
!28 = !DILocation(line: 15, column: 12, scope: !10)
!29 = !DILocation(line: 16, column: 5, scope: !10)
!30 = !DILocation(line: 16, column: 10, scope: !10)
!31 = !DILocation(line: 16, column: 12, scope: !10)
!32 = !DILocation(line: 17, column: 5, scope: !10)
!33 = !DILocation(line: 17, column: 10, scope: !10)
!34 = !DILocation(line: 17, column: 12, scope: !10)
!35 = !DILocation(line: 18, column: 5, scope: !10)
!36 = !DILocation(line: 18, column: 10, scope: !10)
!37 = !DILocation(line: 18, column: 12, scope: !10)
!38 = !DILocalVariable(name: "c", scope: !10, file: !11, line: 19, type: !14)
!39 = !DILocation(line: 19, column: 9, scope: !10)
!40 = !DILocation(line: 20, column: 18, scope: !10)
!41 = !DILocation(line: 20, column: 16, scope: !10)
!42 = !DILocation(line: 20, column: 21, scope: !10)
!43 = !DILocation(line: 20, column: 23, scope: !10)
!44 = !DILocation(line: 20, column: 5, scope: !10)
!45 = !DILocation(line: 21, column: 5, scope: !10)
