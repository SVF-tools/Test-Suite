; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_ptr_func_4-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/BASIC_ptr_func_4-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %q = alloca ptr, align 8
  %y = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata ptr %q, metadata !23, metadata !DIExpression()), !dbg !28
  %call = call i32 @nd_int(), !dbg !29
  %tobool = icmp ne i32 %call, 0, !dbg !29
  br i1 %tobool, label %if.then, label %if.else, !dbg !31

if.then:                                          ; preds = %entry
  store ptr @c, ptr %q, align 8, !dbg !32
  br label %if.end, !dbg !34

if.else:                                          ; preds = %entry
  store ptr @c, ptr %q, align 8, !dbg !35
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.dbg.declare(metadata ptr %y, metadata !37, metadata !DIExpression()), !dbg !38
  store i32 5, ptr %y, align 4, !dbg !38
  call void @llvm.dbg.declare(metadata ptr %r, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load ptr, ptr %q, align 8, !dbg !41
  %call1 = call i32 %0(ptr noundef %y), !dbg !41
  store i32 %call1, ptr %r, align 4, !dbg !40
  %1 = load i32, ptr %y, align 4, !dbg !42
  %cmp = icmp sge i32 %1, 7, !dbg !43
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !44
  %2 = load i32, ptr %retval, align 4, !dbg !45
  ret i32 %2, !dbg !45
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @nd_int() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c(ptr noundef %x) #0 !dbg !46 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %0 = load ptr, ptr %x.addr, align 8, !dbg !49
  %1 = load i32, ptr %0, align 4, !dbg !50
  %add = add nsw i32 %1, 5, !dbg !51
  %2 = load ptr, ptr %x.addr, align 8, !dbg !52
  store i32 %add, ptr %2, align 4, !dbg !53
  %call = call i32 @nd_int(), !dbg !54
  %tobool = icmp ne i32 %call, 0, !dbg !54
  %3 = zext i1 %tobool to i64, !dbg !54
  %cond = select i1 %tobool, i32 0, i32 1, !dbg !54
  ret i32 %cond, !dbg !55
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/BASIC_ptr_func_4-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e2196daf9539908a930fd53e4ab037a9")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 7, type: !12, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_ptr_func_4-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e2196daf9539908a930fd53e4ab037a9")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14, !15}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!18 = !{}
!19 = !DILocalVariable(name: "argc", arg: 1, scope: !10, file: !11, line: 7, type: !14)
!20 = !DILocation(line: 7, column: 14, scope: !10)
!21 = !DILocalVariable(name: "argv", arg: 2, scope: !10, file: !11, line: 7, type: !15)
!22 = !DILocation(line: 7, column: 27, scope: !10)
!23 = !DILocalVariable(name: "q", scope: !10, file: !11, line: 8, type: !24)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{!14, !27}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!28 = !DILocation(line: 8, column: 9, scope: !10)
!29 = !DILocation(line: 9, column: 7, scope: !30)
!30 = distinct !DILexicalBlock(scope: !10, file: !11, line: 9, column: 7)
!31 = !DILocation(line: 9, column: 7, scope: !10)
!32 = !DILocation(line: 10, column: 7, scope: !33)
!33 = distinct !DILexicalBlock(scope: !30, file: !11, line: 9, column: 17)
!34 = !DILocation(line: 11, column: 3, scope: !33)
!35 = !DILocation(line: 12, column: 9, scope: !36)
!36 = distinct !DILexicalBlock(scope: !30, file: !11, line: 11, column: 10)
!37 = !DILocalVariable(name: "y", scope: !10, file: !11, line: 14, type: !14)
!38 = !DILocation(line: 14, column: 7, scope: !10)
!39 = !DILocalVariable(name: "r", scope: !10, file: !11, line: 15, type: !14)
!40 = !DILocation(line: 15, column: 7, scope: !10)
!41 = !DILocation(line: 15, column: 11, scope: !10)
!42 = !DILocation(line: 17, column: 14, scope: !10)
!43 = !DILocation(line: 17, column: 16, scope: !10)
!44 = !DILocation(line: 17, column: 3, scope: !10)
!45 = !DILocation(line: 18, column: 1, scope: !10)
!46 = distinct !DISubprogram(name: "c", scope: !11, file: !11, line: 20, type: !25, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!47 = !DILocalVariable(name: "x", arg: 1, scope: !46, file: !11, line: 20, type: !27)
!48 = !DILocation(line: 20, column: 12, scope: !46)
!49 = !DILocation(line: 21, column: 9, scope: !46)
!50 = !DILocation(line: 21, column: 8, scope: !46)
!51 = !DILocation(line: 21, column: 10, scope: !46)
!52 = !DILocation(line: 21, column: 4, scope: !46)
!53 = !DILocation(line: 21, column: 6, scope: !46)
!54 = !DILocation(line: 22, column: 11, scope: !46)
!55 = !DILocation(line: 22, column: 3, scope: !46)
