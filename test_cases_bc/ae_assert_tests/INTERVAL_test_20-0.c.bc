; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_20-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/INTERVAL_test_20-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"a\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !20 {
entry:
  %retval = alloca i32, align 4
  %r = alloca i32, align 4
  %a = alloca i8, align 1
  %a_as_int = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call i32 (i32, ...) @time(i32 noundef 0), !dbg !24
  call void @srand(i32 noundef %call) #3, !dbg !25
    #dbg_declare(ptr %r, !26, !DIExpression(), !27)
  %call1 = call i32 @rand() #3, !dbg !28
  %rem = srem i32 %call1, 128, !dbg !29
  store i32 %rem, ptr %r, align 4, !dbg !27
    #dbg_declare(ptr %a, !30, !DIExpression(), !31)
  %0 = load i32, ptr %r, align 4, !dbg !32
  %conv = trunc i32 %0 to i8, !dbg !33
  store i8 %conv, ptr %a, align 1, !dbg !31
  %1 = load i8, ptr %a, align 1, !dbg !34
  %conv2 = sext i8 %1 to i32, !dbg !34
  %cmp = icmp sge i32 %conv2, 97, !dbg !36
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !37

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, ptr %a, align 1, !dbg !38
  %conv4 = sext i8 %2 to i32, !dbg !38
  %cmp5 = icmp sle i32 %conv4, 122, !dbg !39
  br i1 %cmp5, label %if.then, label %if.end, !dbg !37

if.then:                                          ; preds = %land.lhs.true
    #dbg_declare(ptr %a_as_int, !40, !DIExpression(), !42)
  %3 = load i8, ptr %a, align 1, !dbg !43
  %conv7 = sext i8 %3 to i32, !dbg !44
  store i32 %conv7, ptr %a_as_int, align 4, !dbg !42
  %4 = load i32, ptr %a_as_int, align 4, !dbg !45
  call void @svf_print(i32 noundef %4, ptr noundef @.str), !dbg !46
  %5 = load i32, ptr %a_as_int, align 4, !dbg !47
  %cmp8 = icmp sge i32 %5, 97, !dbg !48
  br i1 %cmp8, label %land.rhs, label %land.end, !dbg !49

land.rhs:                                         ; preds = %if.then
  %6 = load i32, ptr %a_as_int, align 4, !dbg !50
  %cmp10 = icmp sle i32 %6, 122, !dbg !51
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %7 = phi i1 [ false, %if.then ], [ %cmp10, %land.rhs ], !dbg !52
  call void @svf_assert(i1 noundef zeroext %7), !dbg !53
  br label %if.end, !dbg !54

if.end:                                           ; preds = %land.end, %land.lhs.true, %entry
  %8 = load i32, ptr %retval, align 4, !dbg !55
  ret i32 %8, !dbg !55
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

declare i32 @time(...) #2

; Function Attrs: nounwind
declare i32 @rand() #1

declare void @svf_print(i32 noundef, ptr noundef) #2

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!12, !13, !14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 14, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_20-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "2b67bdcd5e8206800466010a1aafe69e")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !9, globals: !11, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/INTERVAL_test_20-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "2b67bdcd5e8206800466010a1aafe69e")
!9 = !{!4, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !{!0}
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 8, !"PIC Level", i32 2}
!16 = !{i32 7, !"PIE Level", i32 2}
!17 = !{i32 7, !"uwtable", i32 2}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!20 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 8, type: !21, scopeLine: 8, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !23)
!21 = !DISubroutineType(types: !22)
!22 = !{!10}
!23 = !{}
!24 = !DILocation(line: 9, column: 11, scope: !20)
!25 = !DILocation(line: 9, column: 5, scope: !20)
!26 = !DILocalVariable(name: "r", scope: !20, file: !2, line: 10, type: !10)
!27 = !DILocation(line: 10, column: 6, scope: !20)
!28 = !DILocation(line: 10, column: 10, scope: !20)
!29 = !DILocation(line: 10, column: 17, scope: !20)
!30 = !DILocalVariable(name: "a", scope: !20, file: !2, line: 11, type: !4)
!31 = !DILocation(line: 11, column: 10, scope: !20)
!32 = !DILocation(line: 11, column: 20, scope: !20)
!33 = !DILocation(line: 11, column: 14, scope: !20)
!34 = !DILocation(line: 12, column: 9, scope: !35)
!35 = distinct !DILexicalBlock(scope: !20, file: !2, line: 12, column: 9)
!36 = !DILocation(line: 12, column: 11, scope: !35)
!37 = !DILocation(line: 12, column: 18, scope: !35)
!38 = !DILocation(line: 12, column: 21, scope: !35)
!39 = !DILocation(line: 12, column: 23, scope: !35)
!40 = !DILocalVariable(name: "a_as_int", scope: !41, file: !2, line: 13, type: !10)
!41 = distinct !DILexicalBlock(scope: !35, file: !2, line: 12, column: 31)
!42 = !DILocation(line: 13, column: 13, scope: !41)
!43 = !DILocation(line: 13, column: 29, scope: !41)
!44 = !DILocation(line: 13, column: 24, scope: !41)
!45 = !DILocation(line: 14, column: 19, scope: !41)
!46 = !DILocation(line: 14, column: 9, scope: !41)
!47 = !DILocation(line: 15, column: 20, scope: !41)
!48 = !DILocation(line: 15, column: 29, scope: !41)
!49 = !DILocation(line: 15, column: 35, scope: !41)
!50 = !DILocation(line: 15, column: 38, scope: !41)
!51 = !DILocation(line: 15, column: 47, scope: !41)
!52 = !DILocation(line: 0, scope: !41)
!53 = !DILocation(line: 15, column: 9, scope: !41)
!54 = !DILocation(line: 16, column: 5, scope: !41)
!55 = !DILocation(line: 17, column: 1, scope: !20)
