; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_20-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_20-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !13 {
entry:
  %retval = alloca i32, align 4
  %r = alloca i32, align 4
  %a = alloca i8, align 1
  %a_as_int = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call i32 (i32, ...) @time(i32 noundef 0), !dbg !18
  call void @srand(i32 noundef %call) #4, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %r, metadata !20, metadata !DIExpression()), !dbg !21
  %call1 = call i32 @rand() #4, !dbg !22
  %rem = srem i32 %call1, 128, !dbg !23
  store i32 %rem, ptr %r, align 4, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %a, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr %r, align 4, !dbg !26
  %conv = trunc i32 %0 to i8, !dbg !27
  store i8 %conv, ptr %a, align 1, !dbg !25
  call void @llvm.dbg.declare(metadata ptr %a_as_int, metadata !28, metadata !DIExpression()), !dbg !29
  %1 = load i8, ptr %a, align 1, !dbg !30
  %conv2 = sext i8 %1 to i32, !dbg !31
  store i32 %conv2, ptr %a_as_int, align 4, !dbg !29
  %2 = load i8, ptr %a, align 1, !dbg !32
  %conv3 = sext i8 %2 to i32, !dbg !32
  %cmp = icmp sge i32 %conv3, 97, !dbg !34
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !35

land.lhs.true:                                    ; preds = %entry
  %3 = load i8, ptr %a, align 1, !dbg !36
  %conv5 = sext i8 %3 to i32, !dbg !36
  %cmp6 = icmp sle i32 %conv5, 122, !dbg !37
  br i1 %cmp6, label %if.then, label %if.end, !dbg !38

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, ptr %a_as_int, align 4, !dbg !39
  %cmp8 = icmp sge i32 %4, 97, !dbg !41
  br i1 %cmp8, label %land.rhs, label %land.end, !dbg !42

land.rhs:                                         ; preds = %if.then
  %5 = load i32, ptr %a_as_int, align 4, !dbg !43
  %cmp10 = icmp sle i32 %5, 122, !dbg !44
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %6 = phi i1 [ false, %if.then ], [ %cmp10, %land.rhs ], !dbg !45
  call void @svf_assert(i1 noundef zeroext %6), !dbg !46
  br label %if.end, !dbg !47

if.end:                                           ; preds = %land.end, %land.lhs.true, %entry
  %7 = load i32, ptr %retval, align 4, !dbg !48
  ret i32 %7, !dbg !48
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

declare i32 @time(...) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: nounwind
declare i32 @rand() #1

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9, !10, !11}
!llvm.ident = !{!12}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_20-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "a6d43d5ef79129fca67cfa72c6a21dbb")
!2 = !{!3, !4}
!3 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!5 = !{i32 7, !"Dwarf Version", i32 5}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 8, !"PIC Level", i32 2}
!9 = !{i32 7, !"PIE Level", i32 2}
!10 = !{i32 7, !"uwtable", i32 2}
!11 = !{i32 7, !"frame-pointer", i32 2}
!12 = !{!"clang version 16.0.0"}
!13 = distinct !DISubprogram(name: "main", scope: !14, file: !14, line: 7, type: !15, scopeLine: 7, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!14 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_20-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "a6d43d5ef79129fca67cfa72c6a21dbb")
!15 = !DISubroutineType(types: !16)
!16 = !{!4}
!17 = !{}
!18 = !DILocation(line: 8, column: 11, scope: !13)
!19 = !DILocation(line: 8, column: 5, scope: !13)
!20 = !DILocalVariable(name: "r", scope: !13, file: !14, line: 9, type: !4)
!21 = !DILocation(line: 9, column: 6, scope: !13)
!22 = !DILocation(line: 9, column: 10, scope: !13)
!23 = !DILocation(line: 9, column: 17, scope: !13)
!24 = !DILocalVariable(name: "a", scope: !13, file: !14, line: 10, type: !3)
!25 = !DILocation(line: 10, column: 10, scope: !13)
!26 = !DILocation(line: 10, column: 20, scope: !13)
!27 = !DILocation(line: 10, column: 14, scope: !13)
!28 = !DILocalVariable(name: "a_as_int", scope: !13, file: !14, line: 11, type: !4)
!29 = !DILocation(line: 11, column: 9, scope: !13)
!30 = !DILocation(line: 11, column: 25, scope: !13)
!31 = !DILocation(line: 11, column: 20, scope: !13)
!32 = !DILocation(line: 12, column: 9, scope: !33)
!33 = distinct !DILexicalBlock(scope: !13, file: !14, line: 12, column: 9)
!34 = !DILocation(line: 12, column: 11, scope: !33)
!35 = !DILocation(line: 12, column: 18, scope: !33)
!36 = !DILocation(line: 12, column: 21, scope: !33)
!37 = !DILocation(line: 12, column: 23, scope: !33)
!38 = !DILocation(line: 12, column: 9, scope: !13)
!39 = !DILocation(line: 13, column: 20, scope: !40)
!40 = distinct !DILexicalBlock(scope: !33, file: !14, line: 12, column: 31)
!41 = !DILocation(line: 13, column: 29, scope: !40)
!42 = !DILocation(line: 13, column: 35, scope: !40)
!43 = !DILocation(line: 13, column: 38, scope: !40)
!44 = !DILocation(line: 13, column: 47, scope: !40)
!45 = !DILocation(line: 0, scope: !40)
!46 = !DILocation(line: 13, column: 9, scope: !40)
!47 = !DILocation(line: 14, column: 5, scope: !40)
!48 = !DILocation(line: 15, column: 1, scope: !13)
