; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_array_func_2-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/BASIC_array_func_2-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.A = type { i32, i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @getValue(ptr noundef %arr, i32 noundef %x) #0 !dbg !10 {
entry:
  %retval = alloca %struct.A, align 4
  %arr.addr = alloca ptr, align 8
  %x.addr = alloca i32, align 4
  store ptr %arr, ptr %arr.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %arr.addr, metadata !22, metadata !DIExpression()), !dbg !23
  store i32 %x, ptr %x.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load ptr, ptr %arr.addr, align 8, !dbg !26
  %1 = load i32, ptr %x.addr, align 4, !dbg !27
  %idxprom = sext i32 %1 to i64, !dbg !26
  %arrayidx = getelementptr inbounds %struct.A, ptr %0, i64 %idxprom, !dbg !26
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %retval, ptr align 4 %arrayidx, i64 8, i1 false), !dbg !26
  %2 = load i64, ptr %retval, align 4, !dbg !28
  ret i64 %2, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !29 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [2 x %struct.A], align 16
  %res = alloca %struct.A, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %a, metadata !32, metadata !DIExpression()), !dbg !36
  %arrayidx = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 0, !dbg !37
  %a1 = getelementptr inbounds %struct.A, ptr %arrayidx, i32 0, i32 0, !dbg !38
  store i32 10, ptr %a1, align 16, !dbg !39
  %arrayidx2 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 0, !dbg !40
  %b = getelementptr inbounds %struct.A, ptr %arrayidx2, i32 0, i32 1, !dbg !41
  store i32 11, ptr %b, align 4, !dbg !42
  %arrayidx3 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 1, !dbg !43
  %a4 = getelementptr inbounds %struct.A, ptr %arrayidx3, i32 0, i32 0, !dbg !44
  store i32 20, ptr %a4, align 8, !dbg !45
  %arrayidx5 = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 1, !dbg !46
  %b6 = getelementptr inbounds %struct.A, ptr %arrayidx5, i32 0, i32 1, !dbg !47
  store i32 21, ptr %b6, align 4, !dbg !48
  call void @llvm.dbg.declare(metadata ptr %res, metadata !49, metadata !DIExpression()), !dbg !50
  %arraydecay = getelementptr inbounds [2 x %struct.A], ptr %a, i64 0, i64 0, !dbg !51
  %call = call i64 @getValue(ptr noundef %arraydecay, i32 noundef 1), !dbg !52
  store i64 %call, ptr %res, align 4, !dbg !52
  %b7 = getelementptr inbounds %struct.A, ptr %res, i32 0, i32 1, !dbg !53
  %0 = load i32, ptr %b7, align 4, !dbg !53
  %cmp = icmp eq i32 %0, 21, !dbg !54
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !55
  ret i32 0, !dbg !56
}

declare void @svf_assert(i1 noundef zeroext) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/BASIC_array_func_2-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "051a64ea69eb8230e2ad147bf090f9fe")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "getValue", scope: !11, file: !11, line: 13, type: !12, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_array_func_2-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "051a64ea69eb8230e2ad147bf090f9fe")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !20, !18}
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "A", file: !11, line: 11, baseType: !15)
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 8, size: 64, elements: !16)
!16 = !{!17, !19}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !15, file: !11, line: 9, baseType: !18, size: 32)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !15, file: !11, line: 10, baseType: !18, size: 32, offset: 32)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!21 = !{}
!22 = !DILocalVariable(name: "arr", arg: 1, scope: !10, file: !11, line: 13, type: !20)
!23 = !DILocation(line: 13, column: 15, scope: !10)
!24 = !DILocalVariable(name: "x", arg: 2, scope: !10, file: !11, line: 13, type: !18)
!25 = !DILocation(line: 13, column: 24, scope: !10)
!26 = !DILocation(line: 14, column: 12, scope: !10)
!27 = !DILocation(line: 14, column: 16, scope: !10)
!28 = !DILocation(line: 14, column: 5, scope: !10)
!29 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 17, type: !30, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!30 = !DISubroutineType(types: !31)
!31 = !{!18}
!32 = !DILocalVariable(name: "a", scope: !29, file: !11, line: 18, type: !33)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 128, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 2)
!36 = !DILocation(line: 18, column: 7, scope: !29)
!37 = !DILocation(line: 19, column: 5, scope: !29)
!38 = !DILocation(line: 19, column: 10, scope: !29)
!39 = !DILocation(line: 19, column: 12, scope: !29)
!40 = !DILocation(line: 20, column: 5, scope: !29)
!41 = !DILocation(line: 20, column: 10, scope: !29)
!42 = !DILocation(line: 20, column: 12, scope: !29)
!43 = !DILocation(line: 21, column: 5, scope: !29)
!44 = !DILocation(line: 21, column: 10, scope: !29)
!45 = !DILocation(line: 21, column: 12, scope: !29)
!46 = !DILocation(line: 22, column: 5, scope: !29)
!47 = !DILocation(line: 22, column: 10, scope: !29)
!48 = !DILocation(line: 22, column: 12, scope: !29)
!49 = !DILocalVariable(name: "res", scope: !29, file: !11, line: 23, type: !14)
!50 = !DILocation(line: 23, column: 7, scope: !29)
!51 = !DILocation(line: 23, column: 22, scope: !29)
!52 = !DILocation(line: 23, column: 13, scope: !29)
!53 = !DILocation(line: 24, column: 20, scope: !29)
!54 = !DILocation(line: 24, column: 22, scope: !29)
!55 = !DILocation(line: 24, column: 5, scope: !29)
!56 = !DILocation(line: 25, column: 5, scope: !29)
