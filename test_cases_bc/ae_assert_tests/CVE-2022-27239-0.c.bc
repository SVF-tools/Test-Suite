; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-27239-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-27239-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.parsed_mount_info = type { [45 x i8], i8, [2 x i8] }

@.str = private unnamed_addr constant [28 x i8] c"parse opt token, token: %s\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [3 x i8] c"ip\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [5 x i8] c"addr\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [25 x i8] c"parse option, buffer:%s\0A\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1, !dbg !22
@stderr = external global ptr, align 8
@.str.5 = private unnamed_addr constant [34 x i8] c"ip address %s override specified\0A\00", align 1, !dbg !27
@.str.6 = private unnamed_addr constant [74 x i8] c"keyword,ip=VapodinGmVAFzAbsPWGkWdPQI2gozcQulsHW1hJRsyVlaZ,keyword3=value3\00", align 1, !dbg !32

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_opt_token(ptr noundef %token) #0 !dbg !50 {
entry:
  %retval = alloca i32, align 4
  %token.addr = alloca ptr, align 8
  store ptr %token, ptr %token.addr, align 8
    #dbg_declare(ptr %token.addr, !57, !DIExpression(), !58)
  %0 = load ptr, ptr %token.addr, align 8, !dbg !59
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %0), !dbg !60
  %1 = load ptr, ptr %token.addr, align 8, !dbg !61
  %cmp = icmp eq ptr %1, null, !dbg !63
  br i1 %cmp, label %if.then, label %if.end, !dbg !63

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4, !dbg !64
  br label %return, !dbg !64

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %token.addr, align 8, !dbg !65
  %call1 = call i32 @strcmp(ptr noundef %2, ptr noundef @.str.1) #6, !dbg !67
  %cmp2 = icmp eq i32 %call1, 0, !dbg !68
  br i1 %cmp2, label %if.then5, label %lor.lhs.false, !dbg !69

lor.lhs.false:                                    ; preds = %if.end
  %3 = load ptr, ptr %token.addr, align 8, !dbg !70
  %call3 = call i32 @strcmp(ptr noundef %3, ptr noundef @.str.2) #6, !dbg !71
  %cmp4 = icmp eq i32 %call3, 0, !dbg !72
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !69

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 6, ptr %retval, align 4, !dbg !73
  br label %return, !dbg !73

if.end6:                                          ; preds = %lor.lhs.false
  store i32 -1, ptr %retval, align 4, !dbg !74
  br label %return, !dbg !74

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !75
  ret i32 %4, !dbg !75
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcmp(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_options(ptr noundef %data, ptr noundef %parsed_info) #0 !dbg !76 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %parsed_info.addr = alloca ptr, align 8
  %value = alloca ptr, align 8
  %equals = alloca ptr, align 8
  %next_keyword = alloca ptr, align 8
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  %token = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
    #dbg_declare(ptr %data.addr, !88, !DIExpression(), !89)
  store ptr %parsed_info, ptr %parsed_info.addr, align 8
    #dbg_declare(ptr %parsed_info.addr, !90, !DIExpression(), !91)
    #dbg_declare(ptr %value, !92, !DIExpression(), !94)
  %0 = load ptr, ptr %data.addr, align 8, !dbg !95
  %call = call i64 @strlen(ptr noundef %0) #6, !dbg !96
  %add = add i64 %call, 1, !dbg !97
  %call1 = call noalias ptr @malloc(i64 noundef %add) #7, !dbg !98
  store ptr %call1, ptr %value, align 8, !dbg !94
    #dbg_declare(ptr %equals, !99, !DIExpression(), !100)
  %1 = load ptr, ptr %data.addr, align 8, !dbg !101
  %call2 = call i64 @strlen(ptr noundef %1) #6, !dbg !102
  %add3 = add i64 %call2, 1, !dbg !103
  %call4 = call noalias ptr @malloc(i64 noundef %add3) #7, !dbg !104
  store ptr %call4, ptr %equals, align 8, !dbg !100
    #dbg_declare(ptr %next_keyword, !105, !DIExpression(), !106)
  %2 = load ptr, ptr %data.addr, align 8, !dbg !107
  %call5 = call i64 @strlen(ptr noundef %2) #6, !dbg !108
  %add6 = add i64 %call5, 1, !dbg !109
  %call7 = call noalias ptr @malloc(i64 noundef %add6) #7, !dbg !110
  store ptr %call7, ptr %next_keyword, align 8, !dbg !106
  %3 = load ptr, ptr %data.addr, align 8, !dbg !111
  %tobool = icmp ne ptr %3, null, !dbg !111
  br i1 %tobool, label %if.end, label %if.then, !dbg !113

if.then:                                          ; preds = %entry
  store i32 1, ptr %retval, align 4, !dbg !114
  br label %return, !dbg !114

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %data.addr, align 8, !dbg !115
  %call8 = call i64 @strlen(ptr noundef %4) #6, !dbg !116
  %add9 = add i64 %call8, 1, !dbg !117
  %5 = call ptr @llvm.stacksave.p0(), !dbg !118
  store ptr %5, ptr %saved_stack, align 8, !dbg !118
  %vla = alloca i8, i64 %add9, align 16, !dbg !118
  store i64 %add9, ptr %__vla_expr0, align 8, !dbg !118
    #dbg_declare(ptr %__vla_expr0, !119, !DIExpression(), !121)
    #dbg_declare(ptr %vla, !122, !DIExpression(), !126)
  %6 = load ptr, ptr %data.addr, align 8, !dbg !127
  %call10 = call ptr @strcpy(ptr noundef %vla, ptr noundef %6) #8, !dbg !128
  %call11 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %vla), !dbg !129
    #dbg_declare(ptr %token, !130, !DIExpression(), !131)
  %call12 = call ptr @strtok(ptr noundef %vla, ptr noundef @.str.4) #8, !dbg !132
  store ptr %call12, ptr %token, align 8, !dbg !131
  br label %while.cond, !dbg !133

while.cond:                                       ; preds = %if.end31, %if.end
  %7 = load ptr, ptr %token, align 8, !dbg !134
  %cmp = icmp ne ptr %7, null, !dbg !135
  br i1 %cmp, label %while.body, label %while.end, !dbg !133

while.body:                                       ; preds = %while.cond
  %8 = load ptr, ptr %next_keyword, align 8, !dbg !136
  %9 = load ptr, ptr %token, align 8, !dbg !138
  %call13 = call ptr @strcpy(ptr noundef %8, ptr noundef %9) #8, !dbg !139
  store ptr null, ptr %value, align 8, !dbg !140
  %10 = load ptr, ptr %next_keyword, align 8, !dbg !141
  %call14 = call ptr @strchr(ptr noundef %10, i32 noundef 61) #6, !dbg !143
  store ptr %call14, ptr %equals, align 8, !dbg !144
  %cmp15 = icmp ne ptr %call14, null, !dbg !145
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !145

if.then16:                                        ; preds = %while.body
  %11 = load ptr, ptr %equals, align 8, !dbg !146
  store i8 0, ptr %11, align 1, !dbg !148
  %12 = load ptr, ptr %equals, align 8, !dbg !149
  %add.ptr = getelementptr inbounds i8, ptr %12, i64 1, !dbg !150
  store ptr %add.ptr, ptr %value, align 8, !dbg !151
  br label %if.end17, !dbg !152

if.end17:                                         ; preds = %if.then16, %while.body
  %13 = load ptr, ptr %value, align 8, !dbg !153
  %tobool18 = icmp ne ptr %13, null, !dbg !153
  br i1 %tobool18, label %land.lhs.true, label %if.end31, !dbg !155

land.lhs.true:                                    ; preds = %if.end17
  %14 = load ptr, ptr %next_keyword, align 8, !dbg !156
  %call19 = call i32 @parse_opt_token(ptr noundef %14), !dbg !157
  %cmp20 = icmp eq i32 %call19, 6, !dbg !158
  br i1 %cmp20, label %if.then21, label %if.end31, !dbg !155

if.then21:                                        ; preds = %land.lhs.true
  %15 = load ptr, ptr %value, align 8, !dbg !159
  %call22 = call i64 @strnlen(ptr noundef %15, i64 noundef 46) #6, !dbg !162
  %cmp23 = icmp ule i64 %call22, 46, !dbg !163
  br i1 %cmp23, label %if.then24, label %if.end30, !dbg !163

if.then24:                                        ; preds = %if.then21
  %16 = load ptr, ptr %parsed_info.addr, align 8, !dbg !164
  %addrlist = getelementptr inbounds nuw %struct.parsed_mount_info, ptr %16, i32 0, i32 0, !dbg !166
  %arraydecay = getelementptr inbounds [45 x i8], ptr %addrlist, i64 0, i64 0, !dbg !164
  %17 = load ptr, ptr %value, align 8, !dbg !167
  %call25 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %17) #8, !dbg !168
  %18 = load ptr, ptr %parsed_info.addr, align 8, !dbg !169
  %verboseflag = getelementptr inbounds nuw %struct.parsed_mount_info, ptr %18, i32 0, i32 1, !dbg !171
  %bf.load = load i8, ptr %verboseflag, align 1, !dbg !171
  %bf.clear = and i8 %bf.load, 1, !dbg !171
  %bf.cast = zext i8 %bf.clear to i32, !dbg !171
  %tobool26 = icmp ne i32 %bf.cast, 0, !dbg !169
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !169

if.then27:                                        ; preds = %if.then24
  %19 = load ptr, ptr @stderr, align 8, !dbg !172
  %20 = load ptr, ptr %value, align 8, !dbg !173
  %call28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef @.str.5, ptr noundef %20) #8, !dbg !174
  br label %if.end29, !dbg !174

if.end29:                                         ; preds = %if.then27, %if.then24
  br label %if.end30, !dbg !175

if.end30:                                         ; preds = %if.end29, %if.then21
  br label %if.end31, !dbg !176

if.end31:                                         ; preds = %if.end30, %land.lhs.true, %if.end17
  %call32 = call ptr @strtok(ptr noundef null, ptr noundef @.str.4) #8, !dbg !177
  store ptr %call32, ptr %token, align 8, !dbg !178
  br label %while.cond, !dbg !133, !llvm.loop !179

while.end:                                        ; preds = %while.cond
  store i32 0, ptr %retval, align 4, !dbg !182
  %21 = load ptr, ptr %saved_stack, align 8, !dbg !183
  call void @llvm.stackrestore.p0(ptr %21), !dbg !183
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i32, ptr %retval, align 4, !dbg !183
  ret i32 %22, !dbg !183
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #4

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #5

; Function Attrs: nounwind
declare ptr @strtok(ptr noundef, ptr noundef) #5

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strchr(ptr noundef, i32 noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strnlen(ptr noundef, i64 noundef) #2

; Function Attrs: nounwind
declare i32 @fprintf(ptr noundef, ptr noundef, ...) #5

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore.p0(ptr) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !184 {
entry:
  %parsed_info = alloca %struct.parsed_mount_info, align 4
    #dbg_declare(ptr %parsed_info, !187, !DIExpression(), !188)
  %call = call i32 @parse_options(ptr noundef @.str.6, ptr noundef %parsed_info), !dbg !189
  ret i32 0, !dbg !190
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind willreturn }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind willreturn memory(read) }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!37}
!llvm.module.flags = !{!42, !43, !44, !45, !46, !47, !48}
!llvm.ident = !{!49}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-27239-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "87345d07ce6c01618dd80423f5b6b0b5")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 224, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 28)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 31, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 24, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 3)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 31, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 40, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 5)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 48, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 200, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 25)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(scope: null, file: !2, line: 49, type: !24, isLocal: true, isDefinition: true)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 2)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !2, line: 66, type: !29, isLocal: true, isDefinition: true)
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 272, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 34)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(scope: null, file: !2, line: 78, type: !34, isLocal: true, isDefinition: true)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 592, elements: !35)
!35 = !{!36}
!36 = !DISubrange(count: 74)
!37 = distinct !DICompileUnit(language: DW_LANG_C11, file: !38, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !39, globals: !41, splitDebugInlining: false, nameTableKind: None)
!38 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-27239-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "87345d07ce6c01618dd80423f5b6b0b5")
!39 = !{!40}
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!41 = !{!0, !7, !12, !17, !22, !27, !32}
!42 = !{i32 7, !"Dwarf Version", i32 5}
!43 = !{i32 2, !"Debug Info Version", i32 3}
!44 = !{i32 1, !"wchar_size", i32 4}
!45 = !{i32 8, !"PIC Level", i32 2}
!46 = !{i32 7, !"PIE Level", i32 2}
!47 = !{i32 7, !"uwtable", i32 2}
!48 = !{i32 7, !"frame-pointer", i32 2}
!49 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!50 = distinct !DISubprogram(name: "parse_opt_token", scope: !2, file: !2, line: 22, type: !51, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !56)
!51 = !DISubroutineType(types: !52)
!52 = !{!53, !54}
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!56 = !{}
!57 = !DILocalVariable(name: "token", arg: 1, scope: !50, file: !2, line: 22, type: !54)
!58 = !DILocation(line: 22, column: 33, scope: !50)
!59 = !DILocation(line: 23, column: 44, scope: !50)
!60 = !DILocation(line: 23, column: 5, scope: !50)
!61 = !DILocation(line: 24, column: 6, scope: !62)
!62 = distinct !DILexicalBlock(scope: !50, file: !2, line: 24, column: 6)
!63 = !DILocation(line: 24, column: 12, scope: !62)
!64 = !DILocation(line: 25, column: 3, scope: !62)
!65 = !DILocation(line: 31, column: 13, scope: !66)
!66 = distinct !DILexicalBlock(scope: !50, file: !2, line: 31, column: 6)
!67 = !DILocation(line: 31, column: 6, scope: !66)
!68 = !DILocation(line: 31, column: 26, scope: !66)
!69 = !DILocation(line: 31, column: 31, scope: !66)
!70 = !DILocation(line: 31, column: 41, scope: !66)
!71 = !DILocation(line: 31, column: 34, scope: !66)
!72 = !DILocation(line: 31, column: 56, scope: !66)
!73 = !DILocation(line: 32, column: 3, scope: !66)
!74 = !DILocation(line: 34, column: 2, scope: !50)
!75 = !DILocation(line: 35, column: 1, scope: !50)
!76 = distinct !DISubprogram(name: "parse_options", scope: !2, file: !2, line: 38, type: !77, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !56)
!77 = !DISubroutineType(types: !78)
!78 = !{!53, !54, !79}
!79 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!80 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "parsed_mount_info", file: !2, line: 17, size: 384, elements: !81)
!81 = !{!82, !86}
!82 = !DIDerivedType(tag: DW_TAG_member, name: "addrlist", scope: !80, file: !2, line: 18, baseType: !83, size: 360)
!83 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 360, elements: !84)
!84 = !{!85}
!85 = !DISubrange(count: 45)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "verboseflag", scope: !80, file: !2, line: 19, baseType: !87, size: 1, offset: 360, flags: DIFlagBitField, extraData: i64 360)
!87 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!88 = !DILocalVariable(name: "data", arg: 1, scope: !76, file: !2, line: 38, type: !54)
!89 = !DILocation(line: 38, column: 31, scope: !76)
!90 = !DILocalVariable(name: "parsed_info", arg: 2, scope: !76, file: !2, line: 38, type: !79)
!91 = !DILocation(line: 38, column: 63, scope: !76)
!92 = !DILocalVariable(name: "value", scope: !76, file: !2, line: 39, type: !93)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!94 = !DILocation(line: 39, column: 8, scope: !76)
!95 = !DILocation(line: 39, column: 30, scope: !76)
!96 = !DILocation(line: 39, column: 23, scope: !76)
!97 = !DILocation(line: 39, column: 36, scope: !76)
!98 = !DILocation(line: 39, column: 16, scope: !76)
!99 = !DILocalVariable(name: "equals", scope: !76, file: !2, line: 40, type: !93)
!100 = !DILocation(line: 40, column: 8, scope: !76)
!101 = !DILocation(line: 40, column: 31, scope: !76)
!102 = !DILocation(line: 40, column: 24, scope: !76)
!103 = !DILocation(line: 40, column: 37, scope: !76)
!104 = !DILocation(line: 40, column: 17, scope: !76)
!105 = !DILocalVariable(name: "next_keyword", scope: !76, file: !2, line: 41, type: !93)
!106 = !DILocation(line: 41, column: 8, scope: !76)
!107 = !DILocation(line: 41, column: 37, scope: !76)
!108 = !DILocation(line: 41, column: 30, scope: !76)
!109 = !DILocation(line: 41, column: 43, scope: !76)
!110 = !DILocation(line: 41, column: 23, scope: !76)
!111 = !DILocation(line: 43, column: 7, scope: !112)
!112 = distinct !DILexicalBlock(scope: !76, file: !2, line: 43, column: 6)
!113 = !DILocation(line: 43, column: 6, scope: !112)
!114 = !DILocation(line: 44, column: 3, scope: !112)
!115 = !DILocation(line: 46, column: 24, scope: !76)
!116 = !DILocation(line: 46, column: 17, scope: !76)
!117 = !DILocation(line: 46, column: 30, scope: !76)
!118 = !DILocation(line: 46, column: 5, scope: !76)
!119 = !DILocalVariable(name: "__vla_expr0", scope: !76, type: !120, flags: DIFlagArtificial)
!120 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!121 = !DILocation(line: 0, scope: !76)
!122 = !DILocalVariable(name: "buffer", scope: !76, file: !2, line: 46, type: !123)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, elements: !124)
!124 = !{!125}
!125 = !DISubrange(count: !119)
!126 = !DILocation(line: 46, column: 10, scope: !76)
!127 = !DILocation(line: 47, column: 20, scope: !76)
!128 = !DILocation(line: 47, column: 5, scope: !76)
!129 = !DILocation(line: 48, column: 5, scope: !76)
!130 = !DILocalVariable(name: "token", scope: !76, file: !2, line: 49, type: !93)
!131 = !DILocation(line: 49, column: 11, scope: !76)
!132 = !DILocation(line: 49, column: 19, scope: !76)
!133 = !DILocation(line: 50, column: 5, scope: !76)
!134 = !DILocation(line: 50, column: 11, scope: !76)
!135 = !DILocation(line: 50, column: 17, scope: !76)
!136 = !DILocation(line: 51, column: 16, scope: !137)
!137 = distinct !DILexicalBlock(scope: !76, file: !2, line: 50, column: 26)
!138 = !DILocation(line: 51, column: 30, scope: !137)
!139 = !DILocation(line: 51, column: 9, scope: !137)
!140 = !DILocation(line: 54, column: 15, scope: !137)
!141 = !DILocation(line: 55, column: 24, scope: !142)
!142 = distinct !DILexicalBlock(scope: !137, file: !2, line: 55, column: 7)
!143 = !DILocation(line: 55, column: 17, scope: !142)
!144 = !DILocation(line: 55, column: 15, scope: !142)
!145 = !DILocation(line: 55, column: 44, scope: !142)
!146 = !DILocation(line: 56, column: 5, scope: !147)
!147 = distinct !DILexicalBlock(scope: !142, file: !2, line: 55, column: 53)
!148 = !DILocation(line: 56, column: 12, scope: !147)
!149 = !DILocation(line: 57, column: 12, scope: !147)
!150 = !DILocation(line: 57, column: 19, scope: !147)
!151 = !DILocation(line: 57, column: 10, scope: !147)
!152 = !DILocation(line: 58, column: 3, scope: !147)
!153 = !DILocation(line: 60, column: 12, scope: !154)
!154 = distinct !DILexicalBlock(scope: !137, file: !2, line: 60, column: 12)
!155 = !DILocation(line: 60, column: 18, scope: !154)
!156 = !DILocation(line: 60, column: 37, scope: !154)
!157 = !DILocation(line: 60, column: 21, scope: !154)
!158 = !DILocation(line: 60, column: 51, scope: !154)
!159 = !DILocation(line: 61, column: 16, scope: !160)
!160 = distinct !DILexicalBlock(scope: !161, file: !2, line: 61, column: 8)
!161 = distinct !DILexicalBlock(scope: !154, file: !2, line: 60, column: 62)
!162 = !DILocation(line: 61, column: 8, scope: !160)
!163 = !DILocation(line: 61, column: 40, scope: !160)
!164 = !DILocation(line: 64, column: 12, scope: !165)
!165 = distinct !DILexicalBlock(scope: !160, file: !2, line: 61, column: 60)
!166 = !DILocation(line: 64, column: 25, scope: !165)
!167 = !DILocation(line: 64, column: 35, scope: !165)
!168 = !DILocation(line: 64, column: 5, scope: !165)
!169 = !DILocation(line: 65, column: 9, scope: !170)
!170 = distinct !DILexicalBlock(scope: !165, file: !2, line: 65, column: 9)
!171 = !DILocation(line: 65, column: 22, scope: !170)
!172 = !DILocation(line: 66, column: 14, scope: !170)
!173 = !DILocation(line: 66, column: 60, scope: !170)
!174 = !DILocation(line: 66, column: 6, scope: !170)
!175 = !DILocation(line: 67, column: 4, scope: !165)
!176 = !DILocation(line: 68, column: 3, scope: !161)
!177 = !DILocation(line: 70, column: 17, scope: !137)
!178 = !DILocation(line: 70, column: 15, scope: !137)
!179 = distinct !{!179, !133, !180, !181}
!180 = !DILocation(line: 71, column: 5, scope: !76)
!181 = !{!"llvm.loop.mustprogress"}
!182 = !DILocation(line: 73, column: 2, scope: !76)
!183 = !DILocation(line: 74, column: 1, scope: !76)
!184 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 76, type: !185, scopeLine: 76, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !56)
!185 = !DISubroutineType(types: !186)
!186 = !{!53}
!187 = !DILocalVariable(name: "parsed_info", scope: !184, file: !2, line: 77, type: !80)
!188 = !DILocation(line: 77, column: 30, scope: !184)
!189 = !DILocation(line: 78, column: 5, scope: !184)
!190 = !DILocation(line: 79, column: 1, scope: !184)
