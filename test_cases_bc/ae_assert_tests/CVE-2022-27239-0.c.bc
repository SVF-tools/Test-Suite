; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-27239-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-27239-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.parsed_mount_info = type { [45 x i8], i8, [2 x i8] }

@.str = private unnamed_addr constant [28 x i8] c"parse opt token, token: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"ip\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"addr\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"parse option, buffer:%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1
@stderr = external global ptr, align 8
@.str.5 = private unnamed_addr constant [34 x i8] c"ip address %s override specified\0A\00", align 1
@.str.6 = private unnamed_addr constant [74 x i8] c"keyword,ip=VapodinGmVAFzAbsPWGkWdPQI2gozcQulsHW1hJRsyVlaZ,keyword3=value3\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_opt_token(ptr noundef %token) #0 {
entry:
  %retval = alloca i32, align 4
  %token.addr = alloca ptr, align 8
  store ptr %token, ptr %token.addr, align 8
  %0 = load ptr, ptr %token.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %0)
  %1 = load ptr, ptr %token.addr, align 8
  %cmp = icmp eq ptr %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %token.addr, align 8
  %call1 = call i32 @strcmp(ptr noundef %2, ptr noundef @.str.1) #6
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load ptr, ptr %token.addr, align 8
  %call3 = call i32 @strcmp(ptr noundef %3, ptr noundef @.str.2) #6
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 6, ptr %retval, align 4
  br label %return

if.end6:                                          ; preds = %lor.lhs.false
  store i32 -1, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %4 = load i32, ptr %retval, align 4
  ret i32 %4
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcmp(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_options(ptr noundef %data, ptr noundef %parsed_info) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca ptr, align 8
  %parsed_info.addr = alloca ptr, align 8
  %value = alloca ptr, align 8
  %equals = alloca ptr, align 8
  %next_keyword = alloca ptr, align 8
  %saved_stack = alloca ptr, align 8
  %__vla_expr0 = alloca i64, align 8
  %token = alloca ptr, align 8
  store ptr %data, ptr %data.addr, align 8
  store ptr %parsed_info, ptr %parsed_info.addr, align 8
  %0 = load ptr, ptr %data.addr, align 8
  %call = call i64 @strlen(ptr noundef %0) #6
  %add = add i64 %call, 1
  %call1 = call noalias ptr @malloc(i64 noundef %add) #7
  store ptr %call1, ptr %value, align 8
  %1 = load ptr, ptr %data.addr, align 8
  %call2 = call i64 @strlen(ptr noundef %1) #6
  %add3 = add i64 %call2, 1
  %call4 = call noalias ptr @malloc(i64 noundef %add3) #7
  store ptr %call4, ptr %equals, align 8
  %2 = load ptr, ptr %data.addr, align 8
  %call5 = call i64 @strlen(ptr noundef %2) #6
  %add6 = add i64 %call5, 1
  %call7 = call noalias ptr @malloc(i64 noundef %add6) #7
  store ptr %call7, ptr %next_keyword, align 8
  %3 = load ptr, ptr %data.addr, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %data.addr, align 8
  %call8 = call i64 @strlen(ptr noundef %4) #6
  %add9 = add i64 %call8, 1
  %5 = call ptr @llvm.stacksave()
  store ptr %5, ptr %saved_stack, align 8
  %vla = alloca i8, i64 %add9, align 16
  store i64 %add9, ptr %__vla_expr0, align 8
  %6 = load ptr, ptr %data.addr, align 8
  %call10 = call ptr @strcpy(ptr noundef %vla, ptr noundef %6) #8
  %call11 = call i32 (ptr, ...) @printf(ptr noundef @.str.3, ptr noundef %vla)
  %call12 = call ptr @strtok(ptr noundef %vla, ptr noundef @.str.4) #8
  store ptr %call12, ptr %token, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end31, %if.end
  %7 = load ptr, ptr %token, align 8
  %cmp = icmp ne ptr %7, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load ptr, ptr %next_keyword, align 8
  %9 = load ptr, ptr %token, align 8
  %call13 = call ptr @strcpy(ptr noundef %8, ptr noundef %9) #8
  store ptr null, ptr %value, align 8
  %10 = load ptr, ptr %next_keyword, align 8
  %call14 = call ptr @strchr(ptr noundef %10, i32 noundef 61) #6
  store ptr %call14, ptr %equals, align 8
  %cmp15 = icmp ne ptr %call14, null
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %while.body
  %11 = load ptr, ptr %equals, align 8
  store i8 0, ptr %11, align 1
  %12 = load ptr, ptr %equals, align 8
  %add.ptr = getelementptr inbounds i8, ptr %12, i64 1
  store ptr %add.ptr, ptr %value, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %while.body
  %13 = load ptr, ptr %value, align 8
  %tobool18 = icmp ne ptr %13, null
  br i1 %tobool18, label %land.lhs.true, label %if.end31

land.lhs.true:                                    ; preds = %if.end17
  %14 = load ptr, ptr %next_keyword, align 8
  %call19 = call i32 @parse_opt_token(ptr noundef %14)
  %cmp20 = icmp eq i32 %call19, 6
  br i1 %cmp20, label %if.then21, label %if.end31

if.then21:                                        ; preds = %land.lhs.true
  %15 = load ptr, ptr %value, align 8
  %call22 = call i64 @strnlen(ptr noundef %15, i64 noundef 46) #6
  %cmp23 = icmp ule i64 %call22, 46
  br i1 %cmp23, label %if.then24, label %if.end30

if.then24:                                        ; preds = %if.then21
  %16 = load ptr, ptr %parsed_info.addr, align 8
  %addrlist = getelementptr inbounds %struct.parsed_mount_info, ptr %16, i32 0, i32 0
  %arraydecay = getelementptr inbounds [45 x i8], ptr %addrlist, i64 0, i64 0
  %17 = load ptr, ptr %value, align 8
  %call25 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %17) #8
  %18 = load ptr, ptr %parsed_info.addr, align 8
  %verboseflag = getelementptr inbounds %struct.parsed_mount_info, ptr %18, i32 0, i32 1
  %bf.load = load i8, ptr %verboseflag, align 1
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool26 = icmp ne i32 %bf.cast, 0
  br i1 %tobool26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.then24
  %19 = load ptr, ptr @stderr, align 8
  %20 = load ptr, ptr %value, align 8
  %call28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef @.str.5, ptr noundef %20)
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.then24
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then21
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %land.lhs.true, %if.end17
  %call32 = call ptr @strtok(ptr noundef null, ptr noundef @.str.4) #8
  store ptr %call32, ptr %token, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %while.cond
  store i32 0, ptr %retval, align 4
  %21 = load ptr, ptr %saved_stack, align 8
  call void @llvm.stackrestore(ptr %21)
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i32, ptr %retval, align 4
  ret i32 %22
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #3

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #4

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #5

; Function Attrs: nounwind
declare ptr @strtok(ptr noundef, ptr noundef) #5

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strchr(ptr noundef, i32 noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strnlen(ptr noundef, i64 noundef) #2

declare i32 @fprintf(ptr noundef, ptr noundef, ...) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %parsed_info = alloca %struct.parsed_mount_info, align 4
  %call = call i32 @parse_options(ptr noundef @.str.6, ptr noundef %parsed_info)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind willreturn }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind willreturn memory(read) }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
