; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-26129-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-26129-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @parse_update_subtlv(ptr noundef %a, i32 noundef %alen) #0 {
entry:
  %a.addr = alloca ptr, align 8
  %alen.addr = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  store ptr %a, ptr %a.addr, align 8
  store i32 %alen, ptr %alen.addr, align 4
  store i32 0, ptr %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %entry
  %0 = load i32, ptr %i, align 4
  %1 = load i32, ptr %alen.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load ptr, ptr %a.addr, align 8
  %3 = load i32, ptr %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 %idxprom
  %4 = load i8, ptr %arrayidx, align 1
  %conv = zext i8 %4 to i32
  store i32 %conv, ptr %type, align 4
  %5 = load i32, ptr %i, align 4
  %add = add nsw i32 %5, 1
  %6 = load i32, ptr %alen.addr, align 4
  %cmp1 = icmp sgt i32 %add, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %7 = load ptr, ptr %a.addr, align 8
  %8 = load i32, ptr %i, align 4
  %add3 = add nsw i32 %8, 1
  %idxprom4 = sext i32 %add3 to i64
  %arrayidx5 = getelementptr inbounds i8, ptr %7, i64 %idxprom4
  %9 = load i8, ptr %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  store i32 %conv6, ptr %len, align 4
  %10 = load i32, ptr %i, align 4
  %11 = load i32, ptr %len, align 4
  %add7 = add nsw i32 %10, %11
  %add8 = add nsw i32 %add7, 2
  %12 = load i32, ptr %alen.addr, align 4
  %cmp9 = icmp sgt i32 %add8, %12
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  br label %while.end

if.end12:                                         ; preds = %if.end
  %13 = load i32, ptr %len, align 4
  %add13 = add nsw i32 %13, 2
  %14 = load i32, ptr %i, align 4
  %add14 = add nsw i32 %14, %add13
  store i32 %add14, ptr %i, align 4
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %if.then11, %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %a = alloca [5 x i8], align 1
  call void @llvm.memset.p0.i64(ptr align 1 %a, i8 0, i64 5, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8], ptr %a, i64 0, i64 0
  call void @parse_update_subtlv(ptr noundef %arraydecay, i32 noundef 5)
  ret i32 0
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
