; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-26129-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-26129-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @parse_update_subtlv(ptr noundef %a, i32 noundef %alen) #0 !dbg !10 {
entry:
  %a.addr = alloca ptr, align 8
  %alen.addr = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  store ptr %a, ptr %a.addr, align 8
    #dbg_declare(ptr %a.addr, !19, !DIExpression(), !20)
  store i32 %alen, ptr %alen.addr, align 4
    #dbg_declare(ptr %alen.addr, !21, !DIExpression(), !22)
    #dbg_declare(ptr %type, !23, !DIExpression(), !24)
    #dbg_declare(ptr %len, !25, !DIExpression(), !26)
    #dbg_declare(ptr %i, !27, !DIExpression(), !28)
  store i32 0, ptr %i, align 4, !dbg !28
  br label %while.cond, !dbg !29

while.cond:                                       ; preds = %if.end12, %entry
  %0 = load i32, ptr %i, align 4, !dbg !30
  %1 = load i32, ptr %alen.addr, align 4, !dbg !31
  %cmp = icmp slt i32 %0, %1, !dbg !32
  br i1 %cmp, label %while.body, label %while.end, !dbg !29

while.body:                                       ; preds = %while.cond
  %2 = load ptr, ptr %a.addr, align 8, !dbg !33
  %3 = load i32, ptr %i, align 4, !dbg !35
  %idxprom = sext i32 %3 to i64, !dbg !33
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 %idxprom, !dbg !33
  %4 = load i8, ptr %arrayidx, align 1, !dbg !33
  %conv = zext i8 %4 to i32, !dbg !33
  store i32 %conv, ptr %type, align 4, !dbg !36
  %5 = load i32, ptr %i, align 4, !dbg !37
  %add = add nsw i32 %5, 1, !dbg !39
  %6 = load i32, ptr %alen.addr, align 4, !dbg !40
  %cmp1 = icmp sgt i32 %add, %6, !dbg !41
  br i1 %cmp1, label %if.then, label %if.end, !dbg !41

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !42

if.end:                                           ; preds = %while.body
  %7 = load ptr, ptr %a.addr, align 8, !dbg !44
  %8 = load i32, ptr %i, align 4, !dbg !45
  %add3 = add nsw i32 %8, 1, !dbg !46
  %idxprom4 = sext i32 %add3 to i64, !dbg !44
  %arrayidx5 = getelementptr inbounds i8, ptr %7, i64 %idxprom4, !dbg !44
  %9 = load i8, ptr %arrayidx5, align 1, !dbg !44
  %conv6 = zext i8 %9 to i32, !dbg !44
  store i32 %conv6, ptr %len, align 4, !dbg !47
  %10 = load i32, ptr %i, align 4, !dbg !48
  %11 = load i32, ptr %len, align 4, !dbg !50
  %add7 = add nsw i32 %10, %11, !dbg !51
  %add8 = add nsw i32 %add7, 2, !dbg !52
  %12 = load i32, ptr %alen.addr, align 4, !dbg !53
  %cmp9 = icmp sgt i32 %add8, %12, !dbg !54
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !54

if.then11:                                        ; preds = %if.end
  br label %while.end, !dbg !55

if.end12:                                         ; preds = %if.end
  %13 = load i32, ptr %len, align 4, !dbg !57
  %add13 = add nsw i32 %13, 2, !dbg !58
  %14 = load i32, ptr %i, align 4, !dbg !59
  %add14 = add nsw i32 %14, %add13, !dbg !59
  store i32 %add14, ptr %i, align 4, !dbg !59
  br label %while.cond, !dbg !29, !llvm.loop !60

while.end:                                        ; preds = %if.then11, %if.then, %while.cond
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !64 {
entry:
  %a = alloca [5 x i8], align 1
    #dbg_declare(ptr %a, !67, !DIExpression(), !72)
  call void @llvm.memset.p0.i64(ptr align 1 %a, i8 0, i64 5, i1 false), !dbg !72
  %arraydecay = getelementptr inbounds [5 x i8], ptr %a, i64 0, i64 0, !dbg !73
  call void @parse_update_subtlv(ptr noundef %arraydecay, i32 noundef 5), !dbg !74
  ret i32 0, !dbg !75
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2022-26129-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "091485ed47a5f4d546d534edec4061b3")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!10 = distinct !DISubprogram(name: "parse_update_subtlv", scope: !11, file: !11, line: 9, type: !12, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!11 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-26129-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "091485ed47a5f4d546d534edec4061b3")
!12 = !DISubroutineType(types: !13)
!13 = !{null, !14, !17}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!17 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!18 = !{}
!19 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !11, line: 9, type: !14)
!20 = !DILocation(line: 9, column: 47, scope: !10)
!21 = !DILocalVariable(name: "alen", arg: 2, scope: !10, file: !11, line: 9, type: !17)
!22 = !DILocation(line: 9, column: 54, scope: !10)
!23 = !DILocalVariable(name: "type", scope: !10, file: !11, line: 10, type: !17)
!24 = !DILocation(line: 10, column: 9, scope: !10)
!25 = !DILocalVariable(name: "len", scope: !10, file: !11, line: 10, type: !17)
!26 = !DILocation(line: 10, column: 15, scope: !10)
!27 = !DILocalVariable(name: "i", scope: !10, file: !11, line: 10, type: !17)
!28 = !DILocation(line: 10, column: 20, scope: !10)
!29 = !DILocation(line: 12, column: 5, scope: !10)
!30 = !DILocation(line: 12, column: 11, scope: !10)
!31 = !DILocation(line: 12, column: 15, scope: !10)
!32 = !DILocation(line: 12, column: 13, scope: !10)
!33 = !DILocation(line: 13, column: 16, scope: !34)
!34 = distinct !DILexicalBlock(scope: !10, file: !11, line: 12, column: 21)
!35 = !DILocation(line: 13, column: 18, scope: !34)
!36 = !DILocation(line: 13, column: 14, scope: !34)
!37 = !DILocation(line: 15, column: 12, scope: !38)
!38 = distinct !DILexicalBlock(scope: !34, file: !11, line: 15, column: 12)
!39 = !DILocation(line: 15, column: 14, scope: !38)
!40 = !DILocation(line: 15, column: 20, scope: !38)
!41 = !DILocation(line: 15, column: 18, scope: !38)
!42 = !DILocation(line: 16, column: 13, scope: !43)
!43 = distinct !DILexicalBlock(scope: !38, file: !11, line: 15, column: 26)
!44 = !DILocation(line: 20, column: 15, scope: !34)
!45 = !DILocation(line: 20, column: 17, scope: !34)
!46 = !DILocation(line: 20, column: 19, scope: !34)
!47 = !DILocation(line: 20, column: 13, scope: !34)
!48 = !DILocation(line: 22, column: 6, scope: !49)
!49 = distinct !DILexicalBlock(scope: !34, file: !11, line: 22, column: 6)
!50 = !DILocation(line: 22, column: 10, scope: !49)
!51 = !DILocation(line: 22, column: 8, scope: !49)
!52 = !DILocation(line: 22, column: 14, scope: !49)
!53 = !DILocation(line: 22, column: 20, scope: !49)
!54 = !DILocation(line: 22, column: 18, scope: !49)
!55 = !DILocation(line: 23, column: 13, scope: !56)
!56 = distinct !DILexicalBlock(scope: !49, file: !11, line: 22, column: 26)
!57 = !DILocation(line: 26, column: 8, scope: !34)
!58 = !DILocation(line: 26, column: 12, scope: !34)
!59 = !DILocation(line: 26, column: 5, scope: !34)
!60 = distinct !{!60, !29, !61, !62}
!61 = !DILocation(line: 27, column: 2, scope: !10)
!62 = !{!"llvm.loop.mustprogress"}
!63 = !DILocation(line: 28, column: 1, scope: !10)
!64 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 30, type: !65, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!65 = !DISubroutineType(types: !66)
!66 = !{!17}
!67 = !DILocalVariable(name: "a", scope: !64, file: !11, line: 31, type: !68)
!68 = !DICompositeType(tag: DW_TAG_array_type, baseType: !69, size: 40, elements: !70)
!69 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!70 = !{!71}
!71 = !DISubrange(count: 5)
!72 = !DILocation(line: 31, column: 7, scope: !64)
!73 = !DILocation(line: 32, column: 22, scope: !64)
!74 = !DILocation(line: 32, column: 2, scope: !64)
!75 = !DILocation(line: 33, column: 1, scope: !64)
