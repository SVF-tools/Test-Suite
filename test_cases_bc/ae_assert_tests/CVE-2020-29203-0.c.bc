; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2020-29203-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2020-29203-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cJSON = type { ptr, ptr, ptr }
%struct.Hometown = type { [8 x i8] }

@.str = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.1 = private unnamed_addr constant [79 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @cJSON_CreateString(ptr noundef %string) #0 {
entry:
  %string.addr = alloca ptr, align 8
  %item = alloca ptr, align 8
  store ptr %string, ptr %string.addr, align 8
  %call = call noalias ptr @malloc(i64 noundef 24) #6
  store ptr %call, ptr %item, align 8
  %0 = load ptr, ptr %string.addr, align 8
  %call1 = call ptr @cJSON_strdup(ptr noundef %0)
  %1 = load ptr, ptr %item, align 8
  %valuestring = getelementptr inbounds %struct.cJSON, ptr %1, i32 0, i32 1
  store ptr %call1, ptr %valuestring, align 8
  %2 = load ptr, ptr %item, align 8
  ret ptr %2
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @cJSON_strdup(ptr noundef %str) #0 {
entry:
  %str.addr = alloca ptr, align 8
  %len = alloca i64, align 8
  %copy = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i64 @strlen(ptr noundef %0) #7
  %add = add i64 %call, 1
  store i64 %add, ptr %len, align 8
  %1 = load i64, ptr %len, align 8
  %call1 = call noalias ptr @malloc(i64 noundef %1) #6
  store ptr %call1, ptr %copy, align 8
  %2 = load ptr, ptr %copy, align 8
  %3 = load ptr, ptr %str.addr, align 8
  %4 = load i64, ptr %len, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr align 1 %3, i64 %4, i1 false)
  %5 = load ptr, ptr %copy, align 8
  ret ptr %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToArray(ptr noundef %array, ptr noundef %item) #0 {
entry:
  %array.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %c = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
  store ptr %item, ptr %item.addr, align 8
  %0 = load ptr, ptr %array.addr, align 8
  %child = getelementptr inbounds %struct.cJSON, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %child, align 8
  store ptr %1, ptr %c, align 8
  %2 = load ptr, ptr %c, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %item.addr, align 8
  %4 = load ptr, ptr %array.addr, align 8
  %child1 = getelementptr inbounds %struct.cJSON, ptr %4, i32 0, i32 0
  store ptr %3, ptr %child1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToObject(ptr noundef %object, ptr noundef %string, ptr noundef %item) #0 {
entry:
  %object.addr = alloca ptr, align 8
  %string.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  store ptr %object, ptr %object.addr, align 8
  store ptr %string, ptr %string.addr, align 8
  store ptr %item, ptr %item.addr, align 8
  %0 = load ptr, ptr %string.addr, align 8
  %call = call ptr @cJSON_strdup(ptr noundef %0)
  %1 = load ptr, ptr %item.addr, align 8
  %string1 = getelementptr inbounds %struct.cJSON, ptr %1, i32 0, i32 2
  store ptr %call, ptr %string1, align 8
  %2 = load ptr, ptr %object.addr, align 8
  %3 = load ptr, ptr %item.addr, align 8
  call void @cJSON_AddItemToArray(ptr noundef %2, ptr noundef %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %json = alloca ptr, align 8
  %test = alloca ptr, align 8
  %call = call noalias ptr @malloc(i64 noundef 24) #6
  store ptr %call, ptr %json, align 8
  %0 = load ptr, ptr %json, align 8
  %call1 = call ptr @cJSON_CreateString(ptr noundef @.str.1)
  call void @cJSON_AddItemToObject(ptr noundef %0, ptr noundef @.str, ptr noundef %call1)
  %1 = load ptr, ptr %json, align 8
  %call2 = call ptr @json_to_struct(ptr noundef %1)
  store ptr %call2, ptr %test, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @json_to_struct(ptr noundef %json_obj) #0 {
entry:
  %json_obj.addr = alloca ptr, align 8
  %json_temp = alloca ptr, align 8
  %struct_hometown = alloca ptr, align 8
  store ptr %json_obj, ptr %json_obj.addr, align 8
  %call = call noalias ptr @malloc(i64 noundef 8) #6
  store ptr %call, ptr %struct_hometown, align 8
  %0 = load ptr, ptr %struct_hometown, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %struct_hometown, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 0, i64 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load ptr, ptr %json_obj.addr, align 8
  %child = getelementptr inbounds %struct.cJSON, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %child, align 8
  store ptr %3, ptr %json_temp, align 8
  %4 = load ptr, ptr %json_temp, align 8
  %tobool1 = icmp ne ptr %4, null
  br i1 %tobool1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load ptr, ptr %struct_hometown, align 8
  %name = getelementptr inbounds %struct.Hometown, ptr %5, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], ptr %name, i64 0, i64 0
  %6 = load ptr, ptr %json_temp, align 8
  %valuestring = getelementptr inbounds %struct.cJSON, ptr %6, i32 0, i32 1
  %7 = load ptr, ptr %valuestring, align 8
  %call3 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %7) #8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load ptr, ptr %struct_hometown, align 8
  ret ptr %8
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #5

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind willreturn memory(read) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
