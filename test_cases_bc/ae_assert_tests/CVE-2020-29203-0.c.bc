; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2020-29203-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2020-29203-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.cJSON = type { ptr, ptr, ptr }
%struct.Hometown = type { [8 x i8] }

@.str = private unnamed_addr constant [5 x i8] c"name\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [79 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 1, !dbg !7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @cJSON_CreateString(ptr noundef %string) #0 !dbg !33 {
entry:
  %string.addr = alloca ptr, align 8
  %item = alloca ptr, align 8
  store ptr %string, ptr %string.addr, align 8
    #dbg_declare(ptr %string.addr, !39, !DIExpression(), !40)
    #dbg_declare(ptr %item, !41, !DIExpression(), !42)
  %call = call noalias ptr @malloc(i64 noundef 24) #6, !dbg !43
  store ptr %call, ptr %item, align 8, !dbg !42
  %0 = load ptr, ptr %string.addr, align 8, !dbg !44
  %call1 = call ptr @cJSON_strdup(ptr noundef %0), !dbg !45
  %1 = load ptr, ptr %item, align 8, !dbg !46
  %valuestring = getelementptr inbounds nuw %struct.cJSON, ptr %1, i32 0, i32 1, !dbg !47
  store ptr %call1, ptr %valuestring, align 8, !dbg !48
  %2 = load ptr, ptr %item, align 8, !dbg !49
  ret ptr %2, !dbg !50
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @cJSON_strdup(ptr noundef %str) #0 !dbg !51 {
entry:
  %str.addr = alloca ptr, align 8
  %len = alloca i64, align 8
  %copy = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
    #dbg_declare(ptr %str.addr, !54, !DIExpression(), !55)
    #dbg_declare(ptr %len, !56, !DIExpression(), !60)
  %0 = load ptr, ptr %str.addr, align 8, !dbg !61
  %call = call i64 @strlen(ptr noundef %0) #7, !dbg !62
  %add = add i64 %call, 1, !dbg !63
  store i64 %add, ptr %len, align 8, !dbg !60
    #dbg_declare(ptr %copy, !64, !DIExpression(), !65)
  %1 = load i64, ptr %len, align 8, !dbg !66
  %call1 = call noalias ptr @malloc(i64 noundef %1) #6, !dbg !67
  store ptr %call1, ptr %copy, align 8, !dbg !65
  %2 = load ptr, ptr %copy, align 8, !dbg !68
  %3 = load ptr, ptr %str.addr, align 8, !dbg !69
  %4 = load i64, ptr %len, align 8, !dbg !70
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr align 1 %3, i64 %4, i1 false), !dbg !71
  %5 = load ptr, ptr %copy, align 8, !dbg !72
  ret ptr %5, !dbg !73
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToArray(ptr noundef %array, ptr noundef %item) #0 !dbg !74 {
entry:
  %array.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %c = alloca ptr, align 8
  store ptr %array, ptr %array.addr, align 8
    #dbg_declare(ptr %array.addr, !77, !DIExpression(), !78)
  store ptr %item, ptr %item.addr, align 8
    #dbg_declare(ptr %item.addr, !79, !DIExpression(), !80)
    #dbg_declare(ptr %c, !81, !DIExpression(), !82)
  %0 = load ptr, ptr %array.addr, align 8, !dbg !83
  %child = getelementptr inbounds nuw %struct.cJSON, ptr %0, i32 0, i32 0, !dbg !84
  %1 = load ptr, ptr %child, align 8, !dbg !84
  store ptr %1, ptr %c, align 8, !dbg !82
  %2 = load ptr, ptr %c, align 8, !dbg !85
  %tobool = icmp ne ptr %2, null, !dbg !85
  br i1 %tobool, label %if.end, label %if.then, !dbg !87

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %item.addr, align 8, !dbg !88
  %4 = load ptr, ptr %array.addr, align 8, !dbg !90
  %child1 = getelementptr inbounds nuw %struct.cJSON, ptr %4, i32 0, i32 0, !dbg !91
  store ptr %3, ptr %child1, align 8, !dbg !92
  br label %if.end, !dbg !93

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !94
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToObject(ptr noundef %object, ptr noundef %string, ptr noundef %item) #0 !dbg !95 {
entry:
  %object.addr = alloca ptr, align 8
  %string.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  store ptr %object, ptr %object.addr, align 8
    #dbg_declare(ptr %object.addr, !98, !DIExpression(), !99)
  store ptr %string, ptr %string.addr, align 8
    #dbg_declare(ptr %string.addr, !100, !DIExpression(), !101)
  store ptr %item, ptr %item.addr, align 8
    #dbg_declare(ptr %item.addr, !102, !DIExpression(), !103)
  %0 = load ptr, ptr %string.addr, align 8, !dbg !104
  %call = call ptr @cJSON_strdup(ptr noundef %0), !dbg !105
  %1 = load ptr, ptr %item.addr, align 8, !dbg !106
  %string1 = getelementptr inbounds nuw %struct.cJSON, ptr %1, i32 0, i32 2, !dbg !107
  store ptr %call, ptr %string1, align 8, !dbg !108
  %2 = load ptr, ptr %object.addr, align 8, !dbg !109
  %3 = load ptr, ptr %item.addr, align 8, !dbg !110
  call void @cJSON_AddItemToArray(ptr noundef %2, ptr noundef %3), !dbg !111
  ret void, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !113 {
entry:
  %json = alloca ptr, align 8
  %test = alloca ptr, align 8
    #dbg_declare(ptr %json, !117, !DIExpression(), !118)
  %call = call noalias ptr @malloc(i64 noundef 24) #6, !dbg !119
  store ptr %call, ptr %json, align 8, !dbg !118
  %0 = load ptr, ptr %json, align 8, !dbg !120
  %call1 = call ptr @cJSON_CreateString(ptr noundef @.str.1), !dbg !121
  call void @cJSON_AddItemToObject(ptr noundef %0, ptr noundef @.str, ptr noundef %call1), !dbg !122
    #dbg_declare(ptr %test, !123, !DIExpression(), !132)
  %1 = load ptr, ptr %json, align 8, !dbg !133
  %call2 = call ptr @json_to_struct(ptr noundef %1), !dbg !134
  store ptr %call2, ptr %test, align 8, !dbg !132
  ret i32 0, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @json_to_struct(ptr noundef %json_obj) #0 !dbg !136 {
entry:
  %json_obj.addr = alloca ptr, align 8
  %json_temp = alloca ptr, align 8
  %struct_hometown = alloca ptr, align 8
  store ptr %json_obj, ptr %json_obj.addr, align 8
    #dbg_declare(ptr %json_obj.addr, !140, !DIExpression(), !141)
    #dbg_declare(ptr %json_temp, !142, !DIExpression(), !143)
    #dbg_declare(ptr %struct_hometown, !144, !DIExpression(), !143)
  %call = call noalias ptr @malloc(i64 noundef 8) #6, !dbg !143
  store ptr %call, ptr %struct_hometown, align 8, !dbg !143
  %0 = load ptr, ptr %struct_hometown, align 8, !dbg !145
  %tobool = icmp ne ptr %0, null, !dbg !145
  br i1 %tobool, label %if.then, label %if.end, !dbg !145

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %struct_hometown, align 8, !dbg !145
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 0, i64 8, i1 false), !dbg !145
  br label %if.end, !dbg !145

if.end:                                           ; preds = %if.then, %entry
  %2 = load ptr, ptr %json_obj.addr, align 8, !dbg !147
  %child = getelementptr inbounds nuw %struct.cJSON, ptr %2, i32 0, i32 0, !dbg !147
  %3 = load ptr, ptr %child, align 8, !dbg !147
  store ptr %3, ptr %json_temp, align 8, !dbg !147
  %4 = load ptr, ptr %json_temp, align 8, !dbg !148
  %tobool1 = icmp ne ptr %4, null, !dbg !148
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !148

if.then2:                                         ; preds = %if.end
  %5 = load ptr, ptr %struct_hometown, align 8, !dbg !148
  %name = getelementptr inbounds nuw %struct.Hometown, ptr %5, i32 0, i32 0, !dbg !148
  %arraydecay = getelementptr inbounds [8 x i8], ptr %name, i64 0, i64 0, !dbg !148
  %6 = load ptr, ptr %json_temp, align 8, !dbg !148
  %valuestring = getelementptr inbounds nuw %struct.cJSON, ptr %6, i32 0, i32 1, !dbg !148
  %7 = load ptr, ptr %valuestring, align 8, !dbg !148
  %call3 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %7) #8, !dbg !148
  br label %if.end4, !dbg !148

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load ptr, ptr %struct_hometown, align 8, !dbg !150
  ret ptr %8, !dbg !151
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #5

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind willreturn memory(read) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!12}
!llvm.module.flags = !{!25, !26, !27, !28, !29, !30, !31}
!llvm.ident = !{!32}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 67, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2020-29203-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "126830e37a8bafa0c896b9cbfcd0d236")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 40, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 5)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 67, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 632, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 79)
!12 = distinct !DICompileUnit(language: DW_LANG_C11, file: !13, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !14, globals: !24, splitDebugInlining: false, nameTableKind: None)
!13 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/CVE-2020-29203-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "126830e37a8bafa0c896b9cbfcd0d236")
!14 = !{!15, !22}
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "cJSON", file: !2, line: 22, baseType: !17)
!17 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cJSON", file: !2, line: 18, size: 192, elements: !18)
!18 = !{!19, !21, !23}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !17, file: !2, line: 19, baseType: !20, size: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "valuestring", scope: !17, file: !2, line: 20, baseType: !22, size: 64, offset: 64)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !17, file: !2, line: 21, baseType: !22, size: 64, offset: 128)
!24 = !{!0, !7}
!25 = !{i32 7, !"Dwarf Version", i32 5}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 8, !"PIC Level", i32 2}
!29 = !{i32 7, !"PIE Level", i32 2}
!30 = !{i32 7, !"uwtable", i32 2}
!31 = !{i32 7, !"frame-pointer", i32 2}
!32 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!33 = distinct !DISubprogram(name: "cJSON_CreateString", scope: !2, file: !2, line: 41, type: !34, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !38)
!34 = !DISubroutineType(types: !35)
!35 = !{!15, !36}
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!38 = !{}
!39 = !DILocalVariable(name: "string", arg: 1, scope: !33, file: !2, line: 41, type: !36)
!40 = !DILocation(line: 41, column: 39, scope: !33)
!41 = !DILocalVariable(name: "item", scope: !33, file: !2, line: 42, type: !15)
!42 = !DILocation(line: 42, column: 12, scope: !33)
!43 = !DILocation(line: 42, column: 27, scope: !33)
!44 = !DILocation(line: 43, column: 36, scope: !33)
!45 = !DILocation(line: 43, column: 23, scope: !33)
!46 = !DILocation(line: 43, column: 5, scope: !33)
!47 = !DILocation(line: 43, column: 11, scope: !33)
!48 = !DILocation(line: 43, column: 22, scope: !33)
!49 = !DILocation(line: 44, column: 12, scope: !33)
!50 = !DILocation(line: 44, column: 5, scope: !33)
!51 = distinct !DISubprogram(name: "cJSON_strdup", scope: !2, file: !2, line: 34, type: !52, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !12, retainedNodes: !38)
!52 = !DISubroutineType(types: !53)
!53 = !{!22, !36}
!54 = !DILocalVariable(name: "str", arg: 1, scope: !51, file: !2, line: 34, type: !36)
!55 = !DILocation(line: 34, column: 39, scope: !51)
!56 = !DILocalVariable(name: "len", scope: !51, file: !2, line: 35, type: !57)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !58, line: 18, baseType: !59)
!58 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!59 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!60 = !DILocation(line: 35, column: 14, scope: !51)
!61 = !DILocation(line: 35, column: 27, scope: !51)
!62 = !DILocation(line: 35, column: 20, scope: !51)
!63 = !DILocation(line: 35, column: 32, scope: !51)
!64 = !DILocalVariable(name: "copy", scope: !51, file: !2, line: 36, type: !22)
!65 = !DILocation(line: 36, column: 13, scope: !51)
!66 = !DILocation(line: 36, column: 34, scope: !51)
!67 = !DILocation(line: 36, column: 27, scope: !51)
!68 = !DILocation(line: 37, column: 14, scope: !51)
!69 = !DILocation(line: 37, column: 19, scope: !51)
!70 = !DILocation(line: 37, column: 23, scope: !51)
!71 = !DILocation(line: 37, column: 7, scope: !51)
!72 = !DILocation(line: 38, column: 14, scope: !51)
!73 = !DILocation(line: 38, column: 7, scope: !51)
!74 = distinct !DISubprogram(name: "cJSON_AddItemToArray", scope: !2, file: !2, line: 47, type: !75, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !38)
!75 = !DISubroutineType(types: !76)
!76 = !{null, !15, !15}
!77 = !DILocalVariable(name: "array", arg: 1, scope: !74, file: !2, line: 47, type: !15)
!78 = !DILocation(line: 47, column: 34, scope: !74)
!79 = !DILocalVariable(name: "item", arg: 2, scope: !74, file: !2, line: 47, type: !15)
!80 = !DILocation(line: 47, column: 48, scope: !74)
!81 = !DILocalVariable(name: "c", scope: !74, file: !2, line: 48, type: !15)
!82 = !DILocation(line: 48, column: 12, scope: !74)
!83 = !DILocation(line: 48, column: 16, scope: !74)
!84 = !DILocation(line: 48, column: 23, scope: !74)
!85 = !DILocation(line: 49, column: 10, scope: !86)
!86 = distinct !DILexicalBlock(scope: !74, file: !2, line: 49, column: 9)
!87 = !DILocation(line: 49, column: 9, scope: !86)
!88 = !DILocation(line: 50, column: 24, scope: !89)
!89 = distinct !DILexicalBlock(scope: !86, file: !2, line: 49, column: 13)
!90 = !DILocation(line: 50, column: 9, scope: !89)
!91 = !DILocation(line: 50, column: 16, scope: !89)
!92 = !DILocation(line: 50, column: 22, scope: !89)
!93 = !DILocation(line: 51, column: 5, scope: !89)
!94 = !DILocation(line: 52, column: 1, scope: !74)
!95 = distinct !DISubprogram(name: "cJSON_AddItemToObject", scope: !2, file: !2, line: 54, type: !96, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !38)
!96 = !DISubroutineType(types: !97)
!97 = !{null, !15, !36, !15}
!98 = !DILocalVariable(name: "object", arg: 1, scope: !95, file: !2, line: 54, type: !15)
!99 = !DILocation(line: 54, column: 35, scope: !95)
!100 = !DILocalVariable(name: "string", arg: 2, scope: !95, file: !2, line: 54, type: !36)
!101 = !DILocation(line: 54, column: 54, scope: !95)
!102 = !DILocalVariable(name: "item", arg: 3, scope: !95, file: !2, line: 54, type: !15)
!103 = !DILocation(line: 54, column: 68, scope: !95)
!104 = !DILocation(line: 55, column: 31, scope: !95)
!105 = !DILocation(line: 55, column: 18, scope: !95)
!106 = !DILocation(line: 55, column: 5, scope: !95)
!107 = !DILocation(line: 55, column: 11, scope: !95)
!108 = !DILocation(line: 55, column: 17, scope: !95)
!109 = !DILocation(line: 56, column: 26, scope: !95)
!110 = !DILocation(line: 56, column: 33, scope: !95)
!111 = !DILocation(line: 56, column: 5, scope: !95)
!112 = !DILocation(line: 57, column: 1, scope: !95)
!113 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 65, type: !114, scopeLine: 65, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !38)
!114 = !DISubroutineType(types: !115)
!115 = !{!116}
!116 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!117 = !DILocalVariable(name: "json", scope: !113, file: !2, line: 66, type: !15)
!118 = !DILocation(line: 66, column: 10, scope: !113)
!119 = !DILocation(line: 66, column: 25, scope: !113)
!120 = !DILocation(line: 67, column: 25, scope: !113)
!121 = !DILocation(line: 67, column: 39, scope: !113)
!122 = !DILocation(line: 67, column: 3, scope: !113)
!123 = !DILocalVariable(name: "test", scope: !113, file: !2, line: 68, type: !124)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hometown", file: !2, line: 15, baseType: !126)
!126 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2, line: 13, size: 64, elements: !127)
!127 = !{!128}
!128 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !126, file: !2, line: 14, baseType: !129, size: 64)
!129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 64, elements: !130)
!130 = !{!131}
!131 = !DISubrange(count: 8)
!132 = !DILocation(line: 68, column: 14, scope: !113)
!133 = !DILocation(line: 68, column: 36, scope: !113)
!134 = !DILocation(line: 68, column: 21, scope: !113)
!135 = !DILocation(line: 70, column: 1, scope: !113)
!136 = distinct !DISubprogram(name: "json_to_struct", scope: !2, file: !2, line: 59, type: !137, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !12, retainedNodes: !38)
!137 = !DISubroutineType(types: !138)
!138 = !{!139, !15}
!139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!140 = !DILocalVariable(name: "json_obj", arg: 1, scope: !136, file: !2, line: 59, type: !15)
!141 = !DILocation(line: 59, column: 36, scope: !136)
!142 = !DILocalVariable(name: "json_temp", scope: !136, file: !2, line: 60, type: !15)
!143 = !DILocation(line: 60, column: 3, scope: !136)
!144 = !DILocalVariable(name: "struct_hometown", scope: !136, file: !2, line: 60, type: !124)
!145 = !DILocation(line: 60, column: 3, scope: !146)
!146 = distinct !DILexicalBlock(scope: !136, file: !2, line: 60, column: 3)
!147 = !DILocation(line: 61, column: 3, scope: !136)
!148 = !DILocation(line: 61, column: 3, scope: !149)
!149 = distinct !DILexicalBlock(scope: !136, file: !2, line: 61, column: 3)
!150 = !DILocation(line: 62, column: 10, scope: !136)
!151 = !DILocation(line: 62, column: 3, scope: !136)
