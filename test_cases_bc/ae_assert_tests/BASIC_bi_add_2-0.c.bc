; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_bi_add_2-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_bi_add_2-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %i, !16, !DIExpression(), !18)
  %0 = load volatile i32, ptr %i, align 4, !dbg !19
  call void @set_value(i32 noundef %0, i32 noundef 0, i32 noundef 100), !dbg !20
    #dbg_declare(ptr %a, !21, !DIExpression(), !22)
    #dbg_declare(ptr %c, !23, !DIExpression(), !24)
  %1 = load volatile i32, ptr %i, align 4, !dbg !25
  %add = add nsw i32 %1, 1, !dbg !26
  store volatile i32 %add, ptr %a, align 4, !dbg !27
  %2 = load volatile i32, ptr %a, align 4, !dbg !28
  store volatile i32 %2, ptr %c, align 4, !dbg !29
  %3 = load volatile i32, ptr %c, align 4, !dbg !30
  %4 = load volatile i32, ptr %i, align 4, !dbg !31
  %add1 = add nsw i32 %4, 1, !dbg !32
  call void @svf_assert_eq(i32 noundef %3, i32 noundef %add1), !dbg !33
  ret i32 0, !dbg !34
}

declare void @set_value(i32 noundef, i32 noundef, i32 noundef) #1

declare void @svf_assert_eq(i32 noundef, i32 noundef) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_bi_add_2-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e58e6423a11d7f5e99dd4cd06da7005c")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!10 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 6, type: !12, scopeLine: 6, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_bi_add_2-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e58e6423a11d7f5e99dd4cd06da7005c")
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "i", scope: !10, file: !11, line: 7, type: !17)
!17 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !14)
!18 = !DILocation(line: 7, column: 18, scope: !10)
!19 = !DILocation(line: 8, column: 15, scope: !10)
!20 = !DILocation(line: 8, column: 5, scope: !10)
!21 = !DILocalVariable(name: "a", scope: !10, file: !11, line: 9, type: !17)
!22 = !DILocation(line: 9, column: 18, scope: !10)
!23 = !DILocalVariable(name: "c", scope: !10, file: !11, line: 9, type: !17)
!24 = !DILocation(line: 9, column: 21, scope: !10)
!25 = !DILocation(line: 10, column: 9, scope: !10)
!26 = !DILocation(line: 10, column: 11, scope: !10)
!27 = !DILocation(line: 10, column: 7, scope: !10)
!28 = !DILocation(line: 11, column: 9, scope: !10)
!29 = !DILocation(line: 11, column: 7, scope: !10)
!30 = !DILocation(line: 12, column: 19, scope: !10)
!31 = !DILocation(line: 12, column: 22, scope: !10)
!32 = !DILocation(line: 12, column: 23, scope: !10)
!33 = !DILocation(line: 12, column: 5, scope: !10)
!34 = !DILocation(line: 13, column: 5, scope: !10)
