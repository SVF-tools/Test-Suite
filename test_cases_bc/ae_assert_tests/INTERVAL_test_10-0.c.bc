; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_10-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/INTERVAL_test_10-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"a value\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %a, !23, !DIExpression(), !24)
  %call = call i32 @rand() #3, !dbg !25
  store i32 %call, ptr %a, align 4, !dbg !24
  %0 = load i32, ptr %a, align 4, !dbg !26
  %cmp = icmp sgt i32 %0, 5, !dbg !28
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !29

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr %a, align 4, !dbg !30
  %cmp1 = icmp slt i32 %1, 7, !dbg !31
  br i1 %cmp1, label %if.then, label %if.else, !dbg !29

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, ptr %a, align 4, !dbg !32
  call void @svf_print(i32 noundef %2, ptr noundef @.str), !dbg !34
  %3 = load i32, ptr %a, align 4, !dbg !35
  %cmp2 = icmp eq i32 %3, 6, !dbg !36
  call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !37
  br label %if.end, !dbg !38

if.else:                                          ; preds = %land.lhs.true, %entry
    #dbg_declare(ptr %res, !39, !DIExpression(), !41)
  %call3 = call i32 @rand() #3, !dbg !42
  store i32 %call3, ptr %res, align 4, !dbg !41
  %4 = load i32, ptr %a, align 4, !dbg !43
  %5 = load i32, ptr %res, align 4, !dbg !44
  call void @svf_assert_eq(i32 noundef %4, i32 noundef %5), !dbg !45
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, ptr %retval, align 4, !dbg !46
  ret i32 %6, !dbg !46
}

; Function Attrs: nounwind
declare i32 @rand() #1

declare void @svf_print(i32 noundef, ptr noundef) #2

declare void @svf_assert(i1 noundef zeroext) #2

declare void @svf_assert_eq(i32 noundef, i32 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 11, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_10-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "248d118451c54312cc11c5c23e2987c7")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 64, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 8)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/INTERVAL_test_10-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "248d118451c54312cc11c5c23e2987c7")
!9 = !{!0}
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!18 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 8, type: !19, scopeLine: 8, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!19 = !DISubroutineType(types: !20)
!20 = !{!21}
!21 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!22 = !{}
!23 = !DILocalVariable(name: "a", scope: !18, file: !2, line: 9, type: !21)
!24 = !DILocation(line: 9, column: 6, scope: !18)
!25 = !DILocation(line: 9, column: 10, scope: !18)
!26 = !DILocation(line: 10, column: 9, scope: !27)
!27 = distinct !DILexicalBlock(scope: !18, file: !2, line: 10, column: 9)
!28 = !DILocation(line: 10, column: 11, scope: !27)
!29 = !DILocation(line: 10, column: 15, scope: !27)
!30 = !DILocation(line: 10, column: 18, scope: !27)
!31 = !DILocation(line: 10, column: 20, scope: !27)
!32 = !DILocation(line: 11, column: 19, scope: !33)
!33 = distinct !DILexicalBlock(scope: !27, file: !2, line: 10, column: 25)
!34 = !DILocation(line: 11, column: 9, scope: !33)
!35 = !DILocation(line: 12, column: 20, scope: !33)
!36 = !DILocation(line: 12, column: 22, scope: !33)
!37 = !DILocation(line: 12, column: 9, scope: !33)
!38 = !DILocation(line: 13, column: 5, scope: !33)
!39 = !DILocalVariable(name: "res", scope: !40, file: !2, line: 16, type: !21)
!40 = distinct !DILexicalBlock(scope: !27, file: !2, line: 14, column: 10)
!41 = !DILocation(line: 16, column: 13, scope: !40)
!42 = !DILocation(line: 16, column: 19, scope: !40)
!43 = !DILocation(line: 17, column: 23, scope: !40)
!44 = !DILocation(line: 17, column: 26, scope: !40)
!45 = !DILocation(line: 17, column: 9, scope: !40)
!46 = !DILocation(line: 19, column: 1, scope: !18)
