; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_ptr_func_1-0.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_assert_tests/BASIC_ptr_func_1-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  %q = alloca ptr, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %p, !16, !DIExpression(), !18)
    #dbg_declare(ptr %q, !19, !DIExpression(), !23)
  %call = call i32 @nd_int(), !dbg !24
  %tobool = icmp ne i32 %call, 0, !dbg !24
  br i1 %tobool, label %if.then, label %if.end, !dbg !24

if.then:                                          ; preds = %entry
  store ptr @a, ptr %p, align 8, !dbg !26
  store ptr @c, ptr %q, align 8, !dbg !28
  br label %if.end, !dbg !29

if.end:                                           ; preds = %if.then, %entry
    #dbg_declare(ptr %x, !30, !DIExpression(), !31)
  %0 = load ptr, ptr %p, align 8, !dbg !32
  %call1 = call i32 %0(), !dbg !32
  store i32 %call1, ptr %x, align 4, !dbg !31
    #dbg_declare(ptr %y, !33, !DIExpression(), !34)
  %1 = load ptr, ptr %q, align 8, !dbg !35
  %call2 = call i32 %1(i32 noundef 2), !dbg !35
  store i32 %call2, ptr %y, align 4, !dbg !34
  %2 = load i32, ptr %x, align 4, !dbg !36
  %cmp = icmp sge i32 %2, 5, !dbg !37
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !38

land.rhs:                                         ; preds = %if.end
  %3 = load i32, ptr %y, align 4, !dbg !39
  %cmp3 = icmp sge i32 %3, 7, !dbg !40
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %4 = phi i1 [ false, %if.end ], [ %cmp3, %land.rhs ], !dbg !41
  call void @svf_assert(i1 noundef zeroext %4), !dbg !42
  ret i32 0, !dbg !43
}

declare i32 @nd_int() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @a() #0 !dbg !44 {
entry:
  ret i32 10, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c(i32 noundef %x) #0 !dbg !46 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
    #dbg_declare(ptr %x.addr, !47, !DIExpression(), !48)
  %0 = load i32, ptr %x.addr, align 4, !dbg !49
  %add = add nsw i32 %0, 5, !dbg !50
  ret i32 %add, !dbg !51
}

declare void @svf_assert(i1 noundef zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_assert_tests/BASIC_ptr_func_1-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c780b1b60dee127e0bd37f2c6b480056")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!10 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 9, type: !12, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_ptr_func_1-0.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c780b1b60dee127e0bd37f2c6b480056")
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "p", scope: !10, file: !11, line: 10, type: !17)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DILocation(line: 10, column: 9, scope: !10)
!19 = !DILocalVariable(name: "q", scope: !10, file: !11, line: 11, type: !20)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DISubroutineType(types: !22)
!22 = !{!14, !14}
!23 = !DILocation(line: 11, column: 9, scope: !10)
!24 = !DILocation(line: 13, column: 7, scope: !25)
!25 = distinct !DILexicalBlock(scope: !10, file: !11, line: 13, column: 7)
!26 = !DILocation(line: 14, column: 9, scope: !27)
!27 = distinct !DILexicalBlock(scope: !25, file: !11, line: 13, column: 17)
!28 = !DILocation(line: 15, column: 9, scope: !27)
!29 = !DILocation(line: 16, column: 3, scope: !27)
!30 = !DILocalVariable(name: "x", scope: !10, file: !11, line: 18, type: !14)
!31 = !DILocation(line: 18, column: 7, scope: !10)
!32 = !DILocation(line: 18, column: 11, scope: !10)
!33 = !DILocalVariable(name: "y", scope: !10, file: !11, line: 19, type: !14)
!34 = !DILocation(line: 19, column: 7, scope: !10)
!35 = !DILocation(line: 19, column: 11, scope: !10)
!36 = !DILocation(line: 21, column: 14, scope: !10)
!37 = !DILocation(line: 21, column: 15, scope: !10)
!38 = !DILocation(line: 21, column: 20, scope: !10)
!39 = !DILocation(line: 21, column: 23, scope: !10)
!40 = !DILocation(line: 21, column: 24, scope: !10)
!41 = !DILocation(line: 0, scope: !10)
!42 = !DILocation(line: 21, column: 3, scope: !10)
!43 = !DILocation(line: 23, column: 3, scope: !10)
!44 = distinct !DISubprogram(name: "a", scope: !11, file: !11, line: 26, type: !12, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!45 = !DILocation(line: 26, column: 10, scope: !44)
!46 = distinct !DISubprogram(name: "c", scope: !11, file: !11, line: 27, type: !21, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!47 = !DILocalVariable(name: "x", arg: 1, scope: !46, file: !11, line: 27, type: !14)
!48 = !DILocation(line: 27, column: 11, scope: !46)
!49 = !DILocation(line: 27, column: 22, scope: !46)
!50 = !DILocation(line: 27, column: 23, scope: !46)
!51 = !DILocation(line: 27, column: 15, scope: !46)
