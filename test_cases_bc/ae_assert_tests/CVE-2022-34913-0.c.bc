; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34913-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34913-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Unable to open '%s'\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"fseek failed\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"ftell failed\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fread failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md2roff(ptr noundef %docname, ptr noundef %source) #0 {
entry:
  %docname.addr = alloca ptr, align 8
  %source.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %appname = alloca [64 x i8], align 16
  store ptr %docname, ptr %docname.addr, align 8
  store ptr %source, ptr %source.addr, align 8
  %0 = load ptr, ptr %source.addr, align 8
  store ptr %0, ptr %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call ptr @__ctype_b_loc() #6
  %1 = load ptr, ptr %call, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = load i8, ptr %2, align 1
  %conv = sext i8 %3 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds i16, ptr %1, i64 %idxprom
  %4 = load i16, ptr %arrayidx, align 2
  %conv1 = zext i16 %4 to i32
  %and = and i32 %conv1, 8192
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load ptr, ptr %p, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %5, i32 1
  store ptr %incdec.ptr, ptr %p, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %while.cond
  %6 = load ptr, ptr %p, align 8
  %arrayidx2 = getelementptr inbounds i8, ptr %6, i64 0
  %7 = load i8, ptr %arrayidx2, align 1
  %conv3 = sext i8 %7 to i32
  %cmp = icmp ne i32 %conv3, 35
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %call5 = call ptr @__ctype_b_loc() #6
  %8 = load ptr, ptr %call5, align 8
  %9 = load ptr, ptr %p, align 8
  %arrayidx6 = getelementptr inbounds i8, ptr %9, i64 1
  %10 = load i8, ptr %arrayidx6, align 1
  %conv7 = sext i8 %10 to i32
  %idxprom8 = sext i32 %conv7 to i64
  %arrayidx9 = getelementptr inbounds i16, ptr %8, i64 %idxprom8
  %11 = load i16, ptr %arrayidx9, align 2
  %conv10 = zext i16 %11 to i32
  %and11 = and i32 %conv10, 1
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %arraydecay = getelementptr inbounds [64 x i8], ptr %appname, i64 0, i64 0
  %12 = load ptr, ptr %docname.addr, align 8
  %call13 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %12) #7
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() #1

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @loadfile(ptr noundef %filename) #0 {
entry:
  %filename.addr = alloca ptr, align 8
  %len = alloca i32, align 4
  %fp = alloca ptr, align 8
  %buf = alloca ptr, align 8
  store ptr %filename, ptr %filename.addr, align 8
  store i32 -1, ptr %len, align 4
  store ptr null, ptr %buf, align 8
  %0 = load ptr, ptr %filename.addr, align 8
  %cmp = icmp ne ptr %0, null
  br i1 %cmp, label %if.then, label %if.end31

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %filename.addr, align 8
  %call = call ptr @fopen(ptr noundef %1, ptr noundef @.str)
  store ptr %call, ptr %fp, align 8
  %2 = load ptr, ptr %fp, align 8
  %cmp1 = icmp eq ptr %2, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load ptr, ptr %filename.addr, align 8
  %call3 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %3)
  call void @exit(i32 noundef 1) #8
  unreachable

if.end:                                           ; preds = %if.then
  %4 = load ptr, ptr %fp, align 8
  %call4 = call i32 @fseek(ptr noundef %4, i64 noundef 0, i32 noundef 2)
  %cmp5 = icmp eq i32 %call4, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  call void @exit(i32 noundef 1) #8
  unreachable

if.end8:                                          ; preds = %if.end
  %5 = load ptr, ptr %fp, align 8
  %call9 = call i64 @ftell(ptr noundef %5)
  %conv = trunc i64 %call9 to i32
  store i32 %conv, ptr %len, align 4
  %6 = load i32, ptr %len, align 4
  %cmp10 = icmp eq i32 %6, -1
  br i1 %cmp10, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  call void @exit(i32 noundef 1) #8
  unreachable

if.end14:                                         ; preds = %if.end8
  %7 = load ptr, ptr %fp, align 8
  %call15 = call i32 @fseek(ptr noundef %7, i64 noundef 0, i32 noundef 0)
  %cmp16 = icmp eq i32 %call15, -1
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end14
  %call19 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  call void @exit(i32 noundef 1) #8
  unreachable

if.end20:                                         ; preds = %if.end14
  %8 = load i32, ptr %len, align 4
  %add = add nsw i32 %8, 1
  %conv21 = sext i32 %add to i64
  %call22 = call noalias ptr @malloc(i64 noundef %conv21) #9
  store ptr %call22, ptr %buf, align 8
  %9 = load ptr, ptr %buf, align 8
  %10 = load i32, ptr %len, align 4
  %conv23 = sext i32 %10 to i64
  %11 = load ptr, ptr %fp, align 8
  %call24 = call i64 @fread(ptr noundef %9, i64 noundef %conv23, i64 noundef 1, ptr noundef %11)
  %cmp25 = icmp eq i64 %call24, -1
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end20
  %call28 = call i32 (ptr, ...) @printf(ptr noundef @.str.4)
  call void @exit(i32 noundef 1) #8
  unreachable

if.end29:                                         ; preds = %if.end20
  %12 = load ptr, ptr %buf, align 8
  %13 = load i32, ptr %len, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, ptr %12, i64 %idxprom
  store i8 0, ptr %arrayidx, align 1
  %14 = load ptr, ptr %fp, align 8
  %call30 = call i32 @fclose(ptr noundef %14)
  br label %if.end31

if.end31:                                         ; preds = %if.end29, %entry
  %15 = load ptr, ptr %buf, align 8
  ret ptr %15
}

declare ptr @fopen(ptr noundef, ptr noundef) #3

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #4

declare i32 @fseek(ptr noundef, i64 noundef, i32 noundef) #3

declare i64 @ftell(ptr noundef) #3

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #5

declare i64 @fread(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #3

declare i32 @fclose(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %files = alloca [64 x i32], align 16
  %fc = alloca i32, align 4
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %buf = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  store i32 0, ptr %fc, align 4
  store i32 1, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %1 = load i32, ptr %argc.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %argv.addr, align 8
  %3 = load i32, ptr %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 %idxprom
  %4 = load ptr, ptr %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %4, i64 0
  %5 = load i8, ptr %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %cmp2 = icmp ne i32 %conv, 45
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %7 = load i32, ptr %fc, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom4
  store i32 %6, ptr %arrayidx5, align 4
  %8 = load i32, ptr %fc, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, ptr %fc, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, ptr %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %i7, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc20, %for.end
  %10 = load i32, ptr %i7, align 4
  %11 = load i32, ptr %fc, align 4
  %cmp9 = icmp slt i32 %10, %11
  br i1 %cmp9, label %for.body11, label %for.end22

for.body11:                                       ; preds = %for.cond8
  %12 = load ptr, ptr %argv.addr, align 8
  %13 = load i32, ptr %i7, align 4
  %idxprom12 = sext i32 %13 to i64
  %arrayidx13 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom12
  %14 = load i32, ptr %arrayidx13, align 4
  %idxprom14 = sext i32 %14 to i64
  %arrayidx15 = getelementptr inbounds ptr, ptr %12, i64 %idxprom14
  %15 = load ptr, ptr %arrayidx15, align 8
  %call = call ptr @loadfile(ptr noundef %15)
  store ptr %call, ptr %buf, align 8
  %16 = load ptr, ptr %argv.addr, align 8
  %17 = load i32, ptr %i7, align 4
  %idxprom16 = sext i32 %17 to i64
  %arrayidx17 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom16
  %18 = load i32, ptr %arrayidx17, align 4
  %idxprom18 = sext i32 %18 to i64
  %arrayidx19 = getelementptr inbounds ptr, ptr %16, i64 %idxprom18
  %19 = load ptr, ptr %arrayidx19, align 8
  %20 = load ptr, ptr %buf, align 8
  call void @md2roff(ptr noundef %19, ptr noundef %20)
  %21 = load ptr, ptr %buf, align 8
  call void @free(ptr noundef %21) #7
  br label %for.inc20

for.inc20:                                        ; preds = %for.body11
  %22 = load i32, ptr %i7, align 4
  %inc21 = add nsw i32 %22, 1
  store i32 %inc21, ptr %i7, align 4
  br label %for.cond8, !llvm.loop !9

for.end22:                                        ; preds = %for.cond8
  %23 = load i32, ptr %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind willreturn memory(none) }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
