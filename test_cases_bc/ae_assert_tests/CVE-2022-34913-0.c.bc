; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34913-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34913-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [20 x i8] c"Unable to open '%s'\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [13 x i8] c"fseek failed\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [13 x i8] c"ftell failed\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [13 x i8] c"fread failed\00", align 1, !dbg !19

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md2roff(ptr noundef %docname, ptr noundef %source) #0 !dbg !54 {
entry:
  %docname.addr = alloca ptr, align 8
  %source.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %appname = alloca [64 x i8], align 16
  store ptr %docname, ptr %docname.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %docname.addr, metadata !60, metadata !DIExpression()), !dbg !61
  store ptr %source, ptr %source.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %source.addr, metadata !62, metadata !DIExpression()), !dbg !63
  call void @llvm.dbg.declare(metadata ptr %p, metadata !64, metadata !DIExpression()), !dbg !65
  %0 = load ptr, ptr %source.addr, align 8, !dbg !66
  store ptr %0, ptr %p, align 8, !dbg !65
  call void @llvm.dbg.declare(metadata ptr %appname, metadata !67, metadata !DIExpression()), !dbg !71
  br label %while.cond, !dbg !72

while.cond:                                       ; preds = %while.body, %entry
  %call = call ptr @__ctype_b_loc() #7, !dbg !75
  %1 = load ptr, ptr %call, align 8, !dbg !75
  %2 = load ptr, ptr %p, align 8, !dbg !75
  %3 = load i8, ptr %2, align 1, !dbg !75
  %conv = sext i8 %3 to i32, !dbg !75
  %idxprom = sext i32 %conv to i64, !dbg !75
  %arrayidx = getelementptr inbounds i16, ptr %1, i64 %idxprom, !dbg !75
  %4 = load i16, ptr %arrayidx, align 2, !dbg !75
  %conv1 = zext i16 %4 to i32, !dbg !75
  %and = and i32 %conv1, 8192, !dbg !75
  %tobool = icmp ne i32 %and, 0, !dbg !72
  br i1 %tobool, label %while.body, label %while.end, !dbg !72

while.body:                                       ; preds = %while.cond
  %5 = load ptr, ptr %p, align 8, !dbg !76
  %incdec.ptr = getelementptr inbounds i8, ptr %5, i32 1, !dbg !76
  store ptr %incdec.ptr, ptr %p, align 8, !dbg !76
  br label %while.cond, !dbg !72, !llvm.loop !78

while.end:                                        ; preds = %while.cond
  %6 = load ptr, ptr %p, align 8, !dbg !81
  %arrayidx2 = getelementptr inbounds i8, ptr %6, i64 0, !dbg !81
  %7 = load i8, ptr %arrayidx2, align 1, !dbg !81
  %conv3 = sext i8 %7 to i32, !dbg !81
  %cmp = icmp ne i32 %conv3, 35, !dbg !83
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !84

lor.lhs.false:                                    ; preds = %while.end
  %call5 = call ptr @__ctype_b_loc() #7, !dbg !85
  %8 = load ptr, ptr %call5, align 8, !dbg !85
  %9 = load ptr, ptr %p, align 8, !dbg !85
  %arrayidx6 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !85
  %10 = load i8, ptr %arrayidx6, align 1, !dbg !85
  %conv7 = sext i8 %10 to i32, !dbg !85
  %idxprom8 = sext i32 %conv7 to i64, !dbg !85
  %arrayidx9 = getelementptr inbounds i16, ptr %8, i64 %idxprom8, !dbg !85
  %11 = load i16, ptr %arrayidx9, align 2, !dbg !85
  %conv10 = zext i16 %11 to i32, !dbg !85
  %and11 = and i32 %conv10, 1, !dbg !85
  %tobool12 = icmp ne i32 %and11, 0, !dbg !85
  br i1 %tobool12, label %if.end, label %if.then, !dbg !86

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %arraydecay = getelementptr inbounds [64 x i8], ptr %appname, i64 0, i64 0, !dbg !87
  %12 = load ptr, ptr %docname.addr, align 8, !dbg !89
  %call13 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %12) #8, !dbg !90
  br label %if.end, !dbg !91

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !92
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() #2

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @loadfile(ptr noundef %filename) #0 !dbg !93 {
entry:
  %filename.addr = alloca ptr, align 8
  %len = alloca i32, align 4
  %fp = alloca ptr, align 8
  %buf = alloca ptr, align 8
  store ptr %filename, ptr %filename.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %filename.addr, metadata !96, metadata !DIExpression()), !dbg !97
  call void @llvm.dbg.declare(metadata ptr %len, metadata !98, metadata !DIExpression()), !dbg !99
  store i32 -1, ptr %len, align 4, !dbg !99
  call void @llvm.dbg.declare(metadata ptr %fp, metadata !100, metadata !DIExpression()), !dbg !156
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !157, metadata !DIExpression()), !dbg !158
  store ptr null, ptr %buf, align 8, !dbg !158
  %0 = load ptr, ptr %filename.addr, align 8, !dbg !159
  %cmp = icmp ne ptr %0, null, !dbg !161
  br i1 %cmp, label %if.then, label %if.end31, !dbg !162

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %filename.addr, align 8, !dbg !163
  %call = call ptr @fopen(ptr noundef %1, ptr noundef @.str), !dbg !165
  store ptr %call, ptr %fp, align 8, !dbg !166
  %2 = load ptr, ptr %fp, align 8, !dbg !167
  %cmp1 = icmp eq ptr %2, null, !dbg !169
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !170

if.then2:                                         ; preds = %if.then
  %3 = load ptr, ptr %filename.addr, align 8, !dbg !171
  %call3 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %3), !dbg !173
  call void @exit(i32 noundef 1) #9, !dbg !174
  unreachable, !dbg !174

if.end:                                           ; preds = %if.then
  %4 = load ptr, ptr %fp, align 8, !dbg !175
  %call4 = call i32 @fseek(ptr noundef %4, i64 noundef 0, i32 noundef 2), !dbg !177
  %cmp5 = icmp eq i32 %call4, -1, !dbg !178
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !179

if.then6:                                         ; preds = %if.end
  %call7 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !180
  call void @exit(i32 noundef 1) #9, !dbg !182
  unreachable, !dbg !182

if.end8:                                          ; preds = %if.end
  %5 = load ptr, ptr %fp, align 8, !dbg !183
  %call9 = call i64 @ftell(ptr noundef %5), !dbg !184
  %conv = trunc i64 %call9 to i32, !dbg !184
  store i32 %conv, ptr %len, align 4, !dbg !185
  %6 = load i32, ptr %len, align 4, !dbg !186
  %cmp10 = icmp eq i32 %6, -1, !dbg !188
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !189

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 (ptr, ...) @printf(ptr noundef @.str.3), !dbg !190
  call void @exit(i32 noundef 1) #9, !dbg !192
  unreachable, !dbg !192

if.end14:                                         ; preds = %if.end8
  %7 = load ptr, ptr %fp, align 8, !dbg !193
  %call15 = call i32 @fseek(ptr noundef %7, i64 noundef 0, i32 noundef 0), !dbg !195
  %cmp16 = icmp eq i32 %call15, -1, !dbg !196
  br i1 %cmp16, label %if.then18, label %if.end20, !dbg !197

if.then18:                                        ; preds = %if.end14
  %call19 = call i32 (ptr, ...) @printf(ptr noundef @.str.2), !dbg !198
  call void @exit(i32 noundef 1) #9, !dbg !200
  unreachable, !dbg !200

if.end20:                                         ; preds = %if.end14
  %8 = load i32, ptr %len, align 4, !dbg !201
  %add = add nsw i32 %8, 1, !dbg !202
  %conv21 = sext i32 %add to i64, !dbg !201
  %call22 = call noalias ptr @malloc(i64 noundef %conv21) #10, !dbg !203
  store ptr %call22, ptr %buf, align 8, !dbg !204
  %9 = load ptr, ptr %buf, align 8, !dbg !205
  %10 = load i32, ptr %len, align 4, !dbg !207
  %conv23 = sext i32 %10 to i64, !dbg !207
  %11 = load ptr, ptr %fp, align 8, !dbg !208
  %call24 = call i64 @fread(ptr noundef %9, i64 noundef %conv23, i64 noundef 1, ptr noundef %11), !dbg !209
  %cmp25 = icmp eq i64 %call24, -1, !dbg !210
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !211

if.then27:                                        ; preds = %if.end20
  %call28 = call i32 (ptr, ...) @printf(ptr noundef @.str.4), !dbg !212
  call void @exit(i32 noundef 1) #9, !dbg !214
  unreachable, !dbg !214

if.end29:                                         ; preds = %if.end20
  %12 = load ptr, ptr %buf, align 8, !dbg !215
  %13 = load i32, ptr %len, align 4, !dbg !216
  %idxprom = sext i32 %13 to i64, !dbg !215
  %arrayidx = getelementptr inbounds i8, ptr %12, i64 %idxprom, !dbg !215
  store i8 0, ptr %arrayidx, align 1, !dbg !217
  %14 = load ptr, ptr %fp, align 8, !dbg !218
  %call30 = call i32 @fclose(ptr noundef %14), !dbg !219
  br label %if.end31, !dbg !220

if.end31:                                         ; preds = %if.end29, %entry
  %15 = load ptr, ptr %buf, align 8, !dbg !221
  ret ptr %15, !dbg !222
}

declare ptr @fopen(ptr noundef, ptr noundef) #4

declare i32 @printf(ptr noundef, ...) #4

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

declare i32 @fseek(ptr noundef, i64 noundef, i32 noundef) #4

declare i64 @ftell(ptr noundef) #4

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #6

declare i64 @fread(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #4

declare i32 @fclose(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !223 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %files = alloca [64 x i32], align 16
  %fc = alloca i32, align 4
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %buf = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !227, metadata !DIExpression()), !dbg !228
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !229, metadata !DIExpression()), !dbg !230
  call void @llvm.dbg.declare(metadata ptr %files, metadata !231, metadata !DIExpression()), !dbg !233
  call void @llvm.dbg.declare(metadata ptr %fc, metadata !234, metadata !DIExpression()), !dbg !235
  store i32 0, ptr %fc, align 4, !dbg !235
  call void @llvm.dbg.declare(metadata ptr %i, metadata !236, metadata !DIExpression()), !dbg !238
  store i32 1, ptr %i, align 4, !dbg !238
  br label %for.cond, !dbg !239

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !240
  %1 = load i32, ptr %argc.addr, align 4, !dbg !242
  %cmp = icmp slt i32 %0, %1, !dbg !243
  br i1 %cmp, label %for.body, label %for.end, !dbg !244

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %argv.addr, align 8, !dbg !245
  %3 = load i32, ptr %i, align 4, !dbg !248
  %idxprom = sext i32 %3 to i64, !dbg !245
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 %idxprom, !dbg !245
  %4 = load ptr, ptr %arrayidx, align 8, !dbg !245
  %arrayidx1 = getelementptr inbounds i8, ptr %4, i64 0, !dbg !245
  %5 = load i8, ptr %arrayidx1, align 1, !dbg !245
  %conv = sext i8 %5 to i32, !dbg !245
  %cmp2 = icmp ne i32 %conv, 45, !dbg !249
  br i1 %cmp2, label %if.then, label %if.end, !dbg !250

if.then:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !251
  %7 = load i32, ptr %fc, align 4, !dbg !253
  %idxprom4 = sext i32 %7 to i64, !dbg !254
  %arrayidx5 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom4, !dbg !254
  store i32 %6, ptr %arrayidx5, align 4, !dbg !255
  %8 = load i32, ptr %fc, align 4, !dbg !256
  %inc = add nsw i32 %8, 1, !dbg !256
  store i32 %inc, ptr %fc, align 4, !dbg !256
  br label %if.end, !dbg !257

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !258

for.inc:                                          ; preds = %if.end
  %9 = load i32, ptr %i, align 4, !dbg !259
  %inc6 = add nsw i32 %9, 1, !dbg !259
  store i32 %inc6, ptr %i, align 4, !dbg !259
  br label %for.cond, !dbg !260, !llvm.loop !261

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata ptr %i7, metadata !263, metadata !DIExpression()), !dbg !265
  store i32 0, ptr %i7, align 4, !dbg !265
  br label %for.cond8, !dbg !266

for.cond8:                                        ; preds = %for.inc20, %for.end
  %10 = load i32, ptr %i7, align 4, !dbg !267
  %11 = load i32, ptr %fc, align 4, !dbg !269
  %cmp9 = icmp slt i32 %10, %11, !dbg !270
  br i1 %cmp9, label %for.body11, label %for.end22, !dbg !271

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !272, metadata !DIExpression()), !dbg !274
  %12 = load ptr, ptr %argv.addr, align 8, !dbg !275
  %13 = load i32, ptr %i7, align 4, !dbg !276
  %idxprom12 = sext i32 %13 to i64, !dbg !277
  %arrayidx13 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom12, !dbg !277
  %14 = load i32, ptr %arrayidx13, align 4, !dbg !277
  %idxprom14 = sext i32 %14 to i64, !dbg !275
  %arrayidx15 = getelementptr inbounds ptr, ptr %12, i64 %idxprom14, !dbg !275
  %15 = load ptr, ptr %arrayidx15, align 8, !dbg !275
  %call = call ptr @loadfile(ptr noundef %15), !dbg !278
  store ptr %call, ptr %buf, align 8, !dbg !274
  %16 = load ptr, ptr %argv.addr, align 8, !dbg !279
  %17 = load i32, ptr %i7, align 4, !dbg !280
  %idxprom16 = sext i32 %17 to i64, !dbg !281
  %arrayidx17 = getelementptr inbounds [64 x i32], ptr %files, i64 0, i64 %idxprom16, !dbg !281
  %18 = load i32, ptr %arrayidx17, align 4, !dbg !281
  %idxprom18 = sext i32 %18 to i64, !dbg !279
  %arrayidx19 = getelementptr inbounds ptr, ptr %16, i64 %idxprom18, !dbg !279
  %19 = load ptr, ptr %arrayidx19, align 8, !dbg !279
  %20 = load ptr, ptr %buf, align 8, !dbg !282
  call void @md2roff(ptr noundef %19, ptr noundef %20), !dbg !283
  %21 = load ptr, ptr %buf, align 8, !dbg !284
  call void @free(ptr noundef %21) #8, !dbg !285
  br label %for.inc20, !dbg !286

for.inc20:                                        ; preds = %for.body11
  %22 = load i32, ptr %i7, align 4, !dbg !287
  %inc21 = add nsw i32 %22, 1, !dbg !287
  store i32 %inc21, ptr %i7, align 4, !dbg !287
  br label %for.cond8, !dbg !288, !llvm.loop !289

for.end22:                                        ; preds = %for.cond8
  %23 = load i32, ptr %retval, align 4, !dbg !291
  ret i32 %23, !dbg !291
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind willreturn memory(none) }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind allocsize(0) }

!llvm.dbg.cu = !{!21}
!llvm.module.flags = !{!46, !47, !48, !49, !50, !51, !52}
!llvm.ident = !{!53}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 40, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-34913-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "bd4c591b50f6816bac29dcbbaa955cce")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 42, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 160, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 20)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 46, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 104, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 13)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 51, type: !14, isLocal: true, isDefinition: true)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(scope: null, file: !2, line: 60, type: !14, isLocal: true, isDefinition: true)
!21 = distinct !DICompileUnit(language: DW_LANG_C11, file: !22, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !23, retainedTypes: !40, globals: !45, splitDebugInlining: false, nameTableKind: None)
!22 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34913-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "bd4c591b50f6816bac29dcbbaa955cce")
!23 = !{!24}
!24 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !25, line: 46, baseType: !26, size: 32, elements: !27)
!25 = !DIFile(filename: "/usr/include/ctype.h", directory: "", checksumkind: CSK_MD5, checksum: "36575f934ef4fe7e9d50a3cb17bd5c66")
!26 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!27 = !{!28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39}
!28 = !DIEnumerator(name: "_ISupper", value: 256)
!29 = !DIEnumerator(name: "_ISlower", value: 512)
!30 = !DIEnumerator(name: "_ISalpha", value: 1024)
!31 = !DIEnumerator(name: "_ISdigit", value: 2048)
!32 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!33 = !DIEnumerator(name: "_ISspace", value: 8192)
!34 = !DIEnumerator(name: "_ISprint", value: 16384)
!35 = !DIEnumerator(name: "_ISgraph", value: 32768)
!36 = !DIEnumerator(name: "_ISblank", value: 1)
!37 = !DIEnumerator(name: "_IScntrl", value: 2)
!38 = !DIEnumerator(name: "_ISpunct", value: 4)
!39 = !DIEnumerator(name: "_ISalnum", value: 8)
!40 = !{!41, !42, !43, !44}
!41 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!42 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!45 = !{!0, !7, !12, !17, !19}
!46 = !{i32 7, !"Dwarf Version", i32 5}
!47 = !{i32 2, !"Debug Info Version", i32 3}
!48 = !{i32 1, !"wchar_size", i32 4}
!49 = !{i32 8, !"PIC Level", i32 2}
!50 = !{i32 7, !"PIE Level", i32 2}
!51 = !{i32 7, !"uwtable", i32 2}
!52 = !{i32 7, !"frame-pointer", i32 2}
!53 = !{!"clang version 16.0.0"}
!54 = distinct !DISubprogram(name: "md2roff", scope: !2, file: !2, line: 18, type: !55, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !21, retainedNodes: !59)
!55 = !DISubroutineType(types: !56)
!56 = !{null, !57, !57}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!59 = !{}
!60 = !DILocalVariable(name: "docname", arg: 1, scope: !54, file: !2, line: 18, type: !57)
!61 = !DILocation(line: 18, column: 26, scope: !54)
!62 = !DILocalVariable(name: "source", arg: 2, scope: !54, file: !2, line: 18, type: !57)
!63 = !DILocation(line: 18, column: 47, scope: !54)
!64 = !DILocalVariable(name: "p", scope: !54, file: !2, line: 19, type: !57)
!65 = !DILocation(line: 19, column: 14, scope: !54)
!66 = !DILocation(line: 19, column: 18, scope: !54)
!67 = !DILocalVariable(name: "appname", scope: !54, file: !2, line: 20, type: !68)
!68 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 512, elements: !69)
!69 = !{!70}
!70 = !DISubrange(count: 64)
!71 = !DILocation(line: 20, column: 7, scope: !54)
!72 = !DILocation(line: 23, column: 3, scope: !73)
!73 = distinct !DILexicalBlock(scope: !74, file: !2, line: 22, column: 12)
!74 = distinct !DILexicalBlock(scope: !54, file: !2, line: 22, column: 6)
!75 = !DILocation(line: 23, column: 11, scope: !73)
!76 = !DILocation(line: 24, column: 6, scope: !77)
!77 = distinct !DILexicalBlock(scope: !73, file: !2, line: 23, column: 25)
!78 = distinct !{!78, !72, !79, !80}
!79 = !DILocation(line: 25, column: 3, scope: !73)
!80 = !{!"llvm.loop.mustprogress"}
!81 = !DILocation(line: 27, column: 7, scope: !82)
!82 = distinct !DILexicalBlock(scope: !73, file: !2, line: 27, column: 7)
!83 = !DILocation(line: 27, column: 12, scope: !82)
!84 = !DILocation(line: 27, column: 19, scope: !82)
!85 = !DILocation(line: 27, column: 23, scope: !82)
!86 = !DILocation(line: 27, column: 7, scope: !73)
!87 = !DILocation(line: 29, column: 11, scope: !88)
!88 = distinct !DILexicalBlock(scope: !82, file: !2, line: 27, column: 39)
!89 = !DILocation(line: 29, column: 20, scope: !88)
!90 = !DILocation(line: 29, column: 4, scope: !88)
!91 = !DILocation(line: 30, column: 3, scope: !88)
!92 = !DILocation(line: 32, column: 1, scope: !54)
!93 = distinct !DISubprogram(name: "loadfile", scope: !2, file: !2, line: 34, type: !94, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !21, retainedNodes: !59)
!94 = !DISubroutineType(types: !95)
!95 = !{!44, !57}
!96 = !DILocalVariable(name: "filename", arg: 1, scope: !93, file: !2, line: 34, type: !57)
!97 = !DILocation(line: 34, column: 28, scope: !93)
!98 = !DILocalVariable(name: "len", scope: !93, file: !2, line: 35, type: !41)
!99 = !DILocation(line: 35, column: 6, scope: !93)
!100 = !DILocalVariable(name: "fp", scope: !93, file: !2, line: 36, type: !101)
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !102, size: 64)
!102 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !103, line: 7, baseType: !104)
!103 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "", checksumkind: CSK_MD5, checksum: "571f9fb6223c42439075fdde11a0de5d")
!104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !105, line: 49, size: 1728, elements: !106)
!105 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "", checksumkind: CSK_MD5, checksum: "f3c970561f3408448ce03a9676ead8f4")
!106 = !{!107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !122, !124, !125, !126, !130, !131, !133, !137, !140, !142, !145, !148, !149, !150, !154, !155}
!107 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !104, file: !105, line: 51, baseType: !41, size: 32)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !104, file: !105, line: 54, baseType: !44, size: 64, offset: 64)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !104, file: !105, line: 55, baseType: !44, size: 64, offset: 128)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !104, file: !105, line: 56, baseType: !44, size: 64, offset: 192)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !104, file: !105, line: 57, baseType: !44, size: 64, offset: 256)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !104, file: !105, line: 58, baseType: !44, size: 64, offset: 320)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !104, file: !105, line: 59, baseType: !44, size: 64, offset: 384)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !104, file: !105, line: 60, baseType: !44, size: 64, offset: 448)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !104, file: !105, line: 61, baseType: !44, size: 64, offset: 512)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !104, file: !105, line: 64, baseType: !44, size: 64, offset: 576)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !104, file: !105, line: 65, baseType: !44, size: 64, offset: 640)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !104, file: !105, line: 66, baseType: !44, size: 64, offset: 704)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !104, file: !105, line: 68, baseType: !120, size: 64, offset: 768)
!120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !121, size: 64)
!121 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !105, line: 36, flags: DIFlagFwdDecl)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !104, file: !105, line: 70, baseType: !123, size: 64, offset: 832)
!123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !104, file: !105, line: 72, baseType: !41, size: 32, offset: 896)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !104, file: !105, line: 73, baseType: !41, size: 32, offset: 928)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !104, file: !105, line: 74, baseType: !127, size: 64, offset: 960)
!127 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !128, line: 152, baseType: !129)
!128 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "f6304b1a6dcfc6bee76e9a51043b5090")
!129 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !104, file: !105, line: 77, baseType: !42, size: 16, offset: 1024)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !104, file: !105, line: 78, baseType: !132, size: 8, offset: 1040)
!132 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !104, file: !105, line: 79, baseType: !134, size: 8, offset: 1048)
!134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 8, elements: !135)
!135 = !{!136}
!136 = !DISubrange(count: 1)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !104, file: !105, line: 81, baseType: !138, size: 64, offset: 1088)
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !139, size: 64)
!139 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !105, line: 43, baseType: null)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !104, file: !105, line: 89, baseType: !141, size: 64, offset: 1152)
!141 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !128, line: 153, baseType: !129)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !104, file: !105, line: 91, baseType: !143, size: 64, offset: 1216)
!143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !144, size: 64)
!144 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !105, line: 37, flags: DIFlagFwdDecl)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !104, file: !105, line: 92, baseType: !146, size: 64, offset: 1280)
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !105, line: 38, flags: DIFlagFwdDecl)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !104, file: !105, line: 93, baseType: !123, size: 64, offset: 1344)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !104, file: !105, line: 94, baseType: !43, size: 64, offset: 1408)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !104, file: !105, line: 95, baseType: !151, size: 64, offset: 1472)
!151 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !152, line: 46, baseType: !153)
!152 = !DIFile(filename: "/opt/llvm/lib/clang/16/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!153 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !104, file: !105, line: 96, baseType: !41, size: 32, offset: 1536)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !104, file: !105, line: 98, baseType: !9, size: 160, offset: 1568)
!156 = !DILocation(line: 36, column: 8, scope: !93)
!157 = !DILocalVariable(name: "buf", scope: !93, file: !2, line: 37, type: !44)
!158 = !DILocation(line: 37, column: 8, scope: !93)
!159 = !DILocation(line: 39, column: 7, scope: !160)
!160 = distinct !DILexicalBlock(scope: !93, file: !2, line: 39, column: 7)
!161 = !DILocation(line: 39, column: 16, scope: !160)
!162 = !DILocation(line: 39, column: 7, scope: !93)
!163 = !DILocation(line: 40, column: 14, scope: !164)
!164 = distinct !DILexicalBlock(scope: !160, file: !2, line: 39, column: 26)
!165 = !DILocation(line: 40, column: 8, scope: !164)
!166 = !DILocation(line: 40, column: 6, scope: !164)
!167 = !DILocation(line: 41, column: 7, scope: !168)
!168 = distinct !DILexicalBlock(scope: !164, file: !2, line: 41, column: 7)
!169 = !DILocation(line: 41, column: 10, scope: !168)
!170 = !DILocation(line: 41, column: 7, scope: !164)
!171 = !DILocation(line: 42, column: 34, scope: !172)
!172 = distinct !DILexicalBlock(scope: !168, file: !2, line: 41, column: 19)
!173 = !DILocation(line: 42, column: 4, scope: !172)
!174 = !DILocation(line: 43, column: 4, scope: !172)
!175 = !DILocation(line: 45, column: 13, scope: !176)
!176 = distinct !DILexicalBlock(scope: !164, file: !2, line: 45, column: 7)
!177 = !DILocation(line: 45, column: 7, scope: !176)
!178 = !DILocation(line: 45, column: 31, scope: !176)
!179 = !DILocation(line: 45, column: 7, scope: !164)
!180 = !DILocation(line: 46, column: 4, scope: !181)
!181 = distinct !DILexicalBlock(scope: !176, file: !2, line: 45, column: 38)
!182 = !DILocation(line: 47, column: 4, scope: !181)
!183 = !DILocation(line: 49, column: 15, scope: !164)
!184 = !DILocation(line: 49, column: 9, scope: !164)
!185 = !DILocation(line: 49, column: 7, scope: !164)
!186 = !DILocation(line: 50, column: 7, scope: !187)
!187 = distinct !DILexicalBlock(scope: !164, file: !2, line: 50, column: 7)
!188 = !DILocation(line: 50, column: 11, scope: !187)
!189 = !DILocation(line: 50, column: 7, scope: !164)
!190 = !DILocation(line: 51, column: 4, scope: !191)
!191 = distinct !DILexicalBlock(scope: !187, file: !2, line: 50, column: 18)
!192 = !DILocation(line: 52, column: 4, scope: !191)
!193 = !DILocation(line: 54, column: 12, scope: !194)
!194 = distinct !DILexicalBlock(scope: !164, file: !2, line: 54, column: 6)
!195 = !DILocation(line: 54, column: 6, scope: !194)
!196 = !DILocation(line: 54, column: 30, scope: !194)
!197 = !DILocation(line: 54, column: 6, scope: !164)
!198 = !DILocation(line: 55, column: 4, scope: !199)
!199 = distinct !DILexicalBlock(scope: !194, file: !2, line: 54, column: 37)
!200 = !DILocation(line: 56, column: 4, scope: !199)
!201 = !DILocation(line: 58, column: 25, scope: !164)
!202 = !DILocation(line: 58, column: 28, scope: !164)
!203 = !DILocation(line: 58, column: 18, scope: !164)
!204 = !DILocation(line: 58, column: 7, scope: !164)
!205 = !DILocation(line: 59, column: 12, scope: !206)
!206 = distinct !DILexicalBlock(scope: !164, file: !2, line: 59, column: 6)
!207 = !DILocation(line: 59, column: 17, scope: !206)
!208 = !DILocation(line: 59, column: 25, scope: !206)
!209 = !DILocation(line: 59, column: 6, scope: !206)
!210 = !DILocation(line: 59, column: 29, scope: !206)
!211 = !DILocation(line: 59, column: 6, scope: !164)
!212 = !DILocation(line: 60, column: 4, scope: !213)
!213 = distinct !DILexicalBlock(scope: !206, file: !2, line: 59, column: 36)
!214 = !DILocation(line: 61, column: 4, scope: !213)
!215 = !DILocation(line: 63, column: 3, scope: !164)
!216 = !DILocation(line: 63, column: 7, scope: !164)
!217 = !DILocation(line: 63, column: 12, scope: !164)
!218 = !DILocation(line: 64, column: 10, scope: !164)
!219 = !DILocation(line: 64, column: 3, scope: !164)
!220 = !DILocation(line: 65, column: 2, scope: !164)
!221 = !DILocation(line: 67, column: 9, scope: !93)
!222 = !DILocation(line: 67, column: 2, scope: !93)
!223 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 70, type: !224, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !21, retainedNodes: !59)
!224 = !DISubroutineType(types: !225)
!225 = !{!41, !41, !226}
!226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!227 = !DILocalVariable(name: "argc", arg: 1, scope: !223, file: !2, line: 70, type: !41)
!228 = !DILocation(line: 70, column: 14, scope: !223)
!229 = !DILocalVariable(name: "argv", arg: 2, scope: !223, file: !2, line: 70, type: !226)
!230 = !DILocation(line: 70, column: 26, scope: !223)
!231 = !DILocalVariable(name: "files", scope: !223, file: !2, line: 71, type: !232)
!232 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 2048, elements: !69)
!233 = !DILocation(line: 71, column: 6, scope: !223)
!234 = !DILocalVariable(name: "fc", scope: !223, file: !2, line: 72, type: !41)
!235 = !DILocation(line: 72, column: 6, scope: !223)
!236 = !DILocalVariable(name: "i", scope: !237, file: !2, line: 74, type: !41)
!237 = distinct !DILexicalBlock(scope: !223, file: !2, line: 74, column: 2)
!238 = !DILocation(line: 74, column: 12, scope: !237)
!239 = !DILocation(line: 74, column: 8, scope: !237)
!240 = !DILocation(line: 74, column: 19, scope: !241)
!241 = distinct !DILexicalBlock(scope: !237, file: !2, line: 74, column: 2)
!242 = !DILocation(line: 74, column: 23, scope: !241)
!243 = !DILocation(line: 74, column: 21, scope: !241)
!244 = !DILocation(line: 74, column: 2, scope: !237)
!245 = !DILocation(line: 75, column: 8, scope: !246)
!246 = distinct !DILexicalBlock(scope: !247, file: !2, line: 75, column: 8)
!247 = distinct !DILexicalBlock(scope: !241, file: !2, line: 74, column: 36)
!248 = !DILocation(line: 75, column: 13, scope: !246)
!249 = !DILocation(line: 75, column: 19, scope: !246)
!250 = !DILocation(line: 75, column: 8, scope: !247)
!251 = !DILocation(line: 77, column: 16, scope: !252)
!252 = distinct !DILexicalBlock(scope: !246, file: !2, line: 75, column: 28)
!253 = !DILocation(line: 77, column: 10, scope: !252)
!254 = !DILocation(line: 77, column: 4, scope: !252)
!255 = !DILocation(line: 77, column: 14, scope: !252)
!256 = !DILocation(line: 78, column: 7, scope: !252)
!257 = !DILocation(line: 79, column: 3, scope: !252)
!258 = !DILocation(line: 80, column: 2, scope: !247)
!259 = !DILocation(line: 74, column: 31, scope: !241)
!260 = !DILocation(line: 74, column: 2, scope: !241)
!261 = distinct !{!261, !244, !262, !80}
!262 = !DILocation(line: 80, column: 2, scope: !237)
!263 = !DILocalVariable(name: "i", scope: !264, file: !2, line: 82, type: !41)
!264 = distinct !DILexicalBlock(scope: !223, file: !2, line: 82, column: 2)
!265 = !DILocation(line: 82, column: 12, scope: !264)
!266 = !DILocation(line: 82, column: 8, scope: !264)
!267 = !DILocation(line: 82, column: 19, scope: !268)
!268 = distinct !DILexicalBlock(scope: !264, file: !2, line: 82, column: 2)
!269 = !DILocation(line: 82, column: 23, scope: !268)
!270 = !DILocation(line: 82, column: 21, scope: !268)
!271 = !DILocation(line: 82, column: 2, scope: !264)
!272 = !DILocalVariable(name: "buf", scope: !273, file: !2, line: 83, type: !44)
!273 = distinct !DILexicalBlock(scope: !268, file: !2, line: 82, column: 34)
!274 = !DILocation(line: 83, column: 9, scope: !273)
!275 = !DILocation(line: 83, column: 24, scope: !273)
!276 = !DILocation(line: 83, column: 35, scope: !273)
!277 = !DILocation(line: 83, column: 29, scope: !273)
!278 = !DILocation(line: 83, column: 15, scope: !273)
!279 = !DILocation(line: 84, column: 11, scope: !273)
!280 = !DILocation(line: 84, column: 22, scope: !273)
!281 = !DILocation(line: 84, column: 16, scope: !273)
!282 = !DILocation(line: 84, column: 27, scope: !273)
!283 = !DILocation(line: 84, column: 3, scope: !273)
!284 = !DILocation(line: 85, column: 8, scope: !273)
!285 = !DILocation(line: 85, column: 3, scope: !273)
!286 = !DILocation(line: 86, column: 2, scope: !273)
!287 = !DILocation(line: 82, column: 29, scope: !268)
!288 = !DILocation(line: 82, column: 2, scope: !268)
!289 = distinct !{!289, !271, !290, !80}
!290 = !DILocation(line: 86, column: 2, scope: !264)
!291 = !DILocation(line: 87, column: 1, scope: !223)
