; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_17-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_17-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @loop(i32 noundef %a) #0 !dbg !10 {
entry:
  %a.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %output = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %a, ptr %a.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %a.addr, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata ptr %result, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 0, ptr %result, align 4, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %output, metadata !20, metadata !DIExpression()), !dbg !21
  store i32 0, ptr %output, align 4, !dbg !21
  call void @llvm.dbg.declare(metadata ptr %i, metadata !22, metadata !DIExpression()), !dbg !24
  store i32 1, ptr %i, align 4, !dbg !24
  br label %for.cond, !dbg !25

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !26
  %1 = load i32, ptr %a.addr, align 4, !dbg !28
  %cmp = icmp sle i32 %0, %1, !dbg !29
  br i1 %cmp, label %for.body, label %for.end, !dbg !30

for.body:                                         ; preds = %for.cond
  %2 = load i32, ptr %i, align 4, !dbg !31
  %rem = srem i32 %2, 2, !dbg !34
  %cmp1 = icmp eq i32 %rem, 0, !dbg !35
  br i1 %cmp1, label %if.then, label %if.end, !dbg !36

if.then:                                          ; preds = %for.body
  %3 = load i32, ptr %output, align 4, !dbg !37
  %inc = add nsw i32 %3, 1, !dbg !37
  store i32 %inc, ptr %output, align 4, !dbg !37
  br label %if.end, !dbg !39

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !40

for.inc:                                          ; preds = %if.end
  %4 = load i32, ptr %i, align 4, !dbg !41
  %inc2 = add nsw i32 %4, 1, !dbg !41
  store i32 %inc2, ptr %i, align 4, !dbg !41
  br label %for.cond, !dbg !42, !llvm.loop !43

for.end:                                          ; preds = %for.cond
  %5 = load i32, ptr %output, align 4, !dbg !46
  ret i32 %5, !dbg !47
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !48 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %output = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %a, metadata !51, metadata !DIExpression()), !dbg !52
  call void @llvm.dbg.declare(metadata ptr %b, metadata !53, metadata !DIExpression()), !dbg !54
  %0 = load i32, ptr %a, align 4, !dbg !55
  store i32 %0, ptr %b, align 4, !dbg !54
  call void @llvm.dbg.declare(metadata ptr %output, metadata !56, metadata !DIExpression()), !dbg !57
  store i32 0, ptr %output, align 4, !dbg !57
  %1 = load i32, ptr %a, align 4, !dbg !58
  %cmp = icmp sgt i32 %1, 0, !dbg !60
  br i1 %cmp, label %if.then, label %if.else, !dbg !61

if.then:                                          ; preds = %entry
  %2 = load i32, ptr %a, align 4, !dbg !62
  %call = call i32 @loop(i32 noundef %2), !dbg !64
  store i32 %call, ptr %output, align 4, !dbg !65
  %3 = load i32, ptr %output, align 4, !dbg !66
  %4 = load i32, ptr %b, align 4, !dbg !67
  %div = sdiv i32 %4, 2, !dbg !68
  %cmp1 = icmp eq i32 %3, %div, !dbg !69
  call void @svf_assert(i1 noundef zeroext %cmp1), !dbg !70
  br label %if.end, !dbg !71

if.else:                                          ; preds = %entry
  %5 = load i32, ptr %output, align 4, !dbg !72
  %cmp2 = icmp eq i32 %5, 0, !dbg !74
  call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !75
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, ptr %retval, align 4, !dbg !76
  ret i32 %6, !dbg !76
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_17-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "19954cf1789cf46b29d75b78434d7132")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "loop", scope: !11, file: !11, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_17-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "19954cf1789cf46b29d75b78434d7132")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !11, line: 5, type: !14)
!17 = !DILocation(line: 5, column: 14, scope: !10)
!18 = !DILocalVariable(name: "result", scope: !10, file: !11, line: 6, type: !14)
!19 = !DILocation(line: 6, column: 9, scope: !10)
!20 = !DILocalVariable(name: "output", scope: !10, file: !11, line: 7, type: !14)
!21 = !DILocation(line: 7, column: 9, scope: !10)
!22 = !DILocalVariable(name: "i", scope: !23, file: !11, line: 8, type: !14)
!23 = distinct !DILexicalBlock(scope: !10, file: !11, line: 8, column: 5)
!24 = !DILocation(line: 8, column: 13, scope: !23)
!25 = !DILocation(line: 8, column: 9, scope: !23)
!26 = !DILocation(line: 8, column: 20, scope: !27)
!27 = distinct !DILexicalBlock(scope: !23, file: !11, line: 8, column: 5)
!28 = !DILocation(line: 8, column: 25, scope: !27)
!29 = !DILocation(line: 8, column: 22, scope: !27)
!30 = !DILocation(line: 8, column: 5, scope: !23)
!31 = !DILocation(line: 9, column: 12, scope: !32)
!32 = distinct !DILexicalBlock(scope: !33, file: !11, line: 9, column: 12)
!33 = distinct !DILexicalBlock(scope: !27, file: !11, line: 8, column: 33)
!34 = !DILocation(line: 9, column: 14, scope: !32)
!35 = !DILocation(line: 9, column: 18, scope: !32)
!36 = !DILocation(line: 9, column: 12, scope: !33)
!37 = !DILocation(line: 10, column: 19, scope: !38)
!38 = distinct !DILexicalBlock(scope: !32, file: !11, line: 9, column: 24)
!39 = !DILocation(line: 11, column: 9, scope: !38)
!40 = !DILocation(line: 12, column: 5, scope: !33)
!41 = !DILocation(line: 8, column: 29, scope: !27)
!42 = !DILocation(line: 8, column: 5, scope: !27)
!43 = distinct !{!43, !30, !44, !45}
!44 = !DILocation(line: 12, column: 5, scope: !23)
!45 = !{!"llvm.loop.mustprogress"}
!46 = !DILocation(line: 13, column: 12, scope: !10)
!47 = !DILocation(line: 13, column: 5, scope: !10)
!48 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 16, type: !49, scopeLine: 16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!49 = !DISubroutineType(types: !50)
!50 = !{!14}
!51 = !DILocalVariable(name: "a", scope: !48, file: !11, line: 17, type: !14)
!52 = !DILocation(line: 17, column: 9, scope: !48)
!53 = !DILocalVariable(name: "b", scope: !48, file: !11, line: 18, type: !14)
!54 = !DILocation(line: 18, column: 9, scope: !48)
!55 = !DILocation(line: 18, column: 13, scope: !48)
!56 = !DILocalVariable(name: "output", scope: !48, file: !11, line: 19, type: !14)
!57 = !DILocation(line: 19, column: 9, scope: !48)
!58 = !DILocation(line: 20, column: 8, scope: !59)
!59 = distinct !DILexicalBlock(scope: !48, file: !11, line: 20, column: 8)
!60 = !DILocation(line: 20, column: 10, scope: !59)
!61 = !DILocation(line: 20, column: 8, scope: !48)
!62 = !DILocation(line: 21, column: 23, scope: !63)
!63 = distinct !DILexicalBlock(scope: !59, file: !11, line: 20, column: 15)
!64 = !DILocation(line: 21, column: 18, scope: !63)
!65 = !DILocation(line: 21, column: 16, scope: !63)
!66 = !DILocation(line: 22, column: 20, scope: !63)
!67 = !DILocation(line: 22, column: 30, scope: !63)
!68 = !DILocation(line: 22, column: 31, scope: !63)
!69 = !DILocation(line: 22, column: 27, scope: !63)
!70 = !DILocation(line: 22, column: 9, scope: !63)
!71 = !DILocation(line: 23, column: 5, scope: !63)
!72 = !DILocation(line: 25, column: 20, scope: !73)
!73 = distinct !DILexicalBlock(scope: !59, file: !11, line: 24, column: 10)
!74 = !DILocation(line: 25, column: 27, scope: !73)
!75 = !DILocation(line: 25, column: 9, scope: !73)
!76 = !DILocation(line: 27, column: 1, scope: !48)
