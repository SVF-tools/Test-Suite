; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2021-39602-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2021-39602-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.session = type { [1024 x i8] }

@.str = private unnamed_addr constant [256 x i8] c"dQTzRwmNuJFoD9pFIwx97jfTRv1rAbvZ0Wcz6FdQU6uBcM6TreKoHvS0418qcGBLSqRCK4o7K0VxcfZ8btrUiIGMYbvdFdXueAvE3DrvmwaoFb06t3ZkpNw9HrSB7xCsJmdo86ZhrrCMlIx0m7im6zwBM3qnjds3OW6seTegTihzANyeZQmH1ojYIb7nZJEBJkFu7Ov8IBifYUFjoZNVdaTEmD8CnXnthnDYB45ssxTkcsPMbF2oLycwepI0jmd\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Create directory operation failed.\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Permission denied.\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"\22%s\\%s\22 created\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %sess = alloca %struct.session, align 1
  %arg = getelementptr inbounds %struct.session, ptr %sess, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], ptr %arg, i64 0, i64 0
  %call = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef @.str) #5
  call void @do_mkd(ptr noundef %sess)
  ret i32 0
}

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_mkd(ptr noundef %sess) #0 {
entry:
  %sess.addr = alloca ptr, align 8
  %buf = alloca [1024 x i8], align 16
  store ptr %sess, ptr %sess.addr, align 8
  %0 = load ptr, ptr %sess.addr, align 8
  %arg = getelementptr inbounds %struct.session, ptr %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], ptr %arg, i64 0, i64 0
  %call = call i32 @mkdir(ptr noundef %arraydecay, i32 noundef 493) #5
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %call1 = call ptr @__errno_location() #6
  %1 = load i32, ptr %call1, align 4
  %cmp2 = icmp eq i32 %1, 17
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %call4 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef @.str.2)
  br label %if.end

if.else:                                          ; preds = %if.then
  %call5 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef @.str.3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end16

if.end6:                                          ; preds = %entry
  call void @llvm.memset.p0.i64(ptr align 16 %buf, i8 0, i64 1024, i1 false)
  %arraydecay7 = getelementptr inbounds [1024 x i8], ptr %buf, i64 0, i64 0
  %call8 = call ptr @getcwd(ptr noundef %arraydecay7, i64 noundef 1024) #5
  %cmp9 = icmp ne ptr %call8, null
  br i1 %cmp9, label %if.then10, label %if.end16

if.then10:                                        ; preds = %if.end6
  %arraydecay11 = getelementptr inbounds [1024 x i8], ptr %buf, i64 0, i64 0
  %arraydecay12 = getelementptr inbounds [1024 x i8], ptr %buf, i64 0, i64 0
  %2 = load ptr, ptr %sess.addr, align 8
  %arg13 = getelementptr inbounds %struct.session, ptr %2, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [1024 x i8], ptr %arg13, i64 0, i64 0
  %call15 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef %arraydecay11, ptr noundef @.str.4, ptr noundef %arraydecay12, ptr noundef %arraydecay14) #5
  br label %if.end16

if.end16:                                         ; preds = %if.then10, %if.end6, %if.end
  ret void
}

; Function Attrs: nounwind
declare i32 @mkdir(ptr noundef, i32 noundef) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__errno_location() #2

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind
declare ptr @getcwd(ptr noundef, i64 noundef) #1

; Function Attrs: nounwind
declare i32 @sprintf(ptr noundef, ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind }
attributes #6 = { nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
