; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_47-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_47-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@count = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @isPalindrome(ptr noundef %word, i32 noundef %index) #0 !dbg !15 {
entry:
  %retval = alloca i1, align 1
  %word.addr = alloca ptr, align 8
  %index.addr = alloca i32, align 4
  %length = alloca i32, align 4
  store ptr %word, ptr %word.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %word.addr, metadata !22, metadata !DIExpression()), !dbg !23
  store i32 %index, ptr %index.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %index.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr @count, align 4, !dbg !26
  %inc = add nsw i32 %0, 1, !dbg !26
  store i32 %inc, ptr @count, align 4, !dbg !26
  call void @llvm.dbg.declare(metadata ptr %length, metadata !27, metadata !DIExpression()), !dbg !28
  %1 = load ptr, ptr %word.addr, align 8, !dbg !29
  %call = call i64 @strlen(ptr noundef %1) #4, !dbg !30
  %2 = load i32, ptr %index.addr, align 4, !dbg !31
  %add = add nsw i32 %2, 1, !dbg !32
  %conv = sext i32 %add to i64, !dbg !33
  %sub = sub i64 %call, %conv, !dbg !34
  %conv1 = trunc i64 %sub to i32, !dbg !30
  store i32 %conv1, ptr %length, align 4, !dbg !28
  %3 = load ptr, ptr %word.addr, align 8, !dbg !35
  %4 = load i32, ptr %index.addr, align 4, !dbg !37
  %idxprom = sext i32 %4 to i64, !dbg !35
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 %idxprom, !dbg !35
  %5 = load i8, ptr %arrayidx, align 1, !dbg !35
  %conv2 = sext i8 %5 to i32, !dbg !35
  %6 = load ptr, ptr %word.addr, align 8, !dbg !38
  %7 = load i32, ptr %length, align 4, !dbg !39
  %idxprom3 = sext i32 %7 to i64, !dbg !38
  %arrayidx4 = getelementptr inbounds i8, ptr %6, i64 %idxprom3, !dbg !38
  %8 = load i8, ptr %arrayidx4, align 1, !dbg !38
  %conv5 = sext i8 %8 to i32, !dbg !38
  %cmp = icmp eq i32 %conv2, %conv5, !dbg !40
  br i1 %cmp, label %if.then, label %if.else, !dbg !41

if.then:                                          ; preds = %entry
  %9 = load i32, ptr %index.addr, align 4, !dbg !42
  %add7 = add nsw i32 %9, 1, !dbg !45
  %10 = load i32, ptr %length, align 4, !dbg !46
  %cmp8 = icmp eq i32 %add7, %10, !dbg !47
  br i1 %cmp8, label %if.then12, label %lor.lhs.false, !dbg !48

lor.lhs.false:                                    ; preds = %if.then
  %11 = load i32, ptr %index.addr, align 4, !dbg !49
  %12 = load i32, ptr %length, align 4, !dbg !50
  %cmp10 = icmp eq i32 %11, %12, !dbg !51
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !52

if.then12:                                        ; preds = %lor.lhs.false, %if.then
  store i1 true, ptr %retval, align 1, !dbg !53
  br label %if.end15, !dbg !53

if.end:                                           ; preds = %lor.lhs.false
  %13 = load ptr, ptr %word.addr, align 8, !dbg !55
  %14 = load i32, ptr %index.addr, align 4, !dbg !56
  %add13 = add nsw i32 %14, 1, !dbg !57
  %call14 = call zeroext i1 @isPalindrome(ptr noundef %13, i32 noundef %add13), !dbg !58
  br label %if.end15, !dbg !59

if.else:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1, !dbg !60
  br label %if.end15, !dbg !60

if.end15:                                         ; preds = %if.else, %if.end, %if.then12
  %15 = load i1, ptr %retval, align 1, !dbg !62
  ret i1 %15, !dbg !62
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !63 {
entry:
  %retval = alloca i32, align 4
  %word = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %word, metadata !66, metadata !DIExpression()), !dbg !67
  %0 = load ptr, ptr %word, align 8, !dbg !68
  %call = call i64 @strlen(ptr noundef %0) #4, !dbg !70
  %cmp = icmp ugt i64 %call, 0, !dbg !71
  br i1 %cmp, label %if.then, label %if.end13, !dbg !72

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %word, align 8, !dbg !73
  %call1 = call zeroext i1 @isPalindrome(ptr noundef %1, i32 noundef 0), !dbg !75
  %2 = load ptr, ptr %word, align 8, !dbg !76
  %call2 = call i64 @strlen(ptr noundef %2) #4, !dbg !78
  %rem = urem i64 %call2, 2, !dbg !79
  %cmp3 = icmp eq i64 %rem, 0, !dbg !80
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !81

if.then4:                                         ; preds = %if.then
  %3 = load i32, ptr @count, align 4, !dbg !82
  %conv = sext i32 %3 to i64, !dbg !82
  %4 = load ptr, ptr %word, align 8, !dbg !84
  %call5 = call i64 @strlen(ptr noundef %4) #4, !dbg !85
  %div = udiv i64 %call5, 2, !dbg !86
  %cmp6 = icmp eq i64 %conv, %div, !dbg !87
  call void @svf_assert(i1 noundef zeroext %cmp6), !dbg !88
  br label %if.end, !dbg !89

if.else:                                          ; preds = %if.then
  %5 = load i32, ptr @count, align 4, !dbg !90
  %conv8 = sext i32 %5 to i64, !dbg !90
  %6 = load ptr, ptr %word, align 8, !dbg !92
  %call9 = call i64 @strlen(ptr noundef %6) #4, !dbg !93
  %add = add i64 %call9, 1, !dbg !94
  %div10 = udiv i64 %add, 2, !dbg !95
  %cmp11 = icmp eq i64 %conv8, %div10, !dbg !96
  call void @svf_assert(i1 noundef zeroext %cmp11), !dbg !97
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end13, !dbg !98

if.end13:                                         ; preds = %if.end, %entry
  %7 = load i32, ptr %retval, align 4, !dbg !99
  ret i32 %7, !dbg !99
}

declare void @svf_assert(i1 noundef zeroext) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind willreturn memory(read) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "count", scope: !2, file: !5, line: 8, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_47-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "eb13a52284cb354bd0e7e49e54c2f100")
!4 = !{!0}
!5 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_47-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "eb13a52284cb354bd0e7e49e54c2f100")
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 8, !"PIC Level", i32 2}
!11 = !{i32 7, !"PIE Level", i32 2}
!12 = !{i32 7, !"uwtable", i32 2}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 16.0.0"}
!15 = distinct !DISubprogram(name: "isPalindrome", scope: !5, file: !5, line: 10, type: !16, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !21)
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !19, !6}
!18 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!20 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!21 = !{}
!22 = !DILocalVariable(name: "word", arg: 1, scope: !15, file: !5, line: 10, type: !19)
!23 = !DILocation(line: 10, column: 25, scope: !15)
!24 = !DILocalVariable(name: "index", arg: 2, scope: !15, file: !5, line: 10, type: !6)
!25 = !DILocation(line: 10, column: 35, scope: !15)
!26 = !DILocation(line: 11, column: 10, scope: !15)
!27 = !DILocalVariable(name: "length", scope: !15, file: !5, line: 12, type: !6)
!28 = !DILocation(line: 12, column: 9, scope: !15)
!29 = !DILocation(line: 12, column: 25, scope: !15)
!30 = !DILocation(line: 12, column: 18, scope: !15)
!31 = !DILocation(line: 12, column: 34, scope: !15)
!32 = !DILocation(line: 12, column: 40, scope: !15)
!33 = !DILocation(line: 12, column: 33, scope: !15)
!34 = !DILocation(line: 12, column: 31, scope: !15)
!35 = !DILocation(line: 13, column: 9, scope: !36)
!36 = distinct !DILexicalBlock(scope: !15, file: !5, line: 13, column: 9)
!37 = !DILocation(line: 13, column: 14, scope: !36)
!38 = !DILocation(line: 13, column: 24, scope: !36)
!39 = !DILocation(line: 13, column: 29, scope: !36)
!40 = !DILocation(line: 13, column: 21, scope: !36)
!41 = !DILocation(line: 13, column: 9, scope: !15)
!42 = !DILocation(line: 14, column: 13, scope: !43)
!43 = distinct !DILexicalBlock(scope: !44, file: !5, line: 14, column: 13)
!44 = distinct !DILexicalBlock(scope: !36, file: !5, line: 13, column: 38)
!45 = !DILocation(line: 14, column: 19, scope: !43)
!46 = !DILocation(line: 14, column: 26, scope: !43)
!47 = !DILocation(line: 14, column: 23, scope: !43)
!48 = !DILocation(line: 14, column: 33, scope: !43)
!49 = !DILocation(line: 14, column: 36, scope: !43)
!50 = !DILocation(line: 14, column: 45, scope: !43)
!51 = !DILocation(line: 14, column: 42, scope: !43)
!52 = !DILocation(line: 14, column: 13, scope: !44)
!53 = !DILocation(line: 15, column: 13, scope: !54)
!54 = distinct !DILexicalBlock(scope: !43, file: !5, line: 14, column: 53)
!55 = !DILocation(line: 17, column: 22, scope: !44)
!56 = !DILocation(line: 17, column: 28, scope: !44)
!57 = !DILocation(line: 17, column: 34, scope: !44)
!58 = !DILocation(line: 17, column: 9, scope: !44)
!59 = !DILocation(line: 18, column: 5, scope: !44)
!60 = !DILocation(line: 20, column: 9, scope: !61)
!61 = distinct !DILexicalBlock(scope: !36, file: !5, line: 19, column: 10)
!62 = !DILocation(line: 22, column: 1, scope: !15)
!63 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 24, type: !64, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !21)
!64 = !DISubroutineType(types: !65)
!65 = !{!6}
!66 = !DILocalVariable(name: "word", scope: !63, file: !5, line: 25, type: !19)
!67 = !DILocation(line: 25, column: 11, scope: !63)
!68 = !DILocation(line: 26, column: 15, scope: !69)
!69 = distinct !DILexicalBlock(scope: !63, file: !5, line: 26, column: 8)
!70 = !DILocation(line: 26, column: 8, scope: !69)
!71 = !DILocation(line: 26, column: 21, scope: !69)
!72 = !DILocation(line: 26, column: 8, scope: !63)
!73 = !DILocation(line: 27, column: 22, scope: !74)
!74 = distinct !DILexicalBlock(scope: !69, file: !5, line: 26, column: 26)
!75 = !DILocation(line: 27, column: 9, scope: !74)
!76 = !DILocation(line: 28, column: 19, scope: !77)
!77 = distinct !DILexicalBlock(scope: !74, file: !5, line: 28, column: 12)
!78 = !DILocation(line: 28, column: 12, scope: !77)
!79 = !DILocation(line: 28, column: 25, scope: !77)
!80 = !DILocation(line: 28, column: 29, scope: !77)
!81 = !DILocation(line: 28, column: 12, scope: !74)
!82 = !DILocation(line: 29, column: 24, scope: !83)
!83 = distinct !DILexicalBlock(scope: !77, file: !5, line: 28, column: 35)
!84 = !DILocation(line: 29, column: 40, scope: !83)
!85 = !DILocation(line: 29, column: 33, scope: !83)
!86 = !DILocation(line: 29, column: 45, scope: !83)
!87 = !DILocation(line: 29, column: 30, scope: !83)
!88 = !DILocation(line: 29, column: 13, scope: !83)
!89 = !DILocation(line: 30, column: 9, scope: !83)
!90 = !DILocation(line: 32, column: 24, scope: !91)
!91 = distinct !DILexicalBlock(scope: !77, file: !5, line: 31, column: 14)
!92 = !DILocation(line: 32, column: 41, scope: !91)
!93 = !DILocation(line: 32, column: 34, scope: !91)
!94 = !DILocation(line: 32, column: 47, scope: !91)
!95 = !DILocation(line: 32, column: 51, scope: !91)
!96 = !DILocation(line: 32, column: 30, scope: !91)
!97 = !DILocation(line: 32, column: 13, scope: !91)
!98 = !DILocation(line: 34, column: 5, scope: !74)
!99 = !DILocation(line: 35, column: 1, scope: !63)
