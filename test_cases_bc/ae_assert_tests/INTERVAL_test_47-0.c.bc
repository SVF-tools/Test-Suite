; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_47-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_47-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@count = dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @isPalindrome(ptr noundef %word, i32 noundef %index) #0 {
entry:
  %retval = alloca i1, align 1
  %word.addr = alloca ptr, align 8
  %index.addr = alloca i32, align 4
  %length = alloca i32, align 4
  store ptr %word, ptr %word.addr, align 8
  store i32 %index, ptr %index.addr, align 4
  %0 = load i32, ptr @count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, ptr @count, align 4
  %1 = load ptr, ptr %word.addr, align 8
  %call = call i64 @strlen(ptr noundef %1) #3
  %2 = load i32, ptr %index.addr, align 4
  %add = add nsw i32 %2, 1
  %conv = sext i32 %add to i64
  %sub = sub i64 %call, %conv
  %conv1 = trunc i64 %sub to i32
  store i32 %conv1, ptr %length, align 4
  %3 = load ptr, ptr %word.addr, align 8
  %4 = load i32, ptr %index.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 %idxprom
  %5 = load i8, ptr %arrayidx, align 1
  %conv2 = sext i8 %5 to i32
  %6 = load ptr, ptr %word.addr, align 8
  %7 = load i32, ptr %length, align 4
  %idxprom3 = sext i32 %7 to i64
  %arrayidx4 = getelementptr inbounds i8, ptr %6, i64 %idxprom3
  %8 = load i8, ptr %arrayidx4, align 1
  %conv5 = sext i8 %8 to i32
  %cmp = icmp eq i32 %conv2, %conv5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %9 = load i32, ptr %index.addr, align 4
  %add7 = add nsw i32 %9, 1
  %10 = load i32, ptr %length, align 4
  %cmp8 = icmp eq i32 %add7, %10
  br i1 %cmp8, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %11 = load i32, ptr %index.addr, align 4
  %12 = load i32, ptr %length, align 4
  %cmp10 = icmp eq i32 %11, %12
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %lor.lhs.false, %if.then
  store i1 true, ptr %retval, align 1
  br label %if.end15

if.end:                                           ; preds = %lor.lhs.false
  %13 = load ptr, ptr %word.addr, align 8
  %14 = load i32, ptr %index.addr, align 4
  %add13 = add nsw i32 %14, 1
  %call14 = call zeroext i1 @isPalindrome(ptr noundef %13, i32 noundef %add13)
  br label %if.end15

if.else:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.end, %if.then12
  %15 = load i1, ptr %retval, align 1
  ret i1 %15
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %word = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  %0 = load ptr, ptr %word, align 8
  %call = call i64 @strlen(ptr noundef %0) #3
  %cmp = icmp ugt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %word, align 8
  %call1 = call zeroext i1 @isPalindrome(ptr noundef %1, i32 noundef 0)
  %2 = load ptr, ptr %word, align 8
  %call2 = call i64 @strlen(ptr noundef %2) #3
  %rem = urem i64 %call2, 2
  %cmp3 = icmp eq i64 %rem, 0
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %3 = load i32, ptr @count, align 4
  %conv = sext i32 %3 to i64
  %4 = load ptr, ptr %word, align 8
  %call5 = call i64 @strlen(ptr noundef %4) #3
  %div = udiv i64 %call5, 2
  %cmp6 = icmp eq i64 %conv, %div
  call void @svf_assert(i1 noundef zeroext %cmp6)
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = load i32, ptr @count, align 4
  %conv8 = sext i32 %5 to i64
  %6 = load ptr, ptr %word, align 8
  %call9 = call i64 @strlen(ptr noundef %6) #3
  %add = add i64 %call9, 1
  %div10 = udiv i64 %add, 2
  %cmp11 = icmp eq i64 %conv8, %div10
  call void @svf_assert(i1 noundef zeroext %cmp11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  %7 = load i32, ptr %retval, align 4
  ret i32 %7
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
