; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_39-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_39-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@count = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fib(i32 noundef %i) #0 !dbg !15 {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  store i32 %i, ptr %i.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %i.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %0 = load i32, ptr @count, align 4, !dbg !21
  %inc = add nsw i32 %0, 1, !dbg !21
  store i32 %inc, ptr @count, align 4, !dbg !21
  %1 = load i32, ptr %i.addr, align 4, !dbg !22
  %cmp = icmp eq i32 %1, 0, !dbg !24
  br i1 %cmp, label %if.then, label %if.end, !dbg !25

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4, !dbg !26
  br label %return, !dbg !26

if.end:                                           ; preds = %entry
  %2 = load i32, ptr %i.addr, align 4, !dbg !28
  %cmp1 = icmp eq i32 %2, 1, !dbg !30
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !31

if.then2:                                         ; preds = %if.end
  store i32 1, ptr %retval, align 4, !dbg !32
  br label %return, !dbg !32

if.end3:                                          ; preds = %if.end
  %3 = load i32, ptr %i.addr, align 4, !dbg !34
  %sub = sub nsw i32 %3, 1, !dbg !35
  %call = call i32 @fib(i32 noundef %sub), !dbg !36
  %4 = load i32, ptr %i.addr, align 4, !dbg !37
  %sub4 = sub nsw i32 %4, 2, !dbg !38
  %call5 = call i32 @fib(i32 noundef %sub4), !dbg !39
  %add = add nsw i32 %call, %call5, !dbg !40
  store i32 %add, ptr %retval, align 4, !dbg !41
  br label %return, !dbg !41

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %5 = load i32, ptr %retval, align 4, !dbg !42
  ret i32 %5, !dbg !42
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !43 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %i, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, ptr %i, align 4, !dbg !48
  %cmp = icmp sge i32 %0, 0, !dbg !50
  br i1 %cmp, label %if.then, label %if.end, !dbg !51

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %i, align 4, !dbg !52
  %call = call i32 @fib(i32 noundef %1), !dbg !54
  %2 = load i32, ptr @count, align 4, !dbg !55
  %3 = load i32, ptr %i, align 4, !dbg !56
  %add = add nsw i32 %3, 1, !dbg !57
  %call1 = call i32 @fib(i32 noundef %add), !dbg !58
  %mul = mul nsw i32 2, %call1, !dbg !59
  %sub = sub nsw i32 %mul, 1, !dbg !60
  %cmp2 = icmp eq i32 %2, %sub, !dbg !61
  call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !62
  br label %if.end, !dbg !63

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, ptr %retval, align 4, !dbg !64
  ret i32 %4, !dbg !64
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "count", scope: !2, file: !5, line: 8, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_39-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "0c23149e97666d42c0914df349186879")
!4 = !{!0}
!5 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_39-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "0c23149e97666d42c0914df349186879")
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 8, !"PIC Level", i32 2}
!11 = !{i32 7, !"PIE Level", i32 2}
!12 = !{i32 7, !"uwtable", i32 2}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 16.0.0"}
!15 = distinct !DISubprogram(name: "fib", scope: !5, file: !5, line: 10, type: !16, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{!6, !6}
!18 = !{}
!19 = !DILocalVariable(name: "i", arg: 1, scope: !15, file: !5, line: 10, type: !6)
!20 = !DILocation(line: 10, column: 13, scope: !15)
!21 = !DILocation(line: 11, column: 10, scope: !15)
!22 = !DILocation(line: 12, column: 8, scope: !23)
!23 = distinct !DILexicalBlock(scope: !15, file: !5, line: 12, column: 8)
!24 = !DILocation(line: 12, column: 10, scope: !23)
!25 = !DILocation(line: 12, column: 8, scope: !15)
!26 = !DILocation(line: 13, column: 9, scope: !27)
!27 = distinct !DILexicalBlock(scope: !23, file: !5, line: 12, column: 16)
!28 = !DILocation(line: 15, column: 8, scope: !29)
!29 = distinct !DILexicalBlock(scope: !15, file: !5, line: 15, column: 8)
!30 = !DILocation(line: 15, column: 10, scope: !29)
!31 = !DILocation(line: 15, column: 8, scope: !15)
!32 = !DILocation(line: 16, column: 9, scope: !33)
!33 = distinct !DILexicalBlock(scope: !29, file: !5, line: 15, column: 16)
!34 = !DILocation(line: 18, column: 16, scope: !15)
!35 = !DILocation(line: 18, column: 18, scope: !15)
!36 = !DILocation(line: 18, column: 12, scope: !15)
!37 = !DILocation(line: 18, column: 29, scope: !15)
!38 = !DILocation(line: 18, column: 31, scope: !15)
!39 = !DILocation(line: 18, column: 25, scope: !15)
!40 = !DILocation(line: 18, column: 23, scope: !15)
!41 = !DILocation(line: 18, column: 5, scope: !15)
!42 = !DILocation(line: 19, column: 1, scope: !15)
!43 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 21, type: !44, scopeLine: 21, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !18)
!44 = !DISubroutineType(types: !45)
!45 = !{!6}
!46 = !DILocalVariable(name: "i", scope: !43, file: !5, line: 22, type: !6)
!47 = !DILocation(line: 22, column: 9, scope: !43)
!48 = !DILocation(line: 23, column: 8, scope: !49)
!49 = distinct !DILexicalBlock(scope: !43, file: !5, line: 23, column: 8)
!50 = !DILocation(line: 23, column: 10, scope: !49)
!51 = !DILocation(line: 23, column: 8, scope: !43)
!52 = !DILocation(line: 24, column: 13, scope: !53)
!53 = distinct !DILexicalBlock(scope: !49, file: !5, line: 23, column: 16)
!54 = !DILocation(line: 24, column: 9, scope: !53)
!55 = !DILocation(line: 25, column: 20, scope: !53)
!56 = !DILocation(line: 25, column: 37, scope: !53)
!57 = !DILocation(line: 25, column: 39, scope: !53)
!58 = !DILocation(line: 25, column: 33, scope: !53)
!59 = !DILocation(line: 25, column: 31, scope: !53)
!60 = !DILocation(line: 25, column: 44, scope: !53)
!61 = !DILocation(line: 25, column: 26, scope: !53)
!62 = !DILocation(line: 25, column: 9, scope: !53)
!63 = !DILocation(line: 26, column: 5, scope: !53)
!64 = !DILocation(line: 27, column: 1, scope: !43)
