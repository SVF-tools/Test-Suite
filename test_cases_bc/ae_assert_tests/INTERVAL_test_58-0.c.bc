; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_58-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/INTERVAL_test_58-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [12 x i8] c"%d is even\0A\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [11 x i8] c"%d is odd\0A\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !28 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %a, !33, !DIExpression(), !34)
    #dbg_declare(ptr %b, !35, !DIExpression(), !36)
  %0 = load i32, ptr %a, align 4, !dbg !37
  %cmp = icmp sge i32 %0, 0, !dbg !39
  br i1 %cmp, label %if.then, label %if.end7, !dbg !39

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !40

do.body:                                          ; preds = %do.cond, %if.then
  %1 = load i32, ptr %a, align 4, !dbg !42
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %1), !dbg !44
    #dbg_declare(ptr %i, !45, !DIExpression(), !47)
  %2 = load i32, ptr %b, align 4, !dbg !48
  store i32 %2, ptr %i, align 4, !dbg !47
  br label %for.cond, !dbg !49

for.cond:                                         ; preds = %for.inc, %do.body
  %3 = load i32, ptr %i, align 4, !dbg !50
  %4 = load i32, ptr %a, align 4, !dbg !52
  %cmp1 = icmp sgt i32 %3, %4, !dbg !53
  br i1 %cmp1, label %for.body, label %for.end, !dbg !54

for.body:                                         ; preds = %for.cond
  %5 = load i32, ptr %i, align 4, !dbg !55
  %rem = srem i32 %5, 2, !dbg !58
  %cmp2 = icmp eq i32 %rem, 0, !dbg !59
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !59

if.then3:                                         ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !60
  %call4 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %6), !dbg !62
  br label %if.end, !dbg !63

if.else:                                          ; preds = %for.body
  %7 = load i32, ptr %i, align 4, !dbg !64
  %call5 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %7), !dbg !66
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %for.inc, !dbg !67

for.inc:                                          ; preds = %if.end
  %8 = load i32, ptr %i, align 4, !dbg !68
  %dec = add nsw i32 %8, -1, !dbg !68
  store i32 %dec, ptr %i, align 4, !dbg !68
  br label %for.cond, !dbg !69, !llvm.loop !70

for.end:                                          ; preds = %for.cond
  %9 = load i32, ptr %a, align 4, !dbg !73
  %dec6 = add nsw i32 %9, -1, !dbg !73
  store i32 %dec6, ptr %a, align 4, !dbg !73
  br label %do.cond, !dbg !74

do.cond:                                          ; preds = %for.end
  %10 = load i32, ptr %a, align 4, !dbg !75
  %tobool = icmp ne i32 %10, 0, !dbg !74
  br i1 %tobool, label %do.body, label %do.end, !dbg !74, !llvm.loop !76

do.end:                                           ; preds = %do.cond
  br label %if.end7, !dbg !78

if.end7:                                          ; preds = %do.end, %entry
  %11 = load i32, ptr %retval, align 4, !dbg !79
  ret i32 %11, !dbg !79
}

declare i32 @printf(ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!20, !21, !22, !23, !24, !25, !26}
!llvm.ident = !{!27}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 13, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_58-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "c29199770e9c363da6a70cc4e3d90e83")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 4)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 16, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 96, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 12)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 19, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 88, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 11)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !19, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/INTERVAL_test_58-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "c29199770e9c363da6a70cc4e3d90e83")
!19 = !{!0, !7, !12}
!20 = !{i32 7, !"Dwarf Version", i32 5}
!21 = !{i32 2, !"Debug Info Version", i32 3}
!22 = !{i32 1, !"wchar_size", i32 4}
!23 = !{i32 8, !"PIC Level", i32 2}
!24 = !{i32 7, !"PIE Level", i32 2}
!25 = !{i32 7, !"uwtable", i32 2}
!26 = !{i32 7, !"frame-pointer", i32 2}
!27 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!28 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 8, type: !29, scopeLine: 8, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !32)
!29 = !DISubroutineType(types: !30)
!30 = !{!31}
!31 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!32 = !{}
!33 = !DILocalVariable(name: "a", scope: !28, file: !2, line: 9, type: !31)
!34 = !DILocation(line: 9, column: 6, scope: !28)
!35 = !DILocalVariable(name: "b", scope: !28, file: !2, line: 10, type: !31)
!36 = !DILocation(line: 10, column: 6, scope: !28)
!37 = !DILocation(line: 11, column: 5, scope: !38)
!38 = distinct !DILexicalBlock(scope: !28, file: !2, line: 11, column: 5)
!39 = !DILocation(line: 11, column: 7, scope: !38)
!40 = !DILocation(line: 12, column: 3, scope: !41)
!41 = distinct !DILexicalBlock(scope: !38, file: !2, line: 11, column: 13)
!42 = !DILocation(line: 13, column: 22, scope: !43)
!43 = distinct !DILexicalBlock(scope: !41, file: !2, line: 12, column: 6)
!44 = !DILocation(line: 13, column: 7, scope: !43)
!45 = !DILocalVariable(name: "i", scope: !46, file: !2, line: 14, type: !31)
!46 = distinct !DILexicalBlock(scope: !43, file: !2, line: 14, column: 4)
!47 = !DILocation(line: 14, column: 12, scope: !46)
!48 = !DILocation(line: 14, column: 16, scope: !46)
!49 = !DILocation(line: 14, column: 8, scope: !46)
!50 = !DILocation(line: 14, column: 19, scope: !51)
!51 = distinct !DILexicalBlock(scope: !46, file: !2, line: 14, column: 4)
!52 = !DILocation(line: 14, column: 23, scope: !51)
!53 = !DILocation(line: 14, column: 21, scope: !51)
!54 = !DILocation(line: 14, column: 4, scope: !46)
!55 = !DILocation(line: 15, column: 8, scope: !56)
!56 = distinct !DILexicalBlock(scope: !57, file: !2, line: 15, column: 8)
!57 = distinct !DILexicalBlock(scope: !51, file: !2, line: 14, column: 31)
!58 = !DILocation(line: 15, column: 10, scope: !56)
!59 = !DILocation(line: 15, column: 14, scope: !56)
!60 = !DILocation(line: 16, column: 29, scope: !61)
!61 = distinct !DILexicalBlock(scope: !56, file: !2, line: 15, column: 20)
!62 = !DILocation(line: 16, column: 6, scope: !61)
!63 = !DILocation(line: 17, column: 5, scope: !61)
!64 = !DILocation(line: 19, column: 28, scope: !65)
!65 = distinct !DILexicalBlock(scope: !56, file: !2, line: 18, column: 10)
!66 = !DILocation(line: 19, column: 6, scope: !65)
!67 = !DILocation(line: 21, column: 4, scope: !57)
!68 = !DILocation(line: 14, column: 27, scope: !51)
!69 = !DILocation(line: 14, column: 4, scope: !51)
!70 = distinct !{!70, !54, !71, !72}
!71 = !DILocation(line: 21, column: 4, scope: !46)
!72 = !{!"llvm.loop.mustprogress"}
!73 = !DILocation(line: 22, column: 5, scope: !43)
!74 = !DILocation(line: 23, column: 3, scope: !43)
!75 = !DILocation(line: 23, column: 11, scope: !41)
!76 = distinct !{!76, !40, !77, !72}
!77 = !DILocation(line: 23, column: 12, scope: !41)
!78 = !DILocation(line: 24, column: 2, scope: !41)
!79 = !DILocation(line: 25, column: 1, scope: !28)
