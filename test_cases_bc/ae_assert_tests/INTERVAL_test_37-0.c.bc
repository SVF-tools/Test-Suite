; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_37-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_37-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.testStruct = type { i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %i = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %i, metadata !16, metadata !DIExpression()), !dbg !21
  %call = call noalias ptr @malloc(i64 noundef 16) #4, !dbg !22
  store ptr %call, ptr %i, align 8, !dbg !21
  %0 = load ptr, ptr %i, align 8, !dbg !23
  %arrayidx = getelementptr inbounds %struct.testStruct, ptr %0, i64 3, !dbg !23
  %a = getelementptr inbounds %struct.testStruct, ptr %arrayidx, i32 0, i32 0, !dbg !25
  %1 = load i32, ptr %a, align 4, !dbg !25
  %cmp = icmp sgt i32 %1, 5, !dbg !26
  br i1 %cmp, label %if.then, label %if.else, !dbg !27

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %i, align 8, !dbg !28
  %arrayidx1 = getelementptr inbounds %struct.testStruct, ptr %2, i64 3, !dbg !28
  %a2 = getelementptr inbounds %struct.testStruct, ptr %arrayidx1, i32 0, i32 0, !dbg !30
  %3 = load i32, ptr %a2, align 4, !dbg !30
  %cmp3 = icmp sgt i32 %3, 5, !dbg !31
  call void @svf_assert(i1 noundef zeroext %cmp3), !dbg !32
  br label %if.end, !dbg !33

if.else:                                          ; preds = %entry
  %4 = load ptr, ptr %i, align 8, !dbg !34
  %arrayidx4 = getelementptr inbounds %struct.testStruct, ptr %4, i64 3, !dbg !34
  %a5 = getelementptr inbounds %struct.testStruct, ptr %arrayidx4, i32 0, i32 0, !dbg !36
  %5 = load i32, ptr %a5, align 4, !dbg !36
  %cmp6 = icmp sle i32 %5, 5, !dbg !37
  call void @svf_assert(i1 noundef zeroext %cmp6), !dbg !38
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, ptr %retval, align 4, !dbg !39
  ret i32 %6, !dbg !39
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

declare void @svf_assert(i1 noundef zeroext) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_37-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f08ee25388c9fec29f0a0a72db2c13d6")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 12, type: !12, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_37-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f08ee25388c9fec29f0a0a72db2c13d6")
!12 = !DISubroutineType(types: !13)
!13 = !{!14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "i", scope: !10, file: !11, line: 13, type: !17)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!18 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "testStruct", file: !11, line: 8, size: 32, elements: !19)
!19 = !{!20}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !18, file: !11, line: 9, baseType: !14, size: 32)
!21 = !DILocation(line: 13, column: 24, scope: !10)
!22 = !DILocation(line: 13, column: 28, scope: !10)
!23 = !DILocation(line: 14, column: 9, scope: !24)
!24 = distinct !DILexicalBlock(scope: !10, file: !11, line: 14, column: 9)
!25 = !DILocation(line: 14, column: 14, scope: !24)
!26 = !DILocation(line: 14, column: 16, scope: !24)
!27 = !DILocation(line: 14, column: 9, scope: !10)
!28 = !DILocation(line: 15, column: 20, scope: !29)
!29 = distinct !DILexicalBlock(scope: !24, file: !11, line: 14, column: 21)
!30 = !DILocation(line: 15, column: 25, scope: !29)
!31 = !DILocation(line: 15, column: 27, scope: !29)
!32 = !DILocation(line: 15, column: 9, scope: !29)
!33 = !DILocation(line: 16, column: 5, scope: !29)
!34 = !DILocation(line: 18, column: 20, scope: !35)
!35 = distinct !DILexicalBlock(scope: !24, file: !11, line: 17, column: 10)
!36 = !DILocation(line: 18, column: 25, scope: !35)
!37 = !DILocation(line: 18, column: 27, scope: !35)
!38 = !DILocation(line: 18, column: 9, scope: !35)
!39 = !DILocation(line: 20, column: 1, scope: !10)
