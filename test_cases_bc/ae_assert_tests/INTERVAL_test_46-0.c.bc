; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_46-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_46-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@count = dso_local global i32 0, align 4, !dbg !0
@result = dso_local global i32 0, align 4, !dbg !5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo(i32 noundef %limit) #0 !dbg !17 {
entry:
  %limit.addr = alloca i32, align 4
  store i32 %limit, ptr %limit.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %limit.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %0 = load i32, ptr @count, align 4, !dbg !23
  %1 = load i32, ptr %limit.addr, align 4, !dbg !25
  %cmp = icmp slt i32 %0, %1, !dbg !26
  br i1 %cmp, label %if.then, label %if.end, !dbg !27

if.then:                                          ; preds = %entry
  %2 = load i32, ptr @count, align 4, !dbg !28
  %add = add nsw i32 %2, 1, !dbg !30
  store i32 %add, ptr @result, align 4, !dbg !31
  %3 = load i32, ptr @count, align 4, !dbg !32
  %inc = add nsw i32 %3, 1, !dbg !32
  store i32 %inc, ptr @count, align 4, !dbg !32
  %4 = load i32, ptr %limit.addr, align 4, !dbg !33
  call void @bar(i32 noundef %4), !dbg !34
  br label %if.end, !dbg !35

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !36
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bar(i32 noundef %limit) #0 !dbg !37 {
entry:
  %limit.addr = alloca i32, align 4
  store i32 %limit, ptr %limit.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %limit.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i32, ptr @count, align 4, !dbg !40
  %1 = load i32, ptr %limit.addr, align 4, !dbg !42
  %cmp = icmp slt i32 %0, %1, !dbg !43
  br i1 %cmp, label %if.then, label %if.end, !dbg !44

if.then:                                          ; preds = %entry
  %2 = load i32, ptr @count, align 4, !dbg !45
  %sub = sub nsw i32 %2, 1, !dbg !47
  store i32 %sub, ptr @result, align 4, !dbg !48
  %3 = load i32, ptr @count, align 4, !dbg !49
  %inc = add nsw i32 %3, 1, !dbg !49
  store i32 %inc, ptr @count, align 4, !dbg !49
  %4 = load i32, ptr %limit.addr, align 4, !dbg !50
  call void @foo(i32 noundef %4), !dbg !51
  br label %if.end, !dbg !52

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !54 {
entry:
  %retval = alloca i32, align 4
  %limit = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %limit, metadata !57, metadata !DIExpression()), !dbg !58
  %0 = load i32, ptr %limit, align 4, !dbg !59
  %cmp = icmp sgt i32 %0, 0, !dbg !61
  br i1 %cmp, label %if.then, label %if.else5, !dbg !62

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %limit, align 4, !dbg !63
  call void @foo(i32 noundef %1), !dbg !65
  %2 = load i32, ptr %limit, align 4, !dbg !66
  %rem = srem i32 %2, 2, !dbg !68
  %cmp1 = icmp eq i32 %rem, 1, !dbg !69
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !70

if.then2:                                         ; preds = %if.then
  %3 = load i32, ptr @result, align 4, !dbg !71
  %4 = load i32, ptr %limit, align 4, !dbg !73
  %cmp3 = icmp eq i32 %3, %4, !dbg !74
  call void @svf_assert(i1 noundef zeroext %cmp3), !dbg !75
  br label %if.end, !dbg !76

if.else:                                          ; preds = %if.then
  %5 = load i32, ptr @result, align 4, !dbg !77
  %6 = load i32, ptr %limit, align 4, !dbg !79
  %sub = sub nsw i32 %6, 2, !dbg !80
  %cmp4 = icmp eq i32 %5, %sub, !dbg !81
  call void @svf_assert(i1 noundef zeroext %cmp4), !dbg !82
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end7, !dbg !83

if.else5:                                         ; preds = %entry
  %7 = load i32, ptr @result, align 4, !dbg !84
  %cmp6 = icmp eq i32 %7, 0, !dbg !86
  call void @svf_assert(i1 noundef zeroext %cmp6), !dbg !87
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  %8 = load i32, ptr %retval, align 4, !dbg !88
  ret i32 %8, !dbg !88
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!9, !10, !11, !12, !13, !14, !15}
!llvm.ident = !{!16}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "count", scope: !2, file: !7, line: 8, type: !8, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_46-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "31f0d44e8593397567fa2e799d49f1e7")
!4 = !{!0, !5}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "result", scope: !2, file: !7, line: 9, type: !8, isLocal: false, isDefinition: true)
!7 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_46-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "31f0d44e8593397567fa2e799d49f1e7")
!8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!9 = !{i32 7, !"Dwarf Version", i32 5}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 8, !"PIC Level", i32 2}
!13 = !{i32 7, !"PIE Level", i32 2}
!14 = !{i32 7, !"uwtable", i32 2}
!15 = !{i32 7, !"frame-pointer", i32 2}
!16 = !{!"clang version 16.0.0"}
!17 = distinct !DISubprogram(name: "foo", scope: !7, file: !7, line: 14, type: !18, scopeLine: 14, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!18 = !DISubroutineType(types: !19)
!19 = !{null, !8}
!20 = !{}
!21 = !DILocalVariable(name: "limit", arg: 1, scope: !17, file: !7, line: 14, type: !8)
!22 = !DILocation(line: 14, column: 14, scope: !17)
!23 = !DILocation(line: 15, column: 8, scope: !24)
!24 = distinct !DILexicalBlock(scope: !17, file: !7, line: 15, column: 8)
!25 = !DILocation(line: 15, column: 16, scope: !24)
!26 = !DILocation(line: 15, column: 14, scope: !24)
!27 = !DILocation(line: 15, column: 8, scope: !17)
!28 = !DILocation(line: 16, column: 18, scope: !29)
!29 = distinct !DILexicalBlock(scope: !24, file: !7, line: 15, column: 23)
!30 = !DILocation(line: 16, column: 24, scope: !29)
!31 = !DILocation(line: 16, column: 16, scope: !29)
!32 = !DILocation(line: 17, column: 14, scope: !29)
!33 = !DILocation(line: 18, column: 13, scope: !29)
!34 = !DILocation(line: 18, column: 9, scope: !29)
!35 = !DILocation(line: 19, column: 5, scope: !29)
!36 = !DILocation(line: 20, column: 5, scope: !17)
!37 = distinct !DISubprogram(name: "bar", scope: !7, file: !7, line: 23, type: !18, scopeLine: 23, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!38 = !DILocalVariable(name: "limit", arg: 1, scope: !37, file: !7, line: 23, type: !8)
!39 = !DILocation(line: 23, column: 14, scope: !37)
!40 = !DILocation(line: 24, column: 8, scope: !41)
!41 = distinct !DILexicalBlock(scope: !37, file: !7, line: 24, column: 8)
!42 = !DILocation(line: 24, column: 16, scope: !41)
!43 = !DILocation(line: 24, column: 14, scope: !41)
!44 = !DILocation(line: 24, column: 8, scope: !37)
!45 = !DILocation(line: 25, column: 18, scope: !46)
!46 = distinct !DILexicalBlock(scope: !41, file: !7, line: 24, column: 23)
!47 = !DILocation(line: 25, column: 24, scope: !46)
!48 = !DILocation(line: 25, column: 16, scope: !46)
!49 = !DILocation(line: 26, column: 14, scope: !46)
!50 = !DILocation(line: 27, column: 13, scope: !46)
!51 = !DILocation(line: 27, column: 9, scope: !46)
!52 = !DILocation(line: 28, column: 5, scope: !46)
!53 = !DILocation(line: 29, column: 5, scope: !37)
!54 = distinct !DISubprogram(name: "main", scope: !7, file: !7, line: 32, type: !55, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!55 = !DISubroutineType(types: !56)
!56 = !{!8}
!57 = !DILocalVariable(name: "limit", scope: !54, file: !7, line: 33, type: !8)
!58 = !DILocation(line: 33, column: 9, scope: !54)
!59 = !DILocation(line: 34, column: 8, scope: !60)
!60 = distinct !DILexicalBlock(scope: !54, file: !7, line: 34, column: 8)
!61 = !DILocation(line: 34, column: 14, scope: !60)
!62 = !DILocation(line: 34, column: 8, scope: !54)
!63 = !DILocation(line: 35, column: 13, scope: !64)
!64 = distinct !DILexicalBlock(scope: !60, file: !7, line: 34, column: 19)
!65 = !DILocation(line: 35, column: 9, scope: !64)
!66 = !DILocation(line: 36, column: 12, scope: !67)
!67 = distinct !DILexicalBlock(scope: !64, file: !7, line: 36, column: 12)
!68 = !DILocation(line: 36, column: 18, scope: !67)
!69 = !DILocation(line: 36, column: 22, scope: !67)
!70 = !DILocation(line: 36, column: 12, scope: !64)
!71 = !DILocation(line: 37, column: 24, scope: !72)
!72 = distinct !DILexicalBlock(scope: !67, file: !7, line: 36, column: 28)
!73 = !DILocation(line: 37, column: 34, scope: !72)
!74 = !DILocation(line: 37, column: 31, scope: !72)
!75 = !DILocation(line: 37, column: 13, scope: !72)
!76 = !DILocation(line: 38, column: 9, scope: !72)
!77 = !DILocation(line: 40, column: 24, scope: !78)
!78 = distinct !DILexicalBlock(scope: !67, file: !7, line: 39, column: 14)
!79 = !DILocation(line: 40, column: 34, scope: !78)
!80 = !DILocation(line: 40, column: 40, scope: !78)
!81 = !DILocation(line: 40, column: 31, scope: !78)
!82 = !DILocation(line: 40, column: 13, scope: !78)
!83 = !DILocation(line: 42, column: 5, scope: !64)
!84 = !DILocation(line: 44, column: 20, scope: !85)
!85 = distinct !DILexicalBlock(scope: !60, file: !7, line: 43, column: 10)
!86 = !DILocation(line: 44, column: 27, scope: !85)
!87 = !DILocation(line: 44, column: 9, scope: !85)
!88 = !DILocation(line: 46, column: 1, scope: !54)
