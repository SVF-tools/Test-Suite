; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_35-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_35-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@counter = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @factorial(i32 noundef %i) #0 !dbg !15 {
entry:
  %retval = alloca i64, align 8
  %i.addr = alloca i32, align 4
  store i32 %i, ptr %i.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %i.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load i32, ptr @counter, align 4, !dbg !22
  %inc = add nsw i32 %0, 1, !dbg !22
  store i32 %inc, ptr @counter, align 4, !dbg !22
  %1 = load i32, ptr %i.addr, align 4, !dbg !23
  %cmp = icmp sle i32 %1, 1, !dbg !25
  br i1 %cmp, label %if.then, label %if.end, !dbg !26

if.then:                                          ; preds = %entry
  store i64 1, ptr %retval, align 8, !dbg !27
  br label %return, !dbg !27

if.end:                                           ; preds = %entry
  %2 = load i32, ptr %i.addr, align 4, !dbg !29
  %conv = sext i32 %2 to i64, !dbg !29
  %3 = load i32, ptr %i.addr, align 4, !dbg !30
  %sub = sub nsw i32 %3, 1, !dbg !31
  %call = call i64 @factorial(i32 noundef %sub), !dbg !32
  %mul = mul nsw i64 %conv, %call, !dbg !33
  store i64 %mul, ptr %retval, align 8, !dbg !34
  br label %return, !dbg !34

return:                                           ; preds = %if.end, %if.then
  %4 = load i64, ptr %retval, align 8, !dbg !35
  ret i64 %4, !dbg !35
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !36 {
entry:
  %i = alloca i32, align 4
  %f = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !39, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.declare(metadata ptr %f, metadata !41, metadata !DIExpression()), !dbg !42
  %0 = load i32, ptr %i, align 4, !dbg !43
  %call = call i64 @factorial(i32 noundef %0), !dbg !44
  store i64 %call, ptr %f, align 8, !dbg !42
  %1 = load i32, ptr @counter, align 4, !dbg !45
  %2 = load i32, ptr %i, align 4, !dbg !46
  %cmp = icmp eq i32 %1, %2, !dbg !47
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !48
  ret i32 0, !dbg !49
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "counter", scope: !2, file: !5, line: 7, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_35-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5aa5965e7da30130abab6c6ddb7fa4a5")
!4 = !{!0}
!5 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_35-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5aa5965e7da30130abab6c6ddb7fa4a5")
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 8, !"PIC Level", i32 2}
!11 = !{i32 7, !"PIE Level", i32 2}
!12 = !{i32 7, !"uwtable", i32 2}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 16.0.0"}
!15 = distinct !DISubprogram(name: "factorial", scope: !5, file: !5, line: 9, type: !16, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !6}
!18 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!19 = !{}
!20 = !DILocalVariable(name: "i", arg: 1, scope: !15, file: !5, line: 9, type: !6)
!21 = !DILocation(line: 9, column: 20, scope: !15)
!22 = !DILocation(line: 10, column: 12, scope: !15)
!23 = !DILocation(line: 11, column: 8, scope: !24)
!24 = distinct !DILexicalBlock(scope: !15, file: !5, line: 11, column: 8)
!25 = !DILocation(line: 11, column: 10, scope: !24)
!26 = !DILocation(line: 11, column: 8, scope: !15)
!27 = !DILocation(line: 12, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !24, file: !5, line: 11, column: 16)
!29 = !DILocation(line: 14, column: 12, scope: !15)
!30 = !DILocation(line: 14, column: 26, scope: !15)
!31 = !DILocation(line: 14, column: 28, scope: !15)
!32 = !DILocation(line: 14, column: 16, scope: !15)
!33 = !DILocation(line: 14, column: 14, scope: !15)
!34 = !DILocation(line: 14, column: 5, scope: !15)
!35 = !DILocation(line: 15, column: 1, scope: !15)
!36 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 17, type: !37, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !19)
!37 = !DISubroutineType(types: !38)
!38 = !{!6}
!39 = !DILocalVariable(name: "i", scope: !36, file: !5, line: 18, type: !6)
!40 = !DILocation(line: 18, column: 9, scope: !36)
!41 = !DILocalVariable(name: "f", scope: !36, file: !5, line: 19, type: !18)
!42 = !DILocation(line: 19, column: 10, scope: !36)
!43 = !DILocation(line: 19, column: 24, scope: !36)
!44 = !DILocation(line: 19, column: 14, scope: !36)
!45 = !DILocation(line: 20, column: 16, scope: !36)
!46 = !DILocation(line: 20, column: 27, scope: !36)
!47 = !DILocation(line: 20, column: 24, scope: !36)
!48 = !DILocation(line: 20, column: 5, scope: !36)
!49 = !DILocation(line: 21, column: 1, scope: !36)
