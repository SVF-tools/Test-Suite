; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_52-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_52-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @digitCount(i32 noundef %i) #0 !dbg !10 {
entry:
  %i.addr = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32 %i, ptr %i.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %i.addr, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata ptr %counter, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 0, ptr %counter, align 4, !dbg !19
  br label %while.body, !dbg !20

while.body:                                       ; preds = %if.end, %entry
  %0 = load i32, ptr %i.addr, align 4, !dbg !21
  %div = sdiv i32 %0, 10, !dbg !23
  store i32 %div, ptr %i.addr, align 4, !dbg !24
  %1 = load i32, ptr %counter, align 4, !dbg !25
  %inc = add nsw i32 %1, 1, !dbg !25
  store i32 %inc, ptr %counter, align 4, !dbg !25
  %2 = load i32, ptr %i.addr, align 4, !dbg !26
  %cmp = icmp eq i32 %2, 0, !dbg !28
  br i1 %cmp, label %if.then, label %if.end, !dbg !29

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !30

if.end:                                           ; preds = %while.body
  br label %while.body, !dbg !20, !llvm.loop !32

while.end:                                        ; preds = %if.then
  %3 = load i32, ptr %counter, align 4, !dbg !34
  ret i32 %3, !dbg !35
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !36 {
entry:
  %retval = alloca i32, align 4
  %randomNumber = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call i32 (i32, ...) @time(i32 noundef 0), !dbg !39
  call void @srand(i32 noundef %call) #4, !dbg !40
  call void @llvm.dbg.declare(metadata ptr %randomNumber, metadata !41, metadata !DIExpression()), !dbg !42
  %call1 = call i32 @rand() #4, !dbg !43
  %rem = srem i32 %call1, 999, !dbg !44
  store i32 %rem, ptr %randomNumber, align 4, !dbg !42
  call void @llvm.dbg.declare(metadata ptr %counter, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %randomNumber, align 4, !dbg !47
  %call2 = call i32 @digitCount(i32 noundef %0), !dbg !48
  store i32 %call2, ptr %counter, align 4, !dbg !46
  %1 = load i32, ptr %counter, align 4, !dbg !49
  %cmp = icmp sge i32 %1, 1, !dbg !50
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !51

land.rhs:                                         ; preds = %entry
  %2 = load i32, ptr %counter, align 4, !dbg !52
  %cmp3 = icmp sle i32 %2, 3, !dbg !53
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !54
  call void @svf_assert(i1 noundef zeroext %3), !dbg !55
  %4 = load i32, ptr %retval, align 4, !dbg !56
  ret i32 %4, !dbg !56
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #2

declare i32 @time(...) #3

; Function Attrs: nounwind
declare i32 @rand() #2

declare void @svf_assert(i1 noundef zeroext) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_52-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "35ac9e2519f80213036d42179fe8bedc")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "digitCount", scope: !11, file: !11, line: 7, type: !12, scopeLine: 7, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_52-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "35ac9e2519f80213036d42179fe8bedc")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "i", arg: 1, scope: !10, file: !11, line: 7, type: !14)
!17 = !DILocation(line: 7, column: 20, scope: !10)
!18 = !DILocalVariable(name: "counter", scope: !10, file: !11, line: 8, type: !14)
!19 = !DILocation(line: 8, column: 9, scope: !10)
!20 = !DILocation(line: 9, column: 5, scope: !10)
!21 = !DILocation(line: 10, column: 13, scope: !22)
!22 = distinct !DILexicalBlock(scope: !10, file: !11, line: 9, column: 17)
!23 = !DILocation(line: 10, column: 14, scope: !22)
!24 = !DILocation(line: 10, column: 11, scope: !22)
!25 = !DILocation(line: 11, column: 16, scope: !22)
!26 = !DILocation(line: 12, column: 12, scope: !27)
!27 = distinct !DILexicalBlock(scope: !22, file: !11, line: 12, column: 12)
!28 = !DILocation(line: 12, column: 14, scope: !27)
!29 = !DILocation(line: 12, column: 12, scope: !22)
!30 = !DILocation(line: 13, column: 13, scope: !31)
!31 = distinct !DILexicalBlock(scope: !27, file: !11, line: 12, column: 20)
!32 = distinct !{!32, !20, !33}
!33 = !DILocation(line: 15, column: 5, scope: !10)
!34 = !DILocation(line: 16, column: 12, scope: !10)
!35 = !DILocation(line: 16, column: 5, scope: !10)
!36 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 19, type: !37, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!37 = !DISubroutineType(types: !38)
!38 = !{!14}
!39 = !DILocation(line: 20, column: 11, scope: !36)
!40 = !DILocation(line: 20, column: 5, scope: !36)
!41 = !DILocalVariable(name: "randomNumber", scope: !36, file: !11, line: 21, type: !14)
!42 = !DILocation(line: 21, column: 6, scope: !36)
!43 = !DILocation(line: 21, column: 21, scope: !36)
!44 = !DILocation(line: 21, column: 28, scope: !36)
!45 = !DILocalVariable(name: "counter", scope: !36, file: !11, line: 22, type: !14)
!46 = !DILocation(line: 22, column: 9, scope: !36)
!47 = !DILocation(line: 22, column: 30, scope: !36)
!48 = !DILocation(line: 22, column: 19, scope: !36)
!49 = !DILocation(line: 23, column: 16, scope: !36)
!50 = !DILocation(line: 23, column: 24, scope: !36)
!51 = !DILocation(line: 23, column: 29, scope: !36)
!52 = !DILocation(line: 23, column: 32, scope: !36)
!53 = !DILocation(line: 23, column: 40, scope: !36)
!54 = !DILocation(line: 0, scope: !36)
!55 = !DILocation(line: 23, column: 5, scope: !36)
!56 = !DILocation(line: 24, column: 1, scope: !36)
