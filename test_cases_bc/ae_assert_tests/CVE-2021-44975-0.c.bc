; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2021-44975-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2021-44975-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.r_io_t = type { i8 }
%struct.RCoreObjc = type { ptr, i64, ptr, ptr }
%struct.r_bin_section_t = type { i64 }
%struct.r_core_t = type { ptr }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"aao: Cannot read the whole const section %zu\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @r_io_pread_at(ptr noundef %io, ptr noundef %buf, i32 noundef %len) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %len.addr = alloca i32, align 4
  store ptr %io, ptr %io.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %len, ptr %len.addr, align 4
  %0 = load ptr, ptr %io.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %1 = load ptr, ptr %buf.addr, align 8
  %tobool1 = icmp ne ptr %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.then

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, ptr %len.addr, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true2
  %3 = load ptr, ptr %buf.addr, align 8
  %4 = load ptr, ptr %io.addr, align 8
  %Oxff = getelementptr inbounds %struct.r_io_t, ptr %4, i32 0, i32 0
  %5 = load i8, ptr %Oxff, align 1
  %conv = zext i8 %5 to i32
  %6 = trunc i32 %conv to i8
  %7 = load i32, ptr %len.addr, align 4
  %conv3 = sext i32 %7 to i64
  call void @llvm.memset.p0.i64(ptr align 1 %3, i8 %6, i64 %conv3, i1 false)
  %8 = load ptr, ptr %buf.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %8)
  store i32 1, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, ptr %retval, align 4
  ret i32 %9
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @internal_r_io_read_at(ptr noundef %io, ptr noundef %buf, i32 noundef %len) #0 {
entry:
  %retval = alloca i1, align 1
  %io.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %len.addr = alloca i32, align 4
  %ret = alloca i8, align 1
  store ptr %io, ptr %io.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %len, ptr %len.addr, align 4
  %0 = load i32, ptr %len.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %io.addr, align 8
  %2 = load ptr, ptr %buf.addr, align 8
  %3 = load i32, ptr %len.addr, align 4
  %call = call i32 @r_io_pread_at(ptr noundef %1, ptr noundef %2, i32 noundef %3)
  %cmp1 = icmp sgt i32 %call, 0
  %frombool = zext i1 %cmp1 to i8
  store i8 %frombool, ptr %ret, align 1
  %4 = load i8, ptr %ret, align 1
  %tobool = trunc i8 %4 to i1
  store i1 %tobool, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i1, ptr %retval, align 1
  ret i1 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @r_io_read_at(ptr noundef %io, ptr noundef %buf, i32 noundef %len) #0 {
entry:
  %retval = alloca i1, align 1
  %io.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %len.addr = alloca i32, align 4
  store ptr %io, ptr %io.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %len, ptr %len.addr, align 4
  %0 = load ptr, ptr %io.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %1 = load ptr, ptr %buf.addr, align 8
  %tobool1 = icmp ne ptr %1, null
  br i1 %tobool1, label %land.lhs.true2, label %if.then

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, ptr %len.addr, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true2
  %3 = load i32, ptr %len.addr, align 4
  %cmp3 = icmp eq i32 %3, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i1 false, ptr %retval, align 1
  br label %return

if.end5:                                          ; preds = %if.end
  %4 = load ptr, ptr %io.addr, align 8
  %5 = load ptr, ptr %buf.addr, align 8
  %6 = load i32, ptr %len.addr, align 4
  %call = call zeroext i1 @internal_r_io_read_at(ptr noundef %4, ptr noundef %5, i32 noundef %6)
  store i1 %call, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %7 = load i1, ptr %retval, align 1
  ret i1 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @objc_build_refs(ptr noundef %objc) #0 {
entry:
  %retval = alloca i1, align 1
  %objc.addr = alloca ptr, align 8
  %ss_const = alloca i64, align 8
  %ss_selrefs = alloca i64, align 8
  %maxsize = alloca i64, align 8
  %buf = alloca ptr, align 8
  store ptr %objc, ptr %objc.addr, align 8
  %0 = load ptr, ptr %objc.addr, align 8
  %_const = getelementptr inbounds %struct.RCoreObjc, ptr %0, i32 0, i32 3
  %1 = load ptr, ptr %_const, align 8
  %vsize = getelementptr inbounds %struct.r_bin_section_t, ptr %1, i32 0, i32 0
  %2 = load i64, ptr %vsize, align 8
  store i64 %2, ptr %ss_const, align 8
  %3 = load ptr, ptr %objc.addr, align 8
  %_selrefs = getelementptr inbounds %struct.RCoreObjc, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %_selrefs, align 8
  %vsize1 = getelementptr inbounds %struct.r_bin_section_t, ptr %4, i32 0, i32 0
  %5 = load i64, ptr %vsize1, align 8
  store i64 %5, ptr %ss_selrefs, align 8
  %6 = load i64, ptr %ss_const, align 8
  %7 = load i64, ptr %ss_selrefs, align 8
  %cmp = icmp ugt i64 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i64, ptr %ss_const, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load i64, ptr %ss_selrefs, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ]
  store i64 %cond, ptr %maxsize, align 8
  %10 = load i64, ptr %maxsize, align 8
  %11 = load ptr, ptr %objc.addr, align 8
  %file_size = getelementptr inbounds %struct.RCoreObjc, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %file_size, align 8
  %cmp2 = icmp ugt i64 %10, %12
  br i1 %cmp2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %13 = load ptr, ptr %objc.addr, align 8
  %file_size4 = getelementptr inbounds %struct.RCoreObjc, ptr %13, i32 0, i32 1
  %14 = load i64, ptr %file_size4, align 8
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end
  %15 = load i64, ptr %maxsize, align 8
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi i64 [ %14, %cond.true3 ], [ %15, %cond.false5 ]
  store i64 %cond7, ptr %maxsize, align 8
  %16 = load i64, ptr %maxsize, align 8
  %call = call noalias ptr @calloc(i64 noundef 1, i64 noundef %16) #4
  store ptr %call, ptr %buf, align 8
  %17 = load ptr, ptr %buf, align 8
  %tobool = icmp ne ptr %17, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end6
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %cond.end6
  %18 = load ptr, ptr %objc.addr, align 8
  %core = getelementptr inbounds %struct.RCoreObjc, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %core, align 8
  %io = getelementptr inbounds %struct.r_core_t, ptr %19, i32 0, i32 0
  %20 = load ptr, ptr %io, align 8
  %21 = load ptr, ptr %buf, align 8
  %22 = load i64, ptr %ss_const, align 8
  %conv = trunc i64 %22 to i32
  %call8 = call zeroext i1 @r_io_read_at(ptr noundef %20, ptr noundef %21, i32 noundef %conv)
  br i1 %call8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end
  %23 = load i64, ptr %ss_const, align 8
  %call10 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i64 noundef %23)
  store i1 false, ptr %retval, align 1
  br label %return

if.end11:                                         ; preds = %if.end
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end11, %if.then9, %if.then
  %24 = load i1, ptr %retval, align 1
  ret i1 %24
}

; Function Attrs: nounwind allocsize(0,1)
declare noalias ptr @calloc(i64 noundef, i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %io = alloca %struct.r_io_t, align 1
  %core = alloca %struct.r_core_t, align 8
  %selrefs = alloca %struct.r_bin_section_t, align 8
  %rconst = alloca %struct.r_bin_section_t, align 8
  %objc = alloca %struct.RCoreObjc, align 8
  %Oxff = getelementptr inbounds %struct.r_io_t, ptr %io, i32 0, i32 0
  store i8 97, ptr %Oxff, align 1
  %io1 = getelementptr inbounds %struct.r_core_t, ptr %core, i32 0, i32 0
  store ptr %io, ptr %io1, align 8
  %vsize = getelementptr inbounds %struct.r_bin_section_t, ptr %selrefs, i32 0, i32 0
  store i64 3, ptr %vsize, align 8
  %vsize2 = getelementptr inbounds %struct.r_bin_section_t, ptr %rconst, i32 0, i32 0
  store i64 10, ptr %vsize2, align 8
  %core3 = getelementptr inbounds %struct.RCoreObjc, ptr %objc, i32 0, i32 0
  store ptr %core, ptr %core3, align 8
  %file_size = getelementptr inbounds %struct.RCoreObjc, ptr %objc, i32 0, i32 1
  store i64 5, ptr %file_size, align 8
  %_selrefs = getelementptr inbounds %struct.RCoreObjc, ptr %objc, i32 0, i32 2
  store ptr %selrefs, ptr %_selrefs, align 8
  %_const = getelementptr inbounds %struct.RCoreObjc, ptr %objc, i32 0, i32 3
  store ptr %rconst, ptr %_const, align 8
  %call = call zeroext i1 @objc_build_refs(ptr noundef %objc)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0,1) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
