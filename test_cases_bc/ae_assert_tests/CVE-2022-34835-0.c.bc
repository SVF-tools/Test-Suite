; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34835-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/CVE-2022-34835-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.i2c_msg = type { ptr }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_i2c_md(i32 noundef %argc, ptr noundef %argv) #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %length = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %linebytes = alloca i32, align 4
  %linebuf = alloca [16 x i8], align 16
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !26, !DIExpression(), !27)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !28, !DIExpression(), !29)
    #dbg_declare(ptr %length, !30, !DIExpression(), !36)
  store i32 0, ptr %length, align 4, !dbg !36
    #dbg_declare(ptr %nbytes, !37, !DIExpression(), !41)
    #dbg_declare(ptr %linebytes, !42, !DIExpression(), !43)
  %0 = load i32, ptr %argc.addr, align 4, !dbg !44
  %cmp = icmp slt i32 %0, 3, !dbg !46
  br i1 %cmp, label %if.then, label %if.end, !dbg !46

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4, !dbg !47
  br label %return, !dbg !47

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %argc.addr, align 4, !dbg !49
  %cmp1 = icmp sgt i32 %1, 3, !dbg !51
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !51

if.then2:                                         ; preds = %if.end
  %2 = load ptr, ptr %argv.addr, align 8, !dbg !52
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 3, !dbg !52
  %3 = load ptr, ptr %arrayidx, align 8, !dbg !52
  %call = call i64 @strtol(ptr noundef %3, ptr noundef null, i32 noundef 16) #3, !dbg !54
  %conv = trunc i64 %call to i32, !dbg !54
  store i32 %conv, ptr %length, align 4, !dbg !55
  br label %if.end3, !dbg !56

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, ptr %length, align 4, !dbg !57
  store i32 %4, ptr %nbytes, align 4, !dbg !58
  br label %do.body, !dbg !59

do.body:                                          ; preds = %do.cond, %if.end3
    #dbg_declare(ptr %linebuf, !60, !DIExpression(), !66)
  %5 = load i32, ptr %nbytes, align 4, !dbg !67
  %cmp4 = icmp sgt i32 %5, 16, !dbg !68
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !69

cond.true:                                        ; preds = %do.body
  br label %cond.end, !dbg !69

cond.false:                                       ; preds = %do.body
  %6 = load i32, ptr %nbytes, align 4, !dbg !70
  br label %cond.end, !dbg !69

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 16, %cond.true ], [ %6, %cond.false ], !dbg !69
  store i32 %cond, ptr %linebytes, align 4, !dbg !71
  %7 = load i32, ptr %linebytes, align 4, !dbg !72
  %call6 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %7), !dbg !73
  %arraydecay = getelementptr inbounds [16 x i8], ptr %linebuf, i64 0, i64 0, !dbg !74
  %8 = load i32, ptr %linebytes, align 4, !dbg !75
  %call7 = call i32 @i2c_read_bytewise(ptr noundef %arraydecay, i32 noundef %8), !dbg !76
  %9 = load i32, ptr %linebytes, align 4, !dbg !77
  %10 = load i32, ptr %nbytes, align 4, !dbg !78
  %sub = sub nsw i32 %10, %9, !dbg !78
  store i32 %sub, ptr %nbytes, align 4, !dbg !78
  br label %do.cond, !dbg !79

do.cond:                                          ; preds = %cond.end
  %11 = load i32, ptr %nbytes, align 4, !dbg !80
  %cmp8 = icmp sgt i32 %11, 0, !dbg !81
  br i1 %cmp8, label %do.body, label %do.end, !dbg !79, !llvm.loop !82

do.end:                                           ; preds = %do.cond
  store i32 0, ptr %retval, align 4, !dbg !85
  br label %return, !dbg !85

return:                                           ; preds = %do.end, %if.then
  %12 = load i32, ptr %retval, align 4, !dbg !86
  ret i32 %12, !dbg !86
}

; Function Attrs: nounwind
declare i64 @strtol(ptr noundef, ptr noundef, i32 noundef) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @i2c_read_bytewise(ptr noundef %buffer, i32 noundef %len) #0 !dbg !87 {
entry:
  %buffer.addr = alloca ptr, align 8
  %len.addr = alloca i32, align 4
  %msg = alloca [2 x %struct.i2c_msg], align 16
  %ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  store ptr %buffer, ptr %buffer.addr, align 8
    #dbg_declare(ptr %buffer.addr, !93, !DIExpression(), !94)
  store i32 %len, ptr %len.addr, align 4
    #dbg_declare(ptr %len.addr, !95, !DIExpression(), !96)
    #dbg_declare(ptr %msg, !97, !DIExpression(), !104)
    #dbg_declare(ptr %ptr, !105, !DIExpression(), !107)
    #dbg_declare(ptr %i, !108, !DIExpression(), !109)
  store i32 0, ptr %i, align 4, !dbg !110
  br label %for.cond, !dbg !112

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !113
  %1 = load i32, ptr %len.addr, align 4, !dbg !115
  %cmp = icmp ult i32 %0, %1, !dbg !116
  br i1 %cmp, label %for.body, label %for.end, !dbg !117

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [2 x %struct.i2c_msg], ptr %msg, i64 0, i64 0, !dbg !118
  %add.ptr = getelementptr inbounds %struct.i2c_msg, ptr %arraydecay, i64 1, !dbg !120
  store ptr %add.ptr, ptr %ptr, align 8, !dbg !121
  %2 = load ptr, ptr %buffer.addr, align 8, !dbg !122
  %3 = load i32, ptr %i, align 4, !dbg !123
  %idxprom = sext i32 %3 to i64, !dbg !122
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 %idxprom, !dbg !122
  %4 = load ptr, ptr %ptr, align 8, !dbg !124
  %buf = getelementptr inbounds nuw %struct.i2c_msg, ptr %4, i32 0, i32 0, !dbg !125
  store ptr %arrayidx, ptr %buf, align 8, !dbg !126
  %5 = load ptr, ptr %ptr, align 8, !dbg !127
  %incdec.ptr = getelementptr inbounds nuw %struct.i2c_msg, ptr %5, i32 1, !dbg !127
  store ptr %incdec.ptr, ptr %ptr, align 8, !dbg !127
  br label %for.inc, !dbg !128

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !129
  %inc = add nsw i32 %6, 1, !dbg !129
  store i32 %inc, ptr %i, align 4, !dbg !129
  br label %for.cond, !dbg !130, !llvm.loop !131

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !134 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !138, !DIExpression(), !139)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !140, !DIExpression(), !141)
  %0 = load i32, ptr %argc.addr, align 4, !dbg !142
  %1 = load ptr, ptr %argv.addr, align 8, !dbg !143
  %call = call i32 @do_i2c_md(i32 noundef %0, ptr noundef %1), !dbg !144
  ret i32 0, !dbg !145
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 32, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2022-34835-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "5027a47770fc130a84532009834ceede")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 4)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/CVE-2022-34835-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "5027a47770fc130a84532009834ceede")
!9 = !{!0}
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!18 = distinct !DISubprogram(name: "do_i2c_md", scope: !2, file: !2, line: 15, type: !19, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !25)
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !21, !22}
!21 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !24)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!25 = !{}
!26 = !DILocalVariable(name: "argc", arg: 1, scope: !18, file: !2, line: 15, type: !21)
!27 = !DILocation(line: 15, column: 19, scope: !18)
!28 = !DILocalVariable(name: "argv", arg: 2, scope: !18, file: !2, line: 15, type: !22)
!29 = !DILocation(line: 15, column: 37, scope: !18)
!30 = !DILocalVariable(name: "length", scope: !18, file: !2, line: 16, type: !31)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !32, line: 26, baseType: !33)
!32 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "", checksumkind: CSK_MD5, checksum: "256fcabbefa27ca8cf5e6d37525e6e16")
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !34, line: 42, baseType: !35)
!34 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "e1865d9fe29fe1b5ced550b7ba458f9e")
!35 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!36 = !DILocation(line: 16, column: 11, scope: !18)
!37 = !DILocalVariable(name: "nbytes", scope: !18, file: !2, line: 17, type: !38)
!38 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !39, line: 26, baseType: !40)
!39 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "649b383a60bfa3eb90e85840b2b0be20")
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !34, line: 41, baseType: !21)
!41 = !DILocation(line: 17, column: 10, scope: !18)
!42 = !DILocalVariable(name: "linebytes", scope: !18, file: !2, line: 18, type: !38)
!43 = !DILocation(line: 18, column: 10, scope: !18)
!44 = !DILocation(line: 20, column: 6, scope: !45)
!45 = distinct !DILexicalBlock(scope: !18, file: !2, line: 20, column: 6)
!46 = !DILocation(line: 20, column: 11, scope: !45)
!47 = !DILocation(line: 21, column: 3, scope: !48)
!48 = distinct !DILexicalBlock(scope: !45, file: !2, line: 20, column: 16)
!49 = !DILocation(line: 24, column: 6, scope: !50)
!50 = distinct !DILexicalBlock(scope: !18, file: !2, line: 24, column: 6)
!51 = !DILocation(line: 24, column: 11, scope: !50)
!52 = !DILocation(line: 25, column: 19, scope: !53)
!53 = distinct !DILexicalBlock(scope: !50, file: !2, line: 24, column: 16)
!54 = !DILocation(line: 25, column: 12, scope: !53)
!55 = !DILocation(line: 25, column: 10, scope: !53)
!56 = !DILocation(line: 26, column: 2, scope: !53)
!57 = !DILocation(line: 28, column: 11, scope: !18)
!58 = !DILocation(line: 28, column: 9, scope: !18)
!59 = !DILocation(line: 29, column: 2, scope: !18)
!60 = !DILocalVariable(name: "linebuf", scope: !61, file: !2, line: 30, type: !62)
!61 = distinct !DILexicalBlock(scope: !18, file: !2, line: 29, column: 5)
!62 = !DICompositeType(tag: DW_TAG_array_type, baseType: !63, size: 128, elements: !64)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65}
!65 = !DISubrange(count: 16)
!66 = !DILocation(line: 30, column: 17, scope: !61)
!67 = !DILocation(line: 31, column: 16, scope: !61)
!68 = !DILocation(line: 31, column: 23, scope: !61)
!69 = !DILocation(line: 31, column: 15, scope: !61)
!70 = !DILocation(line: 31, column: 58, scope: !61)
!71 = !DILocation(line: 31, column: 13, scope: !61)
!72 = !DILocation(line: 32, column: 18, scope: !61)
!73 = !DILocation(line: 32, column: 3, scope: !61)
!74 = !DILocation(line: 33, column: 21, scope: !61)
!75 = !DILocation(line: 33, column: 30, scope: !61)
!76 = !DILocation(line: 33, column: 3, scope: !61)
!77 = !DILocation(line: 34, column: 13, scope: !61)
!78 = !DILocation(line: 34, column: 10, scope: !61)
!79 = !DILocation(line: 35, column: 2, scope: !61)
!80 = !DILocation(line: 35, column: 11, scope: !18)
!81 = !DILocation(line: 35, column: 18, scope: !18)
!82 = distinct !{!82, !59, !83, !84}
!83 = !DILocation(line: 35, column: 21, scope: !18)
!84 = !{!"llvm.loop.mustprogress"}
!85 = !DILocation(line: 37, column: 2, scope: !18)
!86 = !DILocation(line: 38, column: 1, scope: !18)
!87 = distinct !DISubprogram(name: "i2c_read_bytewise", scope: !2, file: !2, line: 45, type: !88, scopeLine: 45, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !25)
!88 = !DISubroutineType(types: !89)
!89 = !{!21, !90, !31}
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64)
!91 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !32, line: 24, baseType: !92)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !34, line: 38, baseType: !63)
!93 = !DILocalVariable(name: "buffer", arg: 1, scope: !87, file: !2, line: 45, type: !90)
!94 = !DILocation(line: 45, column: 32, scope: !87)
!95 = !DILocalVariable(name: "len", arg: 2, scope: !87, file: !2, line: 45, type: !31)
!96 = !DILocation(line: 45, column: 49, scope: !87)
!97 = !DILocalVariable(name: "msg", scope: !87, file: !2, line: 46, type: !98)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !99, size: 128, elements: !102)
!99 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "i2c_msg", file: !2, line: 40, size: 64, elements: !100)
!100 = !{!101}
!101 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !99, file: !2, line: 41, baseType: !90, size: 64)
!102 = !{!103}
!103 = !DISubrange(count: 2)
!104 = !DILocation(line: 46, column: 17, scope: !87)
!105 = !DILocalVariable(name: "ptr", scope: !87, file: !2, line: 46, type: !106)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !99, size: 64)
!107 = !DILocation(line: 46, column: 26, scope: !87)
!108 = !DILocalVariable(name: "i", scope: !87, file: !2, line: 47, type: !21)
!109 = !DILocation(line: 47, column: 6, scope: !87)
!110 = !DILocation(line: 50, column: 9, scope: !111)
!111 = distinct !DILexicalBlock(scope: !87, file: !2, line: 50, column: 2)
!112 = !DILocation(line: 50, column: 7, scope: !111)
!113 = !DILocation(line: 50, column: 14, scope: !114)
!114 = distinct !DILexicalBlock(scope: !111, file: !2, line: 50, column: 2)
!115 = !DILocation(line: 50, column: 18, scope: !114)
!116 = !DILocation(line: 50, column: 16, scope: !114)
!117 = !DILocation(line: 50, column: 2, scope: !111)
!118 = !DILocation(line: 51, column: 9, scope: !119)
!119 = distinct !DILexicalBlock(scope: !114, file: !2, line: 50, column: 28)
!120 = !DILocation(line: 51, column: 13, scope: !119)
!121 = !DILocation(line: 51, column: 7, scope: !119)
!122 = !DILocation(line: 53, column: 15, scope: !119)
!123 = !DILocation(line: 53, column: 22, scope: !119)
!124 = !DILocation(line: 53, column: 3, scope: !119)
!125 = !DILocation(line: 53, column: 8, scope: !119)
!126 = !DILocation(line: 53, column: 12, scope: !119)
!127 = !DILocation(line: 54, column: 6, scope: !119)
!128 = !DILocation(line: 55, column: 2, scope: !119)
!129 = !DILocation(line: 50, column: 24, scope: !114)
!130 = !DILocation(line: 50, column: 2, scope: !114)
!131 = distinct !{!131, !117, !132, !84}
!132 = !DILocation(line: 55, column: 2, scope: !111)
!133 = !DILocation(line: 57, column: 2, scope: !87)
!134 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 60, type: !135, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !25)
!135 = !DISubroutineType(types: !136)
!136 = !{!21, !21, !137}
!137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!138 = !DILocalVariable(name: "argc", arg: 1, scope: !134, file: !2, line: 60, type: !21)
!139 = !DILocation(line: 60, column: 14, scope: !134)
!140 = !DILocalVariable(name: "argv", arg: 2, scope: !134, file: !2, line: 60, type: !137)
!141 = !DILocation(line: 60, column: 26, scope: !134)
!142 = !DILocation(line: 61, column: 12, scope: !134)
!143 = !DILocation(line: 61, column: 18, scope: !134)
!144 = !DILocation(line: 61, column: 2, scope: !134)
!145 = !DILocation(line: 62, column: 1, scope: !134)
