; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2022-34835-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2022-34835-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.i2c_msg = type { ptr }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_i2c_md(i32 noundef %argc, ptr noundef %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %length = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %linebytes = alloca i32, align 4
  %linebuf = alloca [16 x i8], align 16
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  store i32 0, ptr %length, align 4
  %0 = load i32, ptr %argc.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %argc.addr, align 4
  %cmp1 = icmp sgt i32 %1, 3
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load ptr, ptr %argv.addr, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 3
  %3 = load ptr, ptr %arrayidx, align 8
  %call = call i64 @strtol(ptr noundef %3, ptr noundef null, i32 noundef 16) #3
  %conv = trunc i64 %call to i32
  store i32 %conv, ptr %length, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, ptr %length, align 4
  store i32 %4, ptr %nbytes, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end3
  %5 = load i32, ptr %nbytes, align 4
  %cmp4 = icmp sgt i32 %5, 16
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %6 = load i32, ptr %nbytes, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 16, %cond.true ], [ %6, %cond.false ]
  store i32 %cond, ptr %linebytes, align 4
  %7 = load i32, ptr %linebytes, align 4
  %call6 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %7)
  %arraydecay = getelementptr inbounds [16 x i8], ptr %linebuf, i64 0, i64 0
  %8 = load i32, ptr %linebytes, align 4
  %call7 = call i32 @i2c_read_bytewise(ptr noundef %arraydecay, i32 noundef %8)
  %9 = load i32, ptr %linebytes, align 4
  %10 = load i32, ptr %nbytes, align 4
  %sub = sub nsw i32 %10, %9
  store i32 %sub, ptr %nbytes, align 4
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %11 = load i32, ptr %nbytes, align 4
  %cmp8 = icmp sgt i32 %11, 0
  br i1 %cmp8, label %do.body, label %do.end, !llvm.loop !6

do.end:                                           ; preds = %do.cond
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load i32, ptr %retval, align 4
  ret i32 %12
}

; Function Attrs: nounwind
declare i64 @strtol(ptr noundef, ptr noundef, i32 noundef) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @i2c_read_bytewise(ptr noundef %buffer, i32 noundef %len) #0 {
entry:
  %buffer.addr = alloca ptr, align 8
  %len.addr = alloca i32, align 4
  %msg = alloca [2 x %struct.i2c_msg], align 16
  %ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  store ptr %buffer, ptr %buffer.addr, align 8
  store i32 %len, ptr %len.addr, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %1 = load i32, ptr %len.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [2 x %struct.i2c_msg], ptr %msg, i64 0, i64 0
  %add.ptr = getelementptr inbounds %struct.i2c_msg, ptr %arraydecay, i64 1
  store ptr %add.ptr, ptr %ptr, align 8
  %2 = load ptr, ptr %buffer.addr, align 8
  %3 = load i32, ptr %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 %idxprom
  %4 = load ptr, ptr %ptr, align 8
  %buf = getelementptr inbounds %struct.i2c_msg, ptr %4, i32 0, i32 0
  store ptr %arrayidx, ptr %buf, align 8
  %5 = load ptr, ptr %ptr, align 8
  %incdec.ptr = getelementptr inbounds %struct.i2c_msg, ptr %5, i32 1
  store ptr %incdec.ptr, ptr %ptr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  %0 = load i32, ptr %argc.addr, align 4
  %1 = load ptr, ptr %argv.addr, align 8
  %call = call i32 @do_i2c_md(i32 noundef %0, ptr noundef %1)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
