; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/INTERVAL_test_50-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_50-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @loop(i32 noundef %a) #0 !dbg !10 {
entry:
  %a.addr = alloca i32, align 4
  %output = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %a, ptr %a.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %a.addr, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata ptr %output, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 0, ptr %output, align 4, !dbg !19
  call void @llvm.dbg.declare(metadata ptr %i, metadata !20, metadata !DIExpression()), !dbg !21
  store i32 1, ptr %i, align 4, !dbg !21
  br label %while.body, !dbg !22

while.body:                                       ; preds = %if.end3, %entry
  %0 = load i32, ptr %i, align 4, !dbg !23
  %rem = srem i32 %0, 2, !dbg !26
  %cmp = icmp eq i32 %rem, 0, !dbg !27
  br i1 %cmp, label %if.then, label %if.end, !dbg !28

if.then:                                          ; preds = %while.body
  %1 = load i32, ptr %output, align 4, !dbg !29
  %inc = add nsw i32 %1, 1, !dbg !29
  store i32 %inc, ptr %output, align 4, !dbg !29
  br label %if.end, !dbg !31

if.end:                                           ; preds = %if.then, %while.body
  %2 = load i32, ptr %i, align 4, !dbg !32
  %3 = load i32, ptr %a.addr, align 4, !dbg !34
  %cmp1 = icmp eq i32 %2, %3, !dbg !35
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !36

if.then2:                                         ; preds = %if.end
  br label %while.end, !dbg !37

if.end3:                                          ; preds = %if.end
  %4 = load i32, ptr %i, align 4, !dbg !39
  %inc4 = add nsw i32 %4, 1, !dbg !39
  store i32 %inc4, ptr %i, align 4, !dbg !39
  br label %while.body, !dbg !22, !llvm.loop !40

while.end:                                        ; preds = %if.then2
  %5 = load i32, ptr %output, align 4, !dbg !42
  ret i32 %5, !dbg !43
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !44 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %output = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %a, metadata !47, metadata !DIExpression()), !dbg !48
  call void @llvm.dbg.declare(metadata ptr %output, metadata !49, metadata !DIExpression()), !dbg !50
  store i32 0, ptr %output, align 4, !dbg !50
  %0 = load i32, ptr %a, align 4, !dbg !51
  %cmp = icmp sgt i32 %0, 0, !dbg !53
  br i1 %cmp, label %if.then, label %if.else, !dbg !54

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %a, align 4, !dbg !55
  %call = call i32 @loop(i32 noundef %1), !dbg !57
  store i32 %call, ptr %output, align 4, !dbg !58
  %2 = load i32, ptr %output, align 4, !dbg !59
  %3 = load i32, ptr %a, align 4, !dbg !60
  %div = sdiv i32 %3, 2, !dbg !61
  %cmp1 = icmp eq i32 %2, %div, !dbg !62
  call void @svf_assert(i1 noundef zeroext %cmp1), !dbg !63
  br label %if.end, !dbg !64

if.else:                                          ; preds = %entry
  %4 = load i32, ptr %output, align 4, !dbg !65
  %cmp2 = icmp eq i32 %4, 0, !dbg !67
  call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !68
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, ptr %retval, align 4, !dbg !69
  ret i32 %5, !dbg !69
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/INTERVAL_test_50-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e96c3fbe1c74c7ab4d61f76bad33d29c")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "loop", scope: !11, file: !11, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_assert_tests/INTERVAL_test_50-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e96c3fbe1c74c7ab4d61f76bad33d29c")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !11, line: 5, type: !14)
!17 = !DILocation(line: 5, column: 14, scope: !10)
!18 = !DILocalVariable(name: "output", scope: !10, file: !11, line: 6, type: !14)
!19 = !DILocation(line: 6, column: 9, scope: !10)
!20 = !DILocalVariable(name: "i", scope: !10, file: !11, line: 7, type: !14)
!21 = !DILocation(line: 7, column: 9, scope: !10)
!22 = !DILocation(line: 8, column: 5, scope: !10)
!23 = !DILocation(line: 9, column: 12, scope: !24)
!24 = distinct !DILexicalBlock(scope: !25, file: !11, line: 9, column: 12)
!25 = distinct !DILexicalBlock(scope: !10, file: !11, line: 8, column: 17)
!26 = !DILocation(line: 9, column: 14, scope: !24)
!27 = !DILocation(line: 9, column: 18, scope: !24)
!28 = !DILocation(line: 9, column: 12, scope: !25)
!29 = !DILocation(line: 10, column: 19, scope: !30)
!30 = distinct !DILexicalBlock(scope: !24, file: !11, line: 9, column: 24)
!31 = !DILocation(line: 11, column: 9, scope: !30)
!32 = !DILocation(line: 12, column: 12, scope: !33)
!33 = distinct !DILexicalBlock(scope: !25, file: !11, line: 12, column: 12)
!34 = !DILocation(line: 12, column: 17, scope: !33)
!35 = !DILocation(line: 12, column: 14, scope: !33)
!36 = !DILocation(line: 12, column: 12, scope: !25)
!37 = !DILocation(line: 13, column: 13, scope: !38)
!38 = distinct !DILexicalBlock(scope: !33, file: !11, line: 12, column: 20)
!39 = !DILocation(line: 15, column: 10, scope: !25)
!40 = distinct !{!40, !22, !41}
!41 = !DILocation(line: 16, column: 5, scope: !10)
!42 = !DILocation(line: 17, column: 12, scope: !10)
!43 = !DILocation(line: 17, column: 5, scope: !10)
!44 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 20, type: !45, scopeLine: 20, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!45 = !DISubroutineType(types: !46)
!46 = !{!14}
!47 = !DILocalVariable(name: "a", scope: !44, file: !11, line: 21, type: !14)
!48 = !DILocation(line: 21, column: 9, scope: !44)
!49 = !DILocalVariable(name: "output", scope: !44, file: !11, line: 22, type: !14)
!50 = !DILocation(line: 22, column: 9, scope: !44)
!51 = !DILocation(line: 23, column: 8, scope: !52)
!52 = distinct !DILexicalBlock(scope: !44, file: !11, line: 23, column: 8)
!53 = !DILocation(line: 23, column: 10, scope: !52)
!54 = !DILocation(line: 23, column: 8, scope: !44)
!55 = !DILocation(line: 24, column: 23, scope: !56)
!56 = distinct !DILexicalBlock(scope: !52, file: !11, line: 23, column: 15)
!57 = !DILocation(line: 24, column: 18, scope: !56)
!58 = !DILocation(line: 24, column: 16, scope: !56)
!59 = !DILocation(line: 25, column: 20, scope: !56)
!60 = !DILocation(line: 25, column: 30, scope: !56)
!61 = !DILocation(line: 25, column: 31, scope: !56)
!62 = !DILocation(line: 25, column: 27, scope: !56)
!63 = !DILocation(line: 25, column: 9, scope: !56)
!64 = !DILocation(line: 26, column: 5, scope: !56)
!65 = !DILocation(line: 28, column: 20, scope: !66)
!66 = distinct !DILexicalBlock(scope: !52, file: !11, line: 27, column: 10)
!67 = !DILocation(line: 28, column: 27, scope: !66)
!68 = !DILocation(line: 28, column: 9, scope: !66)
!69 = !DILocation(line: 30, column: 1, scope: !44)
