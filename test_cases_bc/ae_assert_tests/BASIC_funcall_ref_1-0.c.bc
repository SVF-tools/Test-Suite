; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_assert_tests/BASIC_funcall_ref_1-0.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_funcall_ref_1-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @swap(ptr noundef %p, ptr noundef %q) #0 !dbg !10 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  %t = alloca i32, align 4
  store ptr %p, ptr %p.addr, align 8
    #dbg_declare(ptr %p.addr, !17, !DIExpression(), !18)
  store ptr %q, ptr %q.addr, align 8
    #dbg_declare(ptr %q.addr, !19, !DIExpression(), !20)
    #dbg_declare(ptr %t, !21, !DIExpression(), !22)
  %0 = load ptr, ptr %p.addr, align 8, !dbg !23
  %1 = load i32, ptr %0, align 4, !dbg !24
  store i32 %1, ptr %t, align 4, !dbg !22
  %2 = load ptr, ptr %q.addr, align 8, !dbg !25
  %3 = load i32, ptr %2, align 4, !dbg !26
  %4 = load ptr, ptr %p.addr, align 8, !dbg !27
  store i32 %3, ptr %4, align 4, !dbg !28
  %5 = load i32, ptr %t, align 4, !dbg !29
  %6 = load ptr, ptr %q.addr, align 8, !dbg !30
  store i32 %5, ptr %6, align 4, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !33 {
entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
    #dbg_declare(ptr %a, !36, !DIExpression(), !37)
  store i32 0, ptr %a, align 4, !dbg !37
    #dbg_declare(ptr %b, !38, !DIExpression(), !39)
  store i32 1, ptr %b, align 4, !dbg !39
  call void @swap(ptr noundef %a, ptr noundef %b), !dbg !40
  %0 = load i32, ptr %a, align 4, !dbg !41
  %cmp = icmp eq i32 %0, 1, !dbg !42
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !43
  ret i32 0, !dbg !44
}

declare void @svf_assert(i1 noundef zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_assert_tests/BASIC_funcall_ref_1-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "146ff971d14b3e0a87c8df25db9c4c88")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!10 = distinct !DISubprogram(name: "swap", scope: !11, file: !11, line: 8, type: !12, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!11 = !DIFile(filename: "src/ae_assert_tests/BASIC_funcall_ref_1-0.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "146ff971d14b3e0a87c8df25db9c4c88")
!12 = !DISubroutineType(types: !13)
!13 = !{null, !14, !14}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !{}
!17 = !DILocalVariable(name: "p", arg: 1, scope: !10, file: !11, line: 8, type: !14)
!18 = !DILocation(line: 8, column: 16, scope: !10)
!19 = !DILocalVariable(name: "q", arg: 2, scope: !10, file: !11, line: 8, type: !14)
!20 = !DILocation(line: 8, column: 24, scope: !10)
!21 = !DILocalVariable(name: "t", scope: !10, file: !11, line: 9, type: !15)
!22 = !DILocation(line: 9, column: 9, scope: !10)
!23 = !DILocation(line: 9, column: 14, scope: !10)
!24 = !DILocation(line: 9, column: 13, scope: !10)
!25 = !DILocation(line: 10, column: 11, scope: !10)
!26 = !DILocation(line: 10, column: 10, scope: !10)
!27 = !DILocation(line: 10, column: 6, scope: !10)
!28 = !DILocation(line: 10, column: 8, scope: !10)
!29 = !DILocation(line: 11, column: 10, scope: !10)
!30 = !DILocation(line: 11, column: 6, scope: !10)
!31 = !DILocation(line: 11, column: 8, scope: !10)
!32 = !DILocation(line: 12, column: 1, scope: !10)
!33 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 14, type: !34, scopeLine: 14, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!34 = !DISubroutineType(types: !35)
!35 = !{!15}
!36 = !DILocalVariable(name: "a", scope: !33, file: !11, line: 15, type: !15)
!37 = !DILocation(line: 15, column: 8, scope: !33)
!38 = !DILocalVariable(name: "b", scope: !33, file: !11, line: 15, type: !15)
!39 = !DILocation(line: 15, column: 15, scope: !33)
!40 = !DILocation(line: 16, column: 5, scope: !33)
!41 = !DILocation(line: 17, column: 16, scope: !33)
!42 = !DILocation(line: 17, column: 18, scope: !33)
!43 = !DILocation(line: 17, column: 5, scope: !33)
!44 = !DILocation(line: 18, column: 1, scope: !33)
