; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_assert_tests/CVE-2021-45341-0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2021-45341-0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1, !dbg !7
@.str.2 = private unnamed_addr constant [668 x i8] c"255 513 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\00", align 1, !dbg !12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Serialize(ptr noundef %ifstr) #0 !dbg !28 {
entry:
  %ifstr.addr = alloca ptr, align 8
  %wd = alloca i32, align 4
  %buf = alloca [512 x i8], align 16
  %ifstr_cpy = alloca ptr, align 8
  %token = alloca ptr, align 8
  store ptr %ifstr, ptr %ifstr.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %ifstr.addr, metadata !33, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.declare(metadata ptr %wd, metadata !35, metadata !DIExpression()), !dbg !37
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !38, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.declare(metadata ptr %ifstr_cpy, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load ptr, ptr %ifstr.addr, align 8, !dbg !45
  %call = call i64 @strlen(ptr noundef %0) #6, !dbg !46
  %add = add i64 %call, 1, !dbg !47
  %call1 = call noalias ptr @malloc(i64 noundef %add) #7, !dbg !48
  store ptr %call1, ptr %ifstr_cpy, align 8, !dbg !44
  %1 = load ptr, ptr %ifstr_cpy, align 8, !dbg !49
  %2 = load ptr, ptr %ifstr.addr, align 8, !dbg !50
  %call2 = call ptr @strcpy(ptr noundef %1, ptr noundef %2) #8, !dbg !51
  call void @llvm.dbg.declare(metadata ptr %token, metadata !52, metadata !DIExpression()), !dbg !53
  %3 = load ptr, ptr %ifstr_cpy, align 8, !dbg !54
  %call3 = call ptr @strtok(ptr noundef %3, ptr noundef @.str) #8, !dbg !55
  store ptr %call3, ptr %token, align 8, !dbg !53
  %call4 = call ptr @strtok(ptr noundef null, ptr noundef @.str) #8, !dbg !56
  store ptr %call4, ptr %token, align 8, !dbg !59
  %4 = load ptr, ptr %token, align 8, !dbg !60
  %call5 = call i32 @atoi(ptr noundef %4) #6, !dbg !61
  store i32 %call5, ptr %wd, align 4, !dbg !62
  %call6 = call ptr @strtok(ptr noundef null, ptr noundef @.str.1) #8, !dbg !63
  store ptr %call6, ptr %token, align 8, !dbg !64
  %arraydecay = getelementptr inbounds [512 x i8], ptr %buf, i64 0, i64 0, !dbg !65
  %5 = load ptr, ptr %token, align 8, !dbg !66
  %6 = load i32, ptr %wd, align 4, !dbg !67
  %conv = sext i32 %6 to i64, !dbg !67
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %arraydecay, ptr align 1 %5, i64 %conv, i1 false), !dbg !65
  %7 = load i32, ptr %wd, align 4, !dbg !68
  %idxprom = sext i32 %7 to i64, !dbg !69
  %arrayidx = getelementptr inbounds [512 x i8], ptr %buf, i64 0, i64 %idxprom, !dbg !69
  store i8 0, ptr %arrayidx, align 1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #3

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #4

; Function Attrs: nounwind
declare ptr @strtok(ptr noundef, ptr noundef) #4

; Function Attrs: nounwind willreturn memory(read)
declare i32 @atoi(ptr noundef) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !72 {
entry:
  %ifstr = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %ifstr, metadata !75, metadata !DIExpression()), !dbg !76
  store ptr @.str.2, ptr %ifstr, align 8, !dbg !76
  %0 = load ptr, ptr %ifstr, align 8, !dbg !77
  call void @Serialize(ptr noundef %0), !dbg !78
  ret i32 0, !dbg !79
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nounwind willreturn memory(read) }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!17}
!llvm.module.flags = !{!20, !21, !22, !23, !24, !25, !26}
!llvm.ident = !{!27}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_assert_tests/CVE-2021-45341-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "3c85638a1acfc594f6d0ee0dc167f016")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 2)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 25, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 8, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 1)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 34, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 5344, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 668)
!17 = distinct !DICompileUnit(language: DW_LANG_C11, file: !18, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !19, splitDebugInlining: false, nameTableKind: None)
!18 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_assert_tests/CVE-2021-45341-0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "3c85638a1acfc594f6d0ee0dc167f016")
!19 = !{!0, !7, !12}
!20 = !{i32 7, !"Dwarf Version", i32 5}
!21 = !{i32 2, !"Debug Info Version", i32 3}
!22 = !{i32 1, !"wchar_size", i32 4}
!23 = !{i32 8, !"PIC Level", i32 2}
!24 = !{i32 7, !"PIE Level", i32 2}
!25 = !{i32 7, !"uwtable", i32 2}
!26 = !{i32 7, !"frame-pointer", i32 2}
!27 = !{!"clang version 16.0.0"}
!28 = distinct !DISubprogram(name: "Serialize", scope: !2, file: !2, line: 13, type: !29, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !32)
!29 = !DISubroutineType(types: !30)
!30 = !{null, !31}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!32 = !{}
!33 = !DILocalVariable(name: "ifstr", arg: 1, scope: !28, file: !2, line: 13, type: !31)
!34 = !DILocation(line: 13, column: 22, scope: !28)
!35 = !DILocalVariable(name: "wd", scope: !28, file: !2, line: 14, type: !36)
!36 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!37 = !DILocation(line: 14, column: 9, scope: !28)
!38 = !DILocalVariable(name: "buf", scope: !28, file: !2, line: 15, type: !39)
!39 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 4096, elements: !40)
!40 = !{!41}
!41 = !DISubrange(count: 512)
!42 = !DILocation(line: 15, column: 10, scope: !28)
!43 = !DILocalVariable(name: "ifstr_cpy", scope: !28, file: !2, line: 17, type: !31)
!44 = !DILocation(line: 17, column: 11, scope: !28)
!45 = !DILocation(line: 17, column: 37, scope: !28)
!46 = !DILocation(line: 17, column: 30, scope: !28)
!47 = !DILocation(line: 17, column: 44, scope: !28)
!48 = !DILocation(line: 17, column: 23, scope: !28)
!49 = !DILocation(line: 18, column: 12, scope: !28)
!50 = !DILocation(line: 18, column: 23, scope: !28)
!51 = !DILocation(line: 18, column: 5, scope: !28)
!52 = !DILocalVariable(name: "token", scope: !28, file: !2, line: 19, type: !31)
!53 = !DILocation(line: 19, column: 11, scope: !28)
!54 = !DILocation(line: 19, column: 26, scope: !28)
!55 = !DILocation(line: 19, column: 19, scope: !28)
!56 = !DILocation(line: 22, column: 17, scope: !57)
!57 = distinct !DILexicalBlock(scope: !58, file: !2, line: 21, column: 14)
!58 = distinct !DILexicalBlock(scope: !28, file: !2, line: 21, column: 8)
!59 = !DILocation(line: 22, column: 15, scope: !57)
!60 = !DILocation(line: 23, column: 19, scope: !57)
!61 = !DILocation(line: 23, column: 14, scope: !57)
!62 = !DILocation(line: 23, column: 12, scope: !57)
!63 = !DILocation(line: 25, column: 17, scope: !57)
!64 = !DILocation(line: 25, column: 15, scope: !57)
!65 = !DILocation(line: 27, column: 9, scope: !57)
!66 = !DILocation(line: 27, column: 21, scope: !57)
!67 = !DILocation(line: 27, column: 28, scope: !57)
!68 = !DILocation(line: 28, column: 13, scope: !57)
!69 = !DILocation(line: 28, column: 9, scope: !57)
!70 = !DILocation(line: 28, column: 17, scope: !57)
!71 = !DILocation(line: 31, column: 1, scope: !28)
!72 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 33, type: !73, scopeLine: 33, spFlags: DISPFlagDefinition, unit: !17, retainedNodes: !32)
!73 = !DISubroutineType(types: !74)
!74 = !{!36}
!75 = !DILocalVariable(name: "ifstr", scope: !72, file: !2, line: 34, type: !31)
!76 = !DILocation(line: 34, column: 11, scope: !72)
!77 = !DILocation(line: 35, column: 15, scope: !72)
!78 = !DILocation(line: 35, column: 5, scope: !72)
!79 = !DILocation(line: 36, column: 1, scope: !72)
