; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/byteoffset1.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/byteoffset1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.StructA = type { i32, ptr }

@.str = private unnamed_addr constant [6 x i8] c"%c%c\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load ptr, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %0, ptr noundef %1)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @FuncA() #0 {
entry:
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @CallF(ptr noundef %structA) #0 {
entry:
  %structA.addr = alloca ptr, align 8
  %ret = alloca i32, align 4
  store ptr %structA, ptr %structA.addr, align 8
  %0 = load ptr, ptr %structA.addr, align 8
  %f = getelementptr inbounds %struct.StructA, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %f, align 8
  %call = call i32 %1()
  store i32 %call, ptr %ret, align 4
  %2 = load ptr, ptr %structA.addr, align 8
  %f1 = getelementptr inbounds %struct.StructA, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %f1, align 8
  call void @MAYALIAS(ptr noundef %3, ptr noundef @FuncA)
  %4 = load i32, ptr %ret, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %structA = alloca ptr, align 8
  %ret = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call ptr @malloc(i64 noundef 16) #3
  store ptr %call, ptr %structA, align 8
  %0 = load ptr, ptr %structA, align 8
  %f = getelementptr inbounds %struct.StructA, ptr %0, i32 0, i32 1
  store ptr @FuncA, ptr %f, align 8
  %1 = load ptr, ptr %structA, align 8
  %call1 = call i32 @CallF(ptr noundef %1)
  store i32 %call1, ptr %ret, align 4
  %2 = load i32, ptr %ret, align 4
  ret i32 %2
}

; Function Attrs: allocsize(0)
declare ptr @malloc(i64 noundef) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
