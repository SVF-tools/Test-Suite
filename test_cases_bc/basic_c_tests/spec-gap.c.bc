; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/spec-gap.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-gap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TypHeader = type { ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@HdFree = dso_local global ptr null, align 8
@FirstBag = dso_local global ptr null, align 8
@FreeHandle = dso_local global ptr null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  store ptr %lev, ptr %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0)
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  %call2 = call i32 @getchar()
  ret void
}

declare i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SyGetmem(i64 noundef %size) #0 {
entry:
  %retval = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  store i64 %size, ptr %size.addr, align 8
  %0 = load ptr, ptr %retval, align 8
  ret ptr %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @IntComm() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NewBag() #0 {
entry:
  %needed = alloca i64, align 8
  %d = alloca ptr, align 8
  %s = alloca ptr, align 8
  %e = alloca ptr, align 8
  %h = alloca ptr, align 8
  %0 = load ptr, ptr @HdFree, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %ptr, align 8
  %2 = load i64, ptr %needed, align 8
  %div = udiv i64 %2, 8
  %add.ptr = getelementptr inbounds ptr, ptr %1, i64 %div
  %add.ptr1 = getelementptr inbounds ptr, ptr %add.ptr, i64 -1
  store ptr %add.ptr1, ptr %d, align 8
  %3 = load ptr, ptr @HdFree, align 8
  %ptr2 = getelementptr inbounds %struct.TypHeader, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %ptr2, align 8
  %add.ptr3 = getelementptr inbounds ptr, ptr %4, i64 -1
  store ptr %add.ptr3, ptr %s, align 8
  %5 = load ptr, ptr @FirstBag, align 8
  %add.ptr4 = getelementptr inbounds ptr, ptr %5, i64 -1
  store ptr %add.ptr4, ptr %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load ptr, ptr %e, align 8
  %7 = load ptr, ptr %s, align 8
  %cmp = icmp ule ptr %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load ptr, ptr %s, align 8
  %incdec.ptr = getelementptr inbounds ptr, ptr %8, i32 -1
  store ptr %incdec.ptr, ptr %s, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %d, align 8
  %incdec.ptr5 = getelementptr inbounds ptr, ptr %10, i32 -1
  store ptr %incdec.ptr5, ptr %d, align 8
  store ptr %9, ptr %10, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %while.cond
  %11 = load ptr, ptr %s, align 8
  %12 = load ptr, ptr %11, align 8
  call void @MAYALIAS(ptr noundef %12, ptr noundef @IntComm)
  %13 = load ptr, ptr @HdFree, align 8
  store ptr %13, ptr %h, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %14 = load ptr, ptr %h, align 8
  %15 = load ptr, ptr @FirstBag, align 8
  %add.ptr6 = getelementptr inbounds ptr, ptr %15, i64 -1
  %cmp7 = icmp ult ptr %14, %add.ptr6
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, ptr %needed, align 8
  %div8 = udiv i64 %16, 8
  %17 = load ptr, ptr %h, align 8
  %ptr9 = getelementptr inbounds %struct.TypHeader, ptr %17, i32 0, i32 0
  %18 = load ptr, ptr %ptr9, align 8
  %add.ptr10 = getelementptr inbounds ptr, ptr %18, i64 %div8
  store ptr %add.ptr10, ptr %ptr9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load ptr, ptr %h, align 8
  %incdec.ptr11 = getelementptr inbounds %struct.TypHeader, ptr %19, i32 1
  store ptr %incdec.ptr11, ptr %h, align 8
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %20 = load ptr, ptr @FreeHandle, align 8
  %21 = load ptr, ptr %h, align 8
  %ptr12 = getelementptr inbounds %struct.TypHeader, ptr %21, i32 0, i32 0
  store ptr %20, ptr %ptr12, align 8
  %22 = load ptr, ptr %h, align 8
  store ptr %22, ptr @FreeHandle, align 8
  %23 = load ptr, ptr @FreeHandle, align 8
  ret ptr %23
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InstIntFunc(ptr noundef %func) #0 {
entry:
  %func.addr = alloca ptr, align 8
  %hdDef = alloca ptr, align 8
  store ptr %func, ptr %func.addr, align 8
  %call = call ptr @NewBag()
  store ptr %call, ptr %hdDef, align 8
  %0 = load ptr, ptr %func.addr, align 8
  %1 = load ptr, ptr %hdDef, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, ptr %1, i32 0, i32 0
  %2 = load ptr, ptr %ptr, align 8
  store ptr %0, ptr %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InitGasman() #0 {
entry:
  %SyMemory = alloca i64, align 8
  %0 = load i64, ptr %SyMemory, align 8
  %call = call ptr @SyGetmem(i64 noundef %0)
  store ptr %call, ptr @HdFree, align 8
  %1 = load ptr, ptr @FreeHandle, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, ptr %1, i32 0, i32 0
  %2 = load ptr, ptr %ptr, align 8
  store ptr %2, ptr @FreeHandle, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @InitGasman()
  call void @InstIntFunc(ptr noundef @IntComm)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
