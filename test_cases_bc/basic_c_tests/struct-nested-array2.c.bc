; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/struct-nested-array2.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/struct-nested-array2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ArrayStruct = type { i32, i8, %struct.MidArrayStruct, ptr }
%struct.MidArrayStruct = type { i8, [5 x %struct.InnerArrayStruct], [20 x double] }
%struct.InnerArrayStruct = type { [10 x ptr], i8, double }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  store ptr %lev, ptr %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0)
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  %call2 = call i32 @getchar()
  ret void
}

declare i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  %s = alloca %struct.ArrayStruct, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %out4 = getelementptr inbounds %struct.ArrayStruct, ptr %s, i32 0, i32 3
  store ptr %x, ptr %out4, align 8
  store ptr %s, ptr %p, align 8
  %out41 = getelementptr inbounds %struct.ArrayStruct, ptr %s, i32 0, i32 3
  %0 = load ptr, ptr %out41, align 8
  %1 = load ptr, ptr %p, align 8
  %out3 = getelementptr inbounds %struct.ArrayStruct, ptr %1, i32 0, i32 2
  %mid2 = getelementptr inbounds %struct.MidArrayStruct, ptr %out3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [5 x %struct.InnerArrayStruct], ptr %mid2, i64 0, i64 2
  %in1 = getelementptr inbounds %struct.InnerArrayStruct, ptr %arrayidx, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [10 x ptr], ptr %in1, i64 0, i64 2
  store ptr %0, ptr %arrayidx2, align 8
  %2 = load ptr, ptr %p, align 8
  %out33 = getelementptr inbounds %struct.ArrayStruct, ptr %2, i32 0, i32 2
  %mid24 = getelementptr inbounds %struct.MidArrayStruct, ptr %out33, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [5 x %struct.InnerArrayStruct], ptr %mid24, i64 0, i64 3
  %in16 = getelementptr inbounds %struct.InnerArrayStruct, ptr %arrayidx5, i32 0, i32 0
  %arrayidx7 = getelementptr inbounds [10 x ptr], ptr %in16, i64 0, i64 3
  store ptr %y, ptr %arrayidx7, align 8
  %3 = load ptr, ptr %p, align 8
  %out38 = getelementptr inbounds %struct.ArrayStruct, ptr %3, i32 0, i32 2
  %mid29 = getelementptr inbounds %struct.MidArrayStruct, ptr %out38, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [5 x %struct.InnerArrayStruct], ptr %mid29, i64 0, i64 1
  %in111 = getelementptr inbounds %struct.InnerArrayStruct, ptr %arrayidx10, i32 0, i32 0
  %arrayidx12 = getelementptr inbounds [10 x ptr], ptr %in111, i64 0, i64 1
  %4 = load ptr, ptr %arrayidx12, align 8
  call void @MAYALIAS(ptr noundef %4, ptr noundef %x)
  %out313 = getelementptr inbounds %struct.ArrayStruct, ptr %s, i32 0, i32 2
  %mid214 = getelementptr inbounds %struct.MidArrayStruct, ptr %out313, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [5 x %struct.InnerArrayStruct], ptr %mid214, i64 0, i64 3
  %in116 = getelementptr inbounds %struct.InnerArrayStruct, ptr %arrayidx15, i32 0, i32 0
  %arrayidx17 = getelementptr inbounds [10 x ptr], ptr %in116, i64 0, i64 0
  %5 = load ptr, ptr %arrayidx17, align 8
  call void @MAYALIAS(ptr noundef %5, ptr noundef %y)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
