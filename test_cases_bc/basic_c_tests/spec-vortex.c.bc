; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/spec-vortex.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-vortex.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Ory = type { ptr }
%struct.Rectangle = type { ptr }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@Theory = dso_local global ptr null, align 8
@PartLib01 = dso_local global ptr null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  store ptr %lev, ptr %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0)
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  %call2 = call i32 @getchar()
  ret void
}

declare i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Rectangle_draw(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @Void_ExtendCore(ptr noundef %p) #0 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %retval, align 8
  ret ptr %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CoreMoreCore(ptr noundef %Region) #0 {
entry:
  %Region.addr = alloca ptr, align 8
  %AllocCore1 = alloca i64, align 8
  store ptr %Region, ptr %Region.addr, align 8
  store i64 0, ptr %AllocCore1, align 8
  %call = call ptr @Void_ExtendCore(ptr noundef %AllocCore1)
  %0 = load ptr, ptr %Region.addr, align 8
  store ptr %call, ptr %0, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MemNewOry() #0 {
entry:
  %ChunkAddrPtr = alloca ptr, align 8
  %ChunkBlk = alloca ptr, align 8
  store ptr null, ptr %ChunkAddrPtr, align 8
  %call = call noalias ptr @calloc(i64 noundef 1, i64 noundef 8) #3
  store ptr %call, ptr %ChunkBlk, align 8
  call void @CoreMoreCore(ptr noundef @Theory)
  %0 = load ptr, ptr %ChunkBlk, align 8
  %1 = load ptr, ptr @Theory, align 8
  %ChunkAddr = getelementptr inbounds %struct.Ory, ptr %1, i32 0, i32 0
  store ptr %0, ptr %ChunkAddr, align 8
  %cmp = icmp ne ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr @Theory, align 8
  %ChunkAddr1 = getelementptr inbounds %struct.Ory, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %ChunkAddr1, align 8
  store ptr %3, ptr %ChunkAddrPtr, align 8
  %4 = load ptr, ptr %ChunkAddrPtr, align 8
  %5 = load ptr, ptr %ChunkAddrPtr, align 8
  store ptr %4, ptr %5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind allocsize(0,1)
declare noalias ptr @calloc(i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MemGetAddr(i32 noundef %Chunk, i32 noundef %index, ptr noundef %Addr) #0 {
entry:
  %Chunk.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %Addr.addr = alloca ptr, align 8
  store i32 %Chunk, ptr %Chunk.addr, align 4
  store i32 %index, ptr %index.addr, align 4
  store ptr %Addr, ptr %Addr.addr, align 8
  %0 = load ptr, ptr @Theory, align 8
  %ChunkAddr = getelementptr inbounds %struct.Ory, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %ChunkAddr, align 8
  %2 = load i32, ptr %Chunk.addr, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom
  %3 = load ptr, ptr %arrayidx, align 8
  %4 = load i32, ptr %index.addr, align 4
  %idx.ext = zext i32 %4 to i64
  %add.ptr = getelementptr inbounds ptr, ptr %3, i64 %idx.ext
  %5 = load ptr, ptr %add.ptr, align 8
  %6 = load ptr, ptr %Addr.addr, align 8
  store ptr %5, ptr %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Object_GetImage(ptr noundef %This) #0 {
entry:
  %This.addr = alloca ptr, align 8
  %chunk = alloca i32, align 4
  %index = alloca i32, align 4
  store ptr %This, ptr %This.addr, align 8
  %0 = load i32, ptr %chunk, align 4
  %1 = load i32, ptr %index, align 4
  %2 = load ptr, ptr %This.addr, align 8
  call void @MemGetAddr(i32 noundef %0, i32 noundef %1, ptr noundef %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Rectangle_new0() #0 {
entry:
  %Image = alloca ptr, align 8
  store ptr null, ptr %Image, align 8
  call void @Object_GetImage(ptr noundef %Image)
  %0 = load ptr, ptr %Image, align 8
  %draw = getelementptr inbounds %struct.Rectangle, ptr %0, i32 0, i32 0
  store ptr @Rectangle_draw, ptr %draw, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PartLib_Create(ptr noundef %PrimalObj) #0 {
entry:
  %PrimalObj.addr = alloca ptr, align 8
  store ptr %PrimalObj, ptr %PrimalObj.addr, align 8
  %0 = load ptr, ptr %PrimalObj.addr, align 8
  call void @Object_GetImage(ptr noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @PartLib_Create(ptr noundef @PartLib01)
  %0 = load ptr, ptr @PartLib01, align 8
  call void @NOALIAS(ptr noundef %0, ptr noundef @Rectangle_draw)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0,1) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
