; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/constraint-cycle-pwc.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/constraint-cycle-pwc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.network = type { ptr, ptr, ptr, ptr }
%struct.arc = type { ptr, ptr, i64 }

@.str = private unnamed_addr constant [13 x i8] c"hello world\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %net = alloca ptr, align 8
  %arc = alloca ptr, align 8
  %stop = alloca ptr, align 8
  %condition = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %0 = load ptr, ptr %net, align 8
  %stop_arcs = getelementptr inbounds %struct.network, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %stop_arcs, align 8
  store ptr %1, ptr %stop, align 8
  %2 = load ptr, ptr %net, align 8
  %arcs = getelementptr inbounds %struct.network, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %arcs, align 8
  store ptr %3, ptr %arc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load ptr, ptr %arc, align 8
  %5 = load ptr, ptr %stop, align 8
  %cmp = icmp ne ptr %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load ptr, ptr %arc, align 8
  %ident = getelementptr inbounds %struct.arc, ptr %6, i32 0, i32 2
  %7 = load i64, ptr %ident, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %if.then, label %if.end3

if.then:                                          ; preds = %for.body
  %8 = load i32, ptr %condition, align 4
  %tobool1 = icmp ne i32 %8, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3

if.end3:                                          ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end3
  %9 = load ptr, ptr %arc, align 8
  %incdec.ptr = getelementptr inbounds %struct.arc, ptr %9, i32 1
  store ptr %incdec.ptr, ptr %arc, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
