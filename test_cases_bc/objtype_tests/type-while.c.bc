; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/objtype_tests/type-while.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/objtype_tests/type-while.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.MyStruct = type { ptr, ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @TYPE_MALLOC(i32 noundef %n, i32 noundef %eleNum) #0 {
entry:
  %n.addr = alloca i32, align 4
  %eleNum.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  store i32 %eleNum, ptr %eleNum.addr, align 4
  %0 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias ptr @malloc(i64 noundef %conv) #2
  ret ptr %call
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  %num = alloca i32, align 4
  %q = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  %call = call ptr @TYPE_MALLOC(i32 noundef 16, i32 noundef 2)
  store ptr %call, ptr %p, align 8
  store i32 10, ptr %num, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, ptr %num, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call ptr @TYPE_MALLOC(i32 noundef 16, i32 noundef 2)
  %1 = load ptr, ptr %p, align 8
  %next = getelementptr inbounds %struct.MyStruct, ptr %1, i32 0, i32 1
  store ptr %call1, ptr %next, align 8
  %call2 = call ptr @TYPE_MALLOC(i32 noundef 4, i32 noundef 2)
  %2 = load ptr, ptr %p, align 8
  %next3 = getelementptr inbounds %struct.MyStruct, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %next3, align 8
  %f1 = getelementptr inbounds %struct.MyStruct, ptr %3, i32 0, i32 0
  store ptr %call2, ptr %f1, align 8
  %4 = load ptr, ptr %p, align 8
  %next4 = getelementptr inbounds %struct.MyStruct, ptr %4, i32 0, i32 1
  %5 = load ptr, ptr %next4, align 8
  store ptr %5, ptr %p, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %while.cond
  %6 = load ptr, ptr %p, align 8
  store ptr %6, ptr %q, align 8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
