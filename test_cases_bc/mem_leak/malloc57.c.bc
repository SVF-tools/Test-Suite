; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc57.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc57.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !12 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !18, metadata !DIExpression()), !dbg !19
  %0 = load i32, ptr %n.addr, align 4, !dbg !20
  %conv = sext i32 %0 to i64, !dbg !20
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !21
  ret ptr %call, !dbg !22
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !23 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr %n.addr, align 4, !dbg !26
  %conv = sext i32 %0 to i64, !dbg !26
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !27
  ret ptr %call, !dbg !28
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !29 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32, ptr %n.addr, align 4, !dbg !32
  %conv = sext i32 %0 to i64, !dbg !32
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !33
  ret ptr %call, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !35 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load i32, ptr %n.addr, align 4, !dbg !38
  %conv = sext i32 %0 to i64, !dbg !38
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !39
  ret ptr %call, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !41 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i32, ptr %n.addr, align 4, !dbg !44
  %conv = sext i32 %0 to i64, !dbg !44
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !45
  ret ptr %call, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !47 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %0 = load i32, ptr %n.addr, align 4, !dbg !50
  %conv = sext i32 %0 to i64, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !51
  ret ptr %call, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !53 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %0 = load i32, ptr %n.addr, align 4, !dbg !56
  %conv = sext i32 %0 to i64, !dbg !56
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !57
  ret ptr %call, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !59 {
entry:
  %retval = alloca i32, align 4
  %newfile = alloca ptr, align 8
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %newfile, metadata !63, metadata !DIExpression()), !dbg !65
  %call = call ptr @SAFEMALLOC(i32 noundef 190), !dbg !66
  store ptr %call, ptr %newfile, align 8, !dbg !65
  call void @llvm.dbg.declare(metadata ptr %i, metadata !67, metadata !DIExpression()), !dbg !68
  store i32 0, ptr %i, align 4, !dbg !68
  %0 = load ptr, ptr %newfile, align 8, !dbg !69
  %cmp = icmp eq ptr %0, null, !dbg !71
  br i1 %cmp, label %if.then, label %if.end, !dbg !72

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4, !dbg !73
  br label %return, !dbg !73

if.end:                                           ; preds = %entry
  br label %for.cond, !dbg !75

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, ptr %i, align 4, !dbg !76
  %cmp1 = icmp slt i32 %1, 10, !dbg !79
  br i1 %cmp1, label %for.body, label %for.end, !dbg !80

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !81

for.inc:                                          ; preds = %for.body
  %2 = load i32, ptr %i, align 4, !dbg !83
  %inc = add nsw i32 %2, 1, !dbg !83
  store i32 %inc, ptr %i, align 4, !dbg !83
  br label %for.cond, !dbg !84, !llvm.loop !85

for.end:                                          ; preds = %for.cond
  %3 = load ptr, ptr %newfile, align 8, !dbg !88
  call void @free(ptr noundef %3) #5, !dbg !89
  store i32 0, ptr %retval, align 4, !dbg !90
  br label %return, !dbg !90

return:                                           ; preds = %for.end, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !91
  ret i32 %4, !dbg !91
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!4, !5, !6, !7, !8, !9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc57.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "862bd465fd18a7513be19510ffcafdaf")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!4 = !{i32 7, !"Dwarf Version", i32 5}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{i32 8, !"PIC Level", i32 2}
!8 = !{i32 7, !"PIE Level", i32 2}
!9 = !{i32 7, !"uwtable", i32 2}
!10 = !{i32 7, !"frame-pointer", i32 2}
!11 = !{!"clang version 16.0.0"}
!12 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !13, file: !13, line: 5, type: !14, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!13 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!14 = !DISubroutineType(types: !15)
!15 = !{!3, !16}
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !{}
!18 = !DILocalVariable(name: "n", arg: 1, scope: !12, file: !13, line: 5, type: !16)
!19 = !DILocation(line: 5, column: 22, scope: !12)
!20 = !DILocation(line: 6, column: 17, scope: !12)
!21 = !DILocation(line: 6, column: 10, scope: !12)
!22 = !DILocation(line: 6, column: 3, scope: !12)
!23 = distinct !DISubprogram(name: "PLKMALLOC", scope: !13, file: !13, line: 9, type: !14, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!24 = !DILocalVariable(name: "n", arg: 1, scope: !23, file: !13, line: 9, type: !16)
!25 = !DILocation(line: 9, column: 21, scope: !23)
!26 = !DILocation(line: 10, column: 17, scope: !23)
!27 = !DILocation(line: 10, column: 10, scope: !23)
!28 = !DILocation(line: 10, column: 3, scope: !23)
!29 = distinct !DISubprogram(name: "NFRMALLOC", scope: !13, file: !13, line: 13, type: !14, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!30 = !DILocalVariable(name: "n", arg: 1, scope: !29, file: !13, line: 13, type: !16)
!31 = !DILocation(line: 13, column: 21, scope: !29)
!32 = !DILocation(line: 14, column: 17, scope: !29)
!33 = !DILocation(line: 14, column: 10, scope: !29)
!34 = !DILocation(line: 14, column: 3, scope: !29)
!35 = distinct !DISubprogram(name: "CLKMALLOC", scope: !13, file: !13, line: 17, type: !14, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!36 = !DILocalVariable(name: "n", arg: 1, scope: !35, file: !13, line: 17, type: !16)
!37 = !DILocation(line: 17, column: 21, scope: !35)
!38 = !DILocation(line: 18, column: 17, scope: !35)
!39 = !DILocation(line: 18, column: 10, scope: !35)
!40 = !DILocation(line: 18, column: 3, scope: !35)
!41 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !13, file: !13, line: 21, type: !14, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!42 = !DILocalVariable(name: "n", arg: 1, scope: !41, file: !13, line: 21, type: !16)
!43 = !DILocation(line: 21, column: 21, scope: !41)
!44 = !DILocation(line: 22, column: 17, scope: !41)
!45 = !DILocation(line: 22, column: 10, scope: !41)
!46 = !DILocation(line: 22, column: 3, scope: !41)
!47 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !13, file: !13, line: 25, type: !14, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!48 = !DILocalVariable(name: "n", arg: 1, scope: !47, file: !13, line: 25, type: !16)
!49 = !DILocation(line: 25, column: 21, scope: !47)
!50 = !DILocation(line: 26, column: 17, scope: !47)
!51 = !DILocation(line: 26, column: 10, scope: !47)
!52 = !DILocation(line: 26, column: 3, scope: !47)
!53 = distinct !DISubprogram(name: "LEAKFN", scope: !13, file: !13, line: 29, type: !14, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!54 = !DILocalVariable(name: "n", arg: 1, scope: !53, file: !13, line: 29, type: !16)
!55 = !DILocation(line: 29, column: 18, scope: !53)
!56 = !DILocation(line: 30, column: 17, scope: !53)
!57 = !DILocation(line: 30, column: 10, scope: !53)
!58 = !DILocation(line: 30, column: 3, scope: !53)
!59 = distinct !DISubprogram(name: "main", scope: !60, file: !60, line: 9, type: !61, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!60 = !DIFile(filename: "src/mem_leak/malloc57.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "862bd465fd18a7513be19510ffcafdaf")
!61 = !DISubroutineType(types: !62)
!62 = !{!16}
!63 = !DILocalVariable(name: "newfile", scope: !59, file: !60, line: 10, type: !64)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!65 = !DILocation(line: 10, column: 10, scope: !59)
!66 = !DILocation(line: 10, column: 20, scope: !59)
!67 = !DILocalVariable(name: "i", scope: !59, file: !60, line: 11, type: !16)
!68 = !DILocation(line: 11, column: 9, scope: !59)
!69 = !DILocation(line: 12, column: 8, scope: !70)
!70 = distinct !DILexicalBlock(scope: !59, file: !60, line: 12, column: 8)
!71 = !DILocation(line: 12, column: 15, scope: !70)
!72 = !DILocation(line: 12, column: 8, scope: !59)
!73 = !DILocation(line: 13, column: 9, scope: !74)
!74 = distinct !DILexicalBlock(scope: !70, file: !60, line: 12, column: 22)
!75 = !DILocation(line: 15, column: 5, scope: !59)
!76 = !DILocation(line: 15, column: 12, scope: !77)
!77 = distinct !DILexicalBlock(scope: !78, file: !60, line: 15, column: 5)
!78 = distinct !DILexicalBlock(scope: !59, file: !60, line: 15, column: 5)
!79 = !DILocation(line: 15, column: 14, scope: !77)
!80 = !DILocation(line: 15, column: 5, scope: !78)
!81 = !DILocation(line: 17, column: 5, scope: !82)
!82 = distinct !DILexicalBlock(scope: !77, file: !60, line: 16, column: 5)
!83 = !DILocation(line: 15, column: 21, scope: !77)
!84 = !DILocation(line: 15, column: 5, scope: !77)
!85 = distinct !{!85, !80, !86, !87}
!86 = !DILocation(line: 17, column: 5, scope: !78)
!87 = !{!"llvm.loop.mustprogress"}
!88 = !DILocation(line: 19, column: 10, scope: !59)
!89 = !DILocation(line: 19, column: 5, scope: !59)
!90 = !DILocation(line: 20, column: 5, scope: !59)
!91 = !DILocation(line: 21, column: 1, scope: !59)
