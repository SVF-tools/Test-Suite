; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc26.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !16 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32, ptr %n.addr, align 4, !dbg !24
  %conv = sext i32 %0 to i64, !dbg !24
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !25
  ret ptr %call, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !27 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, ptr %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !31
  ret ptr %call, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, ptr %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !37
  ret ptr %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, ptr %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !43
  ret ptr %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, ptr %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !49
  ret ptr %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, ptr %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !55
  ret ptr %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %0 = load i32, ptr %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !61
  ret ptr %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @alloc_matrix() #0 !dbg !63 {
entry:
  %i = alloca i32, align 4
  %cptr = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %i, metadata !67, metadata !DIExpression()), !dbg !68
  call void @llvm.dbg.declare(metadata ptr %cptr, metadata !69, metadata !DIExpression()), !dbg !70
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !71
  store ptr %call, ptr %cptr, align 8, !dbg !72
  store i32 0, ptr %i, align 4, !dbg !73
  br label %for.cond, !dbg !75

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !76
  %cmp = icmp slt i32 %0, 10, !dbg !78
  br i1 %cmp, label %for.body, label %for.end, !dbg !79

for.body:                                         ; preds = %for.cond
  %call1 = call ptr @PLKLEAKFP(i32 noundef 1), !dbg !80
  %1 = load ptr, ptr %cptr, align 8, !dbg !82
  %2 = load i32, ptr %i, align 4, !dbg !83
  %idxprom = sext i32 %2 to i64, !dbg !82
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom, !dbg !82
  store ptr %call1, ptr %arrayidx, align 8, !dbg !84
  br label %for.inc, !dbg !85

for.inc:                                          ; preds = %for.body
  %3 = load i32, ptr %i, align 4, !dbg !86
  %inc = add nsw i32 %3, 1, !dbg !86
  store i32 %inc, ptr %i, align 4, !dbg !86
  br label %for.cond, !dbg !87, !llvm.loop !88

for.end:                                          ; preds = %for.cond
  %4 = load ptr, ptr %cptr, align 8, !dbg !91
  ret ptr %4, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_matrix(ptr noundef %matrix) #0 !dbg !93 {
entry:
  %matrix.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  store ptr %matrix, ptr %matrix.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %matrix.addr, metadata !96, metadata !DIExpression()), !dbg !97
  call void @llvm.dbg.declare(metadata ptr %i, metadata !98, metadata !DIExpression()), !dbg !99
  store i32 0, ptr %i, align 4, !dbg !100
  br label %for.cond, !dbg !102

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4, !dbg !103
  %cmp = icmp slt i32 %0, 10, !dbg !105
  br i1 %cmp, label %for.body, label %for.end, !dbg !106

for.body:                                         ; preds = %for.cond
  %1 = load ptr, ptr %matrix.addr, align 8, !dbg !107
  %2 = load i32, ptr %i, align 4, !dbg !109
  %idxprom = sext i32 %2 to i64, !dbg !107
  %arrayidx = getelementptr inbounds ptr, ptr %1, i64 %idxprom, !dbg !107
  %3 = load ptr, ptr %arrayidx, align 8, !dbg !107
  call void @free(ptr noundef %3) #5, !dbg !110
  br label %for.inc, !dbg !111

for.inc:                                          ; preds = %for.body
  %4 = load i32, ptr %i, align 4, !dbg !112
  %inc = add nsw i32 %4, 1, !dbg !112
  store i32 %inc, ptr %i, align 4, !dbg !112
  br label %for.cond, !dbg !113, !llvm.loop !114

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %matrix.addr, align 8, !dbg !116
  call void @free(ptr noundef %5) #5, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !119 {
entry:
  %dir_list = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %dir_list, metadata !122, metadata !DIExpression()), !dbg !123
  %call = call ptr @alloc_matrix(), !dbg !124
  store ptr %call, ptr %dir_list, align 8, !dbg !125
  %0 = load ptr, ptr %dir_list, align 8, !dbg !126
  call void @free_matrix(ptr noundef %0), !dbg !127
  ret i32 0, !dbg !128
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!8, !9, !10, !11, !12, !13, !14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ab5baec3e2f679f1cef0a9df2749a426")
!2 = !{!3, !4, !6}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!8 = !{i32 7, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 8, !"PIC Level", i32 2}
!12 = !{i32 7, !"PIE Level", i32 2}
!13 = !{i32 7, !"uwtable", i32 2}
!14 = !{i32 7, !"frame-pointer", i32 2}
!15 = !{!"clang version 16.0.0"}
!16 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !17, file: !17, line: 5, type: !18, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!17 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!18 = !DISubroutineType(types: !19)
!19 = !{!7, !20}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !{}
!22 = !DILocalVariable(name: "n", arg: 1, scope: !16, file: !17, line: 5, type: !20)
!23 = !DILocation(line: 5, column: 22, scope: !16)
!24 = !DILocation(line: 6, column: 17, scope: !16)
!25 = !DILocation(line: 6, column: 10, scope: !16)
!26 = !DILocation(line: 6, column: 3, scope: !16)
!27 = distinct !DISubprogram(name: "PLKMALLOC", scope: !17, file: !17, line: 9, type: !18, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!28 = !DILocalVariable(name: "n", arg: 1, scope: !27, file: !17, line: 9, type: !20)
!29 = !DILocation(line: 9, column: 21, scope: !27)
!30 = !DILocation(line: 10, column: 17, scope: !27)
!31 = !DILocation(line: 10, column: 10, scope: !27)
!32 = !DILocation(line: 10, column: 3, scope: !27)
!33 = distinct !DISubprogram(name: "NFRMALLOC", scope: !17, file: !17, line: 13, type: !18, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !17, line: 13, type: !20)
!35 = !DILocation(line: 13, column: 21, scope: !33)
!36 = !DILocation(line: 14, column: 17, scope: !33)
!37 = !DILocation(line: 14, column: 10, scope: !33)
!38 = !DILocation(line: 14, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "CLKMALLOC", scope: !17, file: !17, line: 17, type: !18, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !17, line: 17, type: !20)
!41 = !DILocation(line: 17, column: 21, scope: !39)
!42 = !DILocation(line: 18, column: 17, scope: !39)
!43 = !DILocation(line: 18, column: 10, scope: !39)
!44 = !DILocation(line: 18, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !17, file: !17, line: 21, type: !18, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !17, line: 21, type: !20)
!47 = !DILocation(line: 21, column: 21, scope: !45)
!48 = !DILocation(line: 22, column: 17, scope: !45)
!49 = !DILocation(line: 22, column: 10, scope: !45)
!50 = !DILocation(line: 22, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !17, file: !17, line: 25, type: !18, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !17, line: 25, type: !20)
!53 = !DILocation(line: 25, column: 21, scope: !51)
!54 = !DILocation(line: 26, column: 17, scope: !51)
!55 = !DILocation(line: 26, column: 10, scope: !51)
!56 = !DILocation(line: 26, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "LEAKFN", scope: !17, file: !17, line: 29, type: !18, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !17, line: 29, type: !20)
!59 = !DILocation(line: 29, column: 18, scope: !57)
!60 = !DILocation(line: 30, column: 17, scope: !57)
!61 = !DILocation(line: 30, column: 10, scope: !57)
!62 = !DILocation(line: 30, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "alloc_matrix", scope: !64, file: !64, line: 11, type: !65, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!64 = !DIFile(filename: "src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ab5baec3e2f679f1cef0a9df2749a426")
!65 = !DISubroutineType(types: !66)
!66 = !{!6}
!67 = !DILocalVariable(name: "i", scope: !63, file: !64, line: 13, type: !20)
!68 = !DILocation(line: 13, column: 6, scope: !63)
!69 = !DILocalVariable(name: "cptr", scope: !63, file: !64, line: 13, type: !3)
!70 = !DILocation(line: 13, column: 16, scope: !63)
!71 = !DILocation(line: 14, column: 18, scope: !63)
!72 = !DILocation(line: 14, column: 7, scope: !63)
!73 = !DILocation(line: 15, column: 8, scope: !74)
!74 = distinct !DILexicalBlock(scope: !63, file: !64, line: 15, column: 2)
!75 = !DILocation(line: 15, column: 6, scope: !74)
!76 = !DILocation(line: 15, column: 13, scope: !77)
!77 = distinct !DILexicalBlock(scope: !74, file: !64, line: 15, column: 2)
!78 = !DILocation(line: 15, column: 15, scope: !77)
!79 = !DILocation(line: 15, column: 2, scope: !74)
!80 = !DILocation(line: 16, column: 21, scope: !81)
!81 = distinct !DILexicalBlock(scope: !77, file: !64, line: 15, column: 25)
!82 = !DILocation(line: 16, column: 3, scope: !81)
!83 = !DILocation(line: 16, column: 8, scope: !81)
!84 = !DILocation(line: 16, column: 11, scope: !81)
!85 = !DILocation(line: 17, column: 2, scope: !81)
!86 = !DILocation(line: 15, column: 22, scope: !77)
!87 = !DILocation(line: 15, column: 2, scope: !77)
!88 = distinct !{!88, !79, !89, !90}
!89 = !DILocation(line: 17, column: 2, scope: !74)
!90 = !{!"llvm.loop.mustprogress"}
!91 = !DILocation(line: 19, column: 18, scope: !63)
!92 = !DILocation(line: 19, column: 2, scope: !63)
!93 = distinct !DISubprogram(name: "free_matrix", scope: !64, file: !64, line: 22, type: !94, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!94 = !DISubroutineType(types: !95)
!95 = !{null, !6}
!96 = !DILocalVariable(name: "matrix", arg: 1, scope: !93, file: !64, line: 22, type: !6)
!97 = !DILocation(line: 22, column: 26, scope: !93)
!98 = !DILocalVariable(name: "i", scope: !93, file: !64, line: 23, type: !20)
!99 = !DILocation(line: 23, column: 6, scope: !93)
!100 = !DILocation(line: 24, column: 8, scope: !101)
!101 = distinct !DILexicalBlock(scope: !93, file: !64, line: 24, column: 2)
!102 = !DILocation(line: 24, column: 6, scope: !101)
!103 = !DILocation(line: 24, column: 13, scope: !104)
!104 = distinct !DILexicalBlock(scope: !101, file: !64, line: 24, column: 2)
!105 = !DILocation(line: 24, column: 15, scope: !104)
!106 = !DILocation(line: 24, column: 2, scope: !101)
!107 = !DILocation(line: 25, column: 8, scope: !108)
!108 = distinct !DILexicalBlock(scope: !104, file: !64, line: 24, column: 25)
!109 = !DILocation(line: 25, column: 15, scope: !108)
!110 = !DILocation(line: 25, column: 3, scope: !108)
!111 = !DILocation(line: 26, column: 2, scope: !108)
!112 = !DILocation(line: 24, column: 22, scope: !104)
!113 = !DILocation(line: 24, column: 2, scope: !104)
!114 = distinct !{!114, !106, !115, !90}
!115 = !DILocation(line: 26, column: 2, scope: !101)
!116 = !DILocation(line: 27, column: 7, scope: !93)
!117 = !DILocation(line: 27, column: 2, scope: !93)
!118 = !DILocation(line: 29, column: 1, scope: !93)
!119 = distinct !DISubprogram(name: "main", scope: !64, file: !64, line: 31, type: !120, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !21)
!120 = !DISubroutineType(types: !121)
!121 = !{!20}
!122 = !DILocalVariable(name: "dir_list", scope: !119, file: !64, line: 34, type: !3)
!123 = !DILocation(line: 34, column: 11, scope: !119)
!124 = !DILocation(line: 35, column: 23, scope: !119)
!125 = !DILocation(line: 35, column: 13, scope: !119)
!126 = !DILocation(line: 36, column: 16, scope: !119)
!127 = !DILocation(line: 36, column: 4, scope: !119)
!128 = !DILocation(line: 38, column: 1, scope: !119)
