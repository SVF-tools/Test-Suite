; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc36.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc36.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1, !dbg !7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !23 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32, ptr %n.addr, align 4, !dbg !32
  %conv = sext i32 %0 to i64, !dbg !32
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !33
  ret ptr %call, !dbg !34
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !35 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load i32, ptr %n.addr, align 4, !dbg !38
  %conv = sext i32 %0 to i64, !dbg !38
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !39
  ret ptr %call, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !41 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i32, ptr %n.addr, align 4, !dbg !44
  %conv = sext i32 %0 to i64, !dbg !44
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !45
  ret ptr %call, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !47 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %0 = load i32, ptr %n.addr, align 4, !dbg !50
  %conv = sext i32 %0 to i64, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !51
  ret ptr %call, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !53 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %0 = load i32, ptr %n.addr, align 4, !dbg !56
  %conv = sext i32 %0 to i64, !dbg !56
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !57
  ret ptr %call, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !59 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %0 = load i32, ptr %n.addr, align 4, !dbg !62
  %conv = sext i32 %0 to i64, !dbg !62
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !63
  ret ptr %call, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !65 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %0 = load i32, ptr %n.addr, align 4, !dbg !68
  %conv = sext i32 %0 to i64, !dbg !68
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !69
  ret ptr %call, !dbg !70
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @SerialReadBuf() #0 !dbg !71 {
entry:
  %buf = alloca ptr, align 8
  %n = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !74, metadata !DIExpression()), !dbg !76
  %call = call ptr @NFRMALLOC(i32 noundef 10), !dbg !77
  store ptr %call, ptr %buf, align 8, !dbg !76
  call void @llvm.dbg.declare(metadata ptr %n, metadata !78, metadata !DIExpression()), !dbg !79
  br label %while.cond, !dbg !80

while.cond:                                       ; preds = %if.end, %if.then, %entry
  %0 = load i32, ptr %n, align 4, !dbg !81
  %tobool = icmp ne i32 %0, 0, !dbg !80
  br i1 %tobool, label %while.body, label %while.end, !dbg !80

while.body:                                       ; preds = %while.cond
  %1 = load i32, ptr %n, align 4, !dbg !82
  %2 = load ptr, ptr %buf, align 8, !dbg !84
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %1, ptr noundef %2), !dbg !85
  %call2 = call ptr @PLKMALLOC(i32 noundef 10), !dbg !86
  store ptr %call2, ptr %buf, align 8, !dbg !87
  %3 = load i32, ptr %n, align 4, !dbg !88
  %tobool3 = icmp ne i32 %3, 0, !dbg !88
  br i1 %tobool3, label %if.then, label %if.end, !dbg !90

if.then:                                          ; preds = %while.body
  br label %while.cond, !dbg !91, !llvm.loop !93

if.end:                                           ; preds = %while.body
  %4 = load ptr, ptr %buf, align 8, !dbg !96
  call void @free(ptr noundef %4) #6, !dbg !97
  br label %while.cond, !dbg !80, !llvm.loop !93

while.end:                                        ; preds = %while.cond
  %5 = load ptr, ptr %buf, align 8, !dbg !98
  %call4 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %5), !dbg !99
  ret void, !dbg !100
}

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !101 {
entry:
  call void @SerialReadBuf(), !dbg !104
  ret i32 0, !dbg !105
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!12}
!llvm.module.flags = !{!15, !16, !17, !18, !19, !20, !21}
!llvm.ident = !{!22}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/mem_leak/malloc36.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ac822f800185d7cc0869bd28534a686e")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 40, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 5)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 27, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 24, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 3)
!12 = distinct !DICompileUnit(language: DW_LANG_C11, file: !13, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !14, splitDebugInlining: false, nameTableKind: None)
!13 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc36.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ac822f800185d7cc0869bd28534a686e")
!14 = !{!0, !7}
!15 = !{i32 7, !"Dwarf Version", i32 5}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{i32 1, !"wchar_size", i32 4}
!18 = !{i32 8, !"PIC Level", i32 2}
!19 = !{i32 7, !"PIE Level", i32 2}
!20 = !{i32 7, !"uwtable", i32 2}
!21 = !{i32 7, !"frame-pointer", i32 2}
!22 = !{!"clang version 16.0.0"}
!23 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !24, file: !24, line: 5, type: !25, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!24 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!25 = !DISubroutineType(types: !26)
!26 = !{!27, !28}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!28 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!29 = !{}
!30 = !DILocalVariable(name: "n", arg: 1, scope: !23, file: !24, line: 5, type: !28)
!31 = !DILocation(line: 5, column: 22, scope: !23)
!32 = !DILocation(line: 6, column: 17, scope: !23)
!33 = !DILocation(line: 6, column: 10, scope: !23)
!34 = !DILocation(line: 6, column: 3, scope: !23)
!35 = distinct !DISubprogram(name: "PLKMALLOC", scope: !24, file: !24, line: 9, type: !25, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!36 = !DILocalVariable(name: "n", arg: 1, scope: !35, file: !24, line: 9, type: !28)
!37 = !DILocation(line: 9, column: 21, scope: !35)
!38 = !DILocation(line: 10, column: 17, scope: !35)
!39 = !DILocation(line: 10, column: 10, scope: !35)
!40 = !DILocation(line: 10, column: 3, scope: !35)
!41 = distinct !DISubprogram(name: "NFRMALLOC", scope: !24, file: !24, line: 13, type: !25, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!42 = !DILocalVariable(name: "n", arg: 1, scope: !41, file: !24, line: 13, type: !28)
!43 = !DILocation(line: 13, column: 21, scope: !41)
!44 = !DILocation(line: 14, column: 17, scope: !41)
!45 = !DILocation(line: 14, column: 10, scope: !41)
!46 = !DILocation(line: 14, column: 3, scope: !41)
!47 = distinct !DISubprogram(name: "CLKMALLOC", scope: !24, file: !24, line: 17, type: !25, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!48 = !DILocalVariable(name: "n", arg: 1, scope: !47, file: !24, line: 17, type: !28)
!49 = !DILocation(line: 17, column: 21, scope: !47)
!50 = !DILocation(line: 18, column: 17, scope: !47)
!51 = !DILocation(line: 18, column: 10, scope: !47)
!52 = !DILocation(line: 18, column: 3, scope: !47)
!53 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !24, file: !24, line: 21, type: !25, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!54 = !DILocalVariable(name: "n", arg: 1, scope: !53, file: !24, line: 21, type: !28)
!55 = !DILocation(line: 21, column: 21, scope: !53)
!56 = !DILocation(line: 22, column: 17, scope: !53)
!57 = !DILocation(line: 22, column: 10, scope: !53)
!58 = !DILocation(line: 22, column: 3, scope: !53)
!59 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !24, file: !24, line: 25, type: !25, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!60 = !DILocalVariable(name: "n", arg: 1, scope: !59, file: !24, line: 25, type: !28)
!61 = !DILocation(line: 25, column: 21, scope: !59)
!62 = !DILocation(line: 26, column: 17, scope: !59)
!63 = !DILocation(line: 26, column: 10, scope: !59)
!64 = !DILocation(line: 26, column: 3, scope: !59)
!65 = distinct !DISubprogram(name: "LEAKFN", scope: !24, file: !24, line: 29, type: !25, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!66 = !DILocalVariable(name: "n", arg: 1, scope: !65, file: !24, line: 29, type: !28)
!67 = !DILocation(line: 29, column: 18, scope: !65)
!68 = !DILocation(line: 30, column: 17, scope: !65)
!69 = !DILocation(line: 30, column: 10, scope: !65)
!70 = !DILocation(line: 30, column: 3, scope: !65)
!71 = distinct !DISubprogram(name: "SerialReadBuf", scope: !2, file: !2, line: 12, type: !72, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!72 = !DISubroutineType(types: !73)
!73 = !{null}
!74 = !DILocalVariable(name: "buf", scope: !71, file: !2, line: 14, type: !75)
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!76 = !DILocation(line: 14, column: 8, scope: !71)
!77 = !DILocation(line: 14, column: 14, scope: !71)
!78 = !DILocalVariable(name: "n", scope: !71, file: !2, line: 15, type: !28)
!79 = !DILocation(line: 15, column: 6, scope: !71)
!80 = !DILocation(line: 16, column: 2, scope: !71)
!81 = !DILocation(line: 16, column: 8, scope: !71)
!82 = !DILocation(line: 18, column: 18, scope: !83)
!83 = distinct !DILexicalBlock(scope: !71, file: !2, line: 16, column: 10)
!84 = !DILocation(line: 18, column: 20, scope: !83)
!85 = !DILocation(line: 18, column: 4, scope: !83)
!86 = !DILocation(line: 19, column: 10, scope: !83)
!87 = !DILocation(line: 19, column: 8, scope: !83)
!88 = !DILocation(line: 21, column: 6, scope: !89)
!89 = distinct !DILexicalBlock(scope: !83, file: !2, line: 21, column: 6)
!90 = !DILocation(line: 21, column: 6, scope: !83)
!91 = !DILocation(line: 22, column: 4, scope: !92)
!92 = distinct !DILexicalBlock(scope: !89, file: !2, line: 21, column: 8)
!93 = distinct !{!93, !80, !94, !95}
!94 = !DILocation(line: 25, column: 2, scope: !71)
!95 = !{!"llvm.loop.mustprogress"}
!96 = !DILocation(line: 24, column: 8, scope: !83)
!97 = !DILocation(line: 24, column: 3, scope: !83)
!98 = !DILocation(line: 27, column: 14, scope: !71)
!99 = !DILocation(line: 27, column: 2, scope: !71)
!100 = !DILocation(line: 29, column: 1, scope: !71)
!101 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 31, type: !102, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !12, retainedNodes: !29)
!102 = !DISubroutineType(types: !103)
!103 = !{!28}
!104 = !DILocation(line: 33, column: 2, scope: !101)
!105 = !DILocation(line: 34, column: 1, scope: !101)
