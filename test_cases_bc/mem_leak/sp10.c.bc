; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/mem_leak/sp10.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/mem_leak/sp10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.List = type { ptr, ptr, ptr }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !22 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !28, !DIExpression(), !29)
  %0 = load i32, ptr %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !31
  ret ptr %call, !dbg !32
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !34, !DIExpression(), !35)
  %0 = load i32, ptr %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !37
  ret ptr %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !40, !DIExpression(), !41)
  %0 = load i32, ptr %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !43
  ret ptr %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !46, !DIExpression(), !47)
  %0 = load i32, ptr %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !49
  ret ptr %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !52, !DIExpression(), !53)
  %0 = load i32, ptr %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !55
  ret ptr %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !58, !DIExpression(), !59)
  %0 = load i32, ptr %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !61
  ret ptr %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !64, !DIExpression(), !65)
  %0 = load i32, ptr %n.addr, align 4, !dbg !66
  %conv = sext i32 %0 to i64, !dbg !66
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !67
  ret ptr %call, !dbg !68
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @newNode() #0 !dbg !69 {
entry:
  %node = alloca ptr, align 8
    #dbg_declare(ptr %node, !72, !DIExpression(), !73)
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !74
  store ptr %call, ptr %node, align 8, !dbg !75
  %call1 = call ptr @SAFEMALLOC(i32 noundef 4), !dbg !76
  %0 = load ptr, ptr %node, align 8, !dbg !77
  %a = getelementptr inbounds nuw %struct.List, ptr %0, i32 0, i32 2, !dbg !78
  store ptr %call1, ptr %a, align 8, !dbg !79
  %1 = load ptr, ptr %node, align 8, !dbg !80
  ret ptr %1, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @freeNode(ptr noundef %node) #0 !dbg !82 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca ptr, align 8
  store ptr %node, ptr %node.addr, align 8
    #dbg_declare(ptr %node.addr, !85, !DIExpression(), !86)
  %0 = load ptr, ptr %node.addr, align 8, !dbg !87
  call void @free(ptr noundef %0) #4, !dbg !88
  %1 = load ptr, ptr %node.addr, align 8, !dbg !89
  %a = getelementptr inbounds nuw %struct.List, ptr %1, i32 0, i32 2, !dbg !90
  %2 = load ptr, ptr %a, align 8, !dbg !90
  call void @free(ptr noundef %2) #4, !dbg !91
  %3 = load i32, ptr %retval, align 4, !dbg !92
  ret i32 %3, !dbg !92
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 !dbg !93 {
entry:
  %root = alloca ptr, align 8
  %a = alloca i32, align 4
    #dbg_declare(ptr %root, !96, !DIExpression(), !97)
    #dbg_declare(ptr %a, !98, !DIExpression(), !99)
  store i32 10, ptr %a, align 4, !dbg !99
  %call = call ptr @newNode(), !dbg !100
  store ptr %call, ptr %root, align 8, !dbg !101
  %call1 = call ptr @newNode(), !dbg !102
  %0 = load ptr, ptr %root, align 8, !dbg !103
  %next = getelementptr inbounds nuw %struct.List, ptr %0, i32 0, i32 0, !dbg !104
  store ptr %call1, ptr %next, align 8, !dbg !105
  %1 = load ptr, ptr %root, align 8, !dbg !106
  %next2 = getelementptr inbounds nuw %struct.List, ptr %1, i32 0, i32 0, !dbg !107
  %2 = load ptr, ptr %next2, align 8, !dbg !107
  %call3 = call i32 @freeNode(ptr noundef %2), !dbg !108
  %3 = load ptr, ptr %root, align 8, !dbg !109
  %call4 = call i32 @freeNode(ptr noundef %3), !dbg !110
  ret void, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_free(ptr noundef %m) #0 !dbg !112 {
entry:
  %m.addr = alloca ptr, align 8
  store ptr %m, ptr %m.addr, align 8
    #dbg_declare(ptr %m.addr, !116, !DIExpression(), !117)
  %0 = load ptr, ptr %m.addr, align 8, !dbg !118
  %1 = load ptr, ptr %0, align 8, !dbg !119
  %buf = getelementptr inbounds nuw %struct.List, ptr %1, i32 0, i32 1, !dbg !120
  %2 = load ptr, ptr %buf, align 8, !dbg !120
  call void @free(ptr noundef %2) #4, !dbg !121
  %3 = load ptr, ptr %m.addr, align 8, !dbg !122
  %4 = load ptr, ptr %3, align 8, !dbg !123
  call void @free(ptr noundef %4) #4, !dbg !124
  ret void, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_init(ptr noundef %x) #0 !dbg !126 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
    #dbg_declare(ptr %x.addr, !127, !DIExpression(), !128)
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !129
  %0 = load ptr, ptr %x.addr, align 8, !dbg !130
  %1 = load ptr, ptr %0, align 8, !dbg !131
  %buf = getelementptr inbounds nuw %struct.List, ptr %1, i32 0, i32 1, !dbg !132
  store ptr %call, ptr %buf, align 8, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !135 {
entry:
  %m = alloca ptr, align 8
    #dbg_declare(ptr %m, !136, !DIExpression(), !137)
  %call = call ptr @SAFEMALLOC(i32 noundef 24), !dbg !138
  store ptr %call, ptr %m, align 8, !dbg !139
  call void @buffer_init(ptr noundef %m), !dbg !140
  call void @buffer_free(ptr noundef %m), !dbg !141
  ret void, !dbg !142
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16, !17, !18, !19, !20}
!llvm.ident = !{!21}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/mem_leak/sp10.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "33cfe96f0f2147d2a86090e885d1ee77")
!2 = !{!3, !12, !9}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !5, line: 11, size: 192, elements: !6)
!5 = !DIFile(filename: "src/mem_leak/sp10.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "33cfe96f0f2147d2a86090e885d1ee77")
!6 = !{!7, !8, !11}
!7 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4, file: !5, line: 12, baseType: !3, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4, file: !5, line: 13, baseType: !9, size: 64, offset: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4, file: !5, line: 14, baseType: !12, size: 64, offset: 128)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !{i32 7, !"Dwarf Version", i32 5}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 8, !"PIC Level", i32 2}
!18 = !{i32 7, !"PIE Level", i32 2}
!19 = !{i32 7, !"uwtable", i32 2}
!20 = !{i32 7, !"frame-pointer", i32 2}
!21 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!22 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !23, file: !23, line: 5, type: !24, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!23 = !DIFile(filename: "memleak_check.h", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!24 = !DISubroutineType(types: !25)
!25 = !{!26, !13}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !{}
!28 = !DILocalVariable(name: "n", arg: 1, scope: !22, file: !23, line: 5, type: !13)
!29 = !DILocation(line: 5, column: 22, scope: !22)
!30 = !DILocation(line: 6, column: 17, scope: !22)
!31 = !DILocation(line: 6, column: 10, scope: !22)
!32 = !DILocation(line: 6, column: 3, scope: !22)
!33 = distinct !DISubprogram(name: "PLKMALLOC", scope: !23, file: !23, line: 9, type: !24, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !23, line: 9, type: !13)
!35 = !DILocation(line: 9, column: 21, scope: !33)
!36 = !DILocation(line: 10, column: 17, scope: !33)
!37 = !DILocation(line: 10, column: 10, scope: !33)
!38 = !DILocation(line: 10, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "NFRMALLOC", scope: !23, file: !23, line: 13, type: !24, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !23, line: 13, type: !13)
!41 = !DILocation(line: 13, column: 21, scope: !39)
!42 = !DILocation(line: 14, column: 17, scope: !39)
!43 = !DILocation(line: 14, column: 10, scope: !39)
!44 = !DILocation(line: 14, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "CLKMALLOC", scope: !23, file: !23, line: 17, type: !24, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !23, line: 17, type: !13)
!47 = !DILocation(line: 17, column: 21, scope: !45)
!48 = !DILocation(line: 18, column: 17, scope: !45)
!49 = !DILocation(line: 18, column: 10, scope: !45)
!50 = !DILocation(line: 18, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !23, file: !23, line: 21, type: !24, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !23, line: 21, type: !13)
!53 = !DILocation(line: 21, column: 21, scope: !51)
!54 = !DILocation(line: 22, column: 17, scope: !51)
!55 = !DILocation(line: 22, column: 10, scope: !51)
!56 = !DILocation(line: 22, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !23, file: !23, line: 25, type: !24, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !23, line: 25, type: !13)
!59 = !DILocation(line: 25, column: 21, scope: !57)
!60 = !DILocation(line: 26, column: 17, scope: !57)
!61 = !DILocation(line: 26, column: 10, scope: !57)
!62 = !DILocation(line: 26, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "LEAKFN", scope: !23, file: !23, line: 29, type: !24, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!64 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !23, line: 29, type: !13)
!65 = !DILocation(line: 29, column: 18, scope: !63)
!66 = !DILocation(line: 30, column: 17, scope: !63)
!67 = !DILocation(line: 30, column: 10, scope: !63)
!68 = !DILocation(line: 30, column: 3, scope: !63)
!69 = distinct !DISubprogram(name: "newNode", scope: !5, file: !5, line: 17, type: !70, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!70 = !DISubroutineType(types: !71)
!71 = !{!3}
!72 = !DILocalVariable(name: "node", scope: !69, file: !5, line: 18, type: !3)
!73 = !DILocation(line: 18, column: 16, scope: !69)
!74 = !DILocation(line: 19, column: 25, scope: !69)
!75 = !DILocation(line: 19, column: 7, scope: !69)
!76 = !DILocation(line: 20, column: 20, scope: !69)
!77 = !DILocation(line: 20, column: 2, scope: !69)
!78 = !DILocation(line: 20, column: 8, scope: !69)
!79 = !DILocation(line: 20, column: 10, scope: !69)
!80 = !DILocation(line: 21, column: 9, scope: !69)
!81 = !DILocation(line: 21, column: 2, scope: !69)
!82 = distinct !DISubprogram(name: "freeNode", scope: !5, file: !5, line: 24, type: !83, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!83 = !DISubroutineType(types: !84)
!84 = !{!13, !3}
!85 = !DILocalVariable(name: "node", arg: 1, scope: !82, file: !5, line: 24, type: !3)
!86 = !DILocation(line: 24, column: 27, scope: !82)
!87 = !DILocation(line: 25, column: 7, scope: !82)
!88 = !DILocation(line: 25, column: 2, scope: !82)
!89 = !DILocation(line: 26, column: 7, scope: !82)
!90 = !DILocation(line: 26, column: 13, scope: !82)
!91 = !DILocation(line: 26, column: 2, scope: !82)
!92 = !DILocation(line: 27, column: 1, scope: !82)
!93 = distinct !DISubprogram(name: "foo", scope: !5, file: !5, line: 29, type: !94, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!94 = !DISubroutineType(types: !95)
!95 = !{null}
!96 = !DILocalVariable(name: "root", scope: !93, file: !5, line: 30, type: !3)
!97 = !DILocation(line: 30, column: 15, scope: !93)
!98 = !DILocalVariable(name: "a", scope: !93, file: !5, line: 31, type: !13)
!99 = !DILocation(line: 31, column: 6, scope: !93)
!100 = !DILocation(line: 32, column: 9, scope: !93)
!101 = !DILocation(line: 32, column: 7, scope: !93)
!102 = !DILocation(line: 33, column: 15, scope: !93)
!103 = !DILocation(line: 33, column: 2, scope: !93)
!104 = !DILocation(line: 33, column: 8, scope: !93)
!105 = !DILocation(line: 33, column: 13, scope: !93)
!106 = !DILocation(line: 34, column: 11, scope: !93)
!107 = !DILocation(line: 34, column: 17, scope: !93)
!108 = !DILocation(line: 34, column: 2, scope: !93)
!109 = !DILocation(line: 35, column: 11, scope: !93)
!110 = !DILocation(line: 35, column: 2, scope: !93)
!111 = !DILocation(line: 36, column: 1, scope: !93)
!112 = distinct !DISubprogram(name: "buffer_free", scope: !5, file: !5, line: 38, type: !113, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!113 = !DISubroutineType(types: !114)
!114 = !{null, !115}
!115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3, size: 64)
!116 = !DILocalVariable(name: "m", arg: 1, scope: !112, file: !5, line: 38, type: !115)
!117 = !DILocation(line: 38, column: 32, scope: !112)
!118 = !DILocation(line: 39, column: 9, scope: !112)
!119 = !DILocation(line: 39, column: 8, scope: !112)
!120 = !DILocation(line: 39, column: 13, scope: !112)
!121 = !DILocation(line: 39, column: 2, scope: !112)
!122 = !DILocation(line: 40, column: 8, scope: !112)
!123 = !DILocation(line: 40, column: 7, scope: !112)
!124 = !DILocation(line: 40, column: 2, scope: !112)
!125 = !DILocation(line: 41, column: 1, scope: !112)
!126 = distinct !DISubprogram(name: "buffer_init", scope: !5, file: !5, line: 43, type: !113, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!127 = !DILocalVariable(name: "x", arg: 1, scope: !126, file: !5, line: 43, type: !115)
!128 = !DILocation(line: 43, column: 32, scope: !126)
!129 = !DILocation(line: 44, column: 23, scope: !126)
!130 = !DILocation(line: 44, column: 4, scope: !126)
!131 = !DILocation(line: 44, column: 3, scope: !126)
!132 = !DILocation(line: 44, column: 8, scope: !126)
!133 = !DILocation(line: 44, column: 12, scope: !126)
!134 = !DILocation(line: 45, column: 1, scope: !126)
!135 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 47, type: !94, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !27)
!136 = !DILocalVariable(name: "m", scope: !135, file: !5, line: 48, type: !3)
!137 = !DILocation(line: 48, column: 15, scope: !135)
!138 = !DILocation(line: 49, column: 22, scope: !135)
!139 = !DILocation(line: 49, column: 4, scope: !135)
!140 = !DILocation(line: 50, column: 2, scope: !135)
!141 = !DILocation(line: 51, column: 2, scope: !135)
!142 = !DILocation(line: 52, column: 1, scope: !135)
