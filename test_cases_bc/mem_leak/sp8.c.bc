; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/mem_leak/sp8.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/mem_leak/sp8.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@G = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !15 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !21, !DIExpression(), !22)
  %0 = load i32, ptr %n.addr, align 4, !dbg !23
  %conv = sext i32 %0 to i64, !dbg !23
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !24
  ret ptr %call, !dbg !25
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !26 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !27, !DIExpression(), !28)
  %0 = load i32, ptr %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !30
  ret ptr %call, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !33, !DIExpression(), !34)
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !36
  ret ptr %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !39, !DIExpression(), !40)
  %0 = load i32, ptr %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !42
  ret ptr %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !45, !DIExpression(), !46)
  %0 = load i32, ptr %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !48
  ret ptr %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !51, !DIExpression(), !52)
  %0 = load i32, ptr %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !54
  ret ptr %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !56 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !57, !DIExpression(), !58)
  %0 = load i32, ptr %n.addr, align 4, !dbg !59
  %conv = sext i32 %0 to i64, !dbg !59
  %call = call noalias ptr @malloc(i64 noundef %conv) #3, !dbg !60
  ret ptr %call, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @clear_conditioned() #0 !dbg !62 {
entry:
  %buf1 = alloca ptr, align 8
  %buf2 = alloca ptr, align 8
    #dbg_declare(ptr %buf1, !65, !DIExpression(), !68)
    #dbg_declare(ptr %buf2, !69, !DIExpression(), !70)
  %0 = load i32, ptr @G, align 4, !dbg !71
  %tobool = icmp ne i32 %0, 0, !dbg !71
  br i1 %tobool, label %if.then, label %if.else, !dbg !71

if.then:                                          ; preds = %entry
  %call = call ptr @PLKLEAKFP(i32 noundef 10), !dbg !73
  store ptr %call, ptr %buf1, align 8, !dbg !75
  br label %if.end, !dbg !76

if.else:                                          ; preds = %entry
  %call1 = call ptr @PLKLEAKFP(i32 noundef 10), !dbg !77
  store ptr %call1, ptr %buf2, align 8, !dbg !79
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, ptr @G, align 4, !dbg !80
  %tobool2 = icmp ne i32 %1, 0, !dbg !80
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !80

if.then3:                                         ; preds = %if.end
  %2 = load ptr, ptr %buf1, align 8, !dbg !82
  call void @free(ptr noundef %2) #4, !dbg !84
  br label %if.end5, !dbg !85

if.else4:                                         ; preds = %if.end
  %3 = load ptr, ptr %buf2, align 8, !dbg !86
  call void @free(ptr noundef %3) #4, !dbg !88
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.then3
  ret void, !dbg !89
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unclear_conditioned(i32 noundef %arg1) #0 !dbg !90 {
entry:
  %arg1.addr = alloca i32, align 4
  %buf1 = alloca ptr, align 8
  %buf2 = alloca ptr, align 8
  %i = alloca i32, align 4
  store i32 %arg1, ptr %arg1.addr, align 4
    #dbg_declare(ptr %arg1.addr, !93, !DIExpression(), !94)
    #dbg_declare(ptr %buf1, !95, !DIExpression(), !96)
    #dbg_declare(ptr %buf2, !97, !DIExpression(), !98)
    #dbg_declare(ptr %i, !99, !DIExpression(), !100)
  %0 = load i32, ptr %arg1.addr, align 4, !dbg !101
  %tobool = icmp ne i32 %0, 0, !dbg !101
  br i1 %tobool, label %if.then, label %if.else, !dbg !101

if.then:                                          ; preds = %entry
  %call = call ptr @PLKMALLOC(i32 noundef 10), !dbg !103
  store ptr %call, ptr %buf1, align 8, !dbg !105
  br label %if.end, !dbg !106

if.else:                                          ; preds = %entry
  %call1 = call ptr @PLKLEAKFP(i32 noundef 10), !dbg !107
  store ptr %call1, ptr %buf2, align 8, !dbg !109
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, ptr %arg1.addr, align 4, !dbg !110
  %sub = sub nsw i32 %1, 1, !dbg !111
  store i32 %sub, ptr %arg1.addr, align 4, !dbg !112
  %2 = load i32, ptr %arg1.addr, align 4, !dbg !113
  %add = add nsw i32 %2, 10, !dbg !114
  store i32 %add, ptr %arg1.addr, align 4, !dbg !115
  %3 = load i32, ptr %arg1.addr, align 4, !dbg !116
  %tobool2 = icmp ne i32 %3, 0, !dbg !116
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !116

if.then3:                                         ; preds = %if.end
  %4 = load ptr, ptr %buf1, align 8, !dbg !118
  call void @free(ptr noundef %4) #4, !dbg !120
  br label %if.end5, !dbg !121

if.else4:                                         ; preds = %if.end
  %5 = load ptr, ptr %buf2, align 8, !dbg !122
  call void @free(ptr noundef %5) #4, !dbg !124
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.then3
  ret void, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !126 {
entry:
  call void @clear_conditioned(), !dbg !129
  %0 = load i32, ptr @G, align 4, !dbg !130
  call void @unclear_conditioned(i32 noundef %0), !dbg !131
  ret i32 0, !dbg !132
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind allocsize(0) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "G", scope: !2, file: !5, line: 11, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/mem_leak/sp8.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "cf868c78f83e52fe9481225509ee1a50")
!4 = !{!0}
!5 = !DIFile(filename: "src/mem_leak/sp8.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "cf868c78f83e52fe9481225509ee1a50")
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 8, !"PIC Level", i32 2}
!11 = !{i32 7, !"PIE Level", i32 2}
!12 = !{i32 7, !"uwtable", i32 2}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!15 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !16, file: !16, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!16 = !DIFile(filename: "memleak_check.h", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !6}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!20 = !{}
!21 = !DILocalVariable(name: "n", arg: 1, scope: !15, file: !16, line: 5, type: !6)
!22 = !DILocation(line: 5, column: 22, scope: !15)
!23 = !DILocation(line: 6, column: 17, scope: !15)
!24 = !DILocation(line: 6, column: 10, scope: !15)
!25 = !DILocation(line: 6, column: 3, scope: !15)
!26 = distinct !DISubprogram(name: "PLKMALLOC", scope: !16, file: !16, line: 9, type: !17, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!27 = !DILocalVariable(name: "n", arg: 1, scope: !26, file: !16, line: 9, type: !6)
!28 = !DILocation(line: 9, column: 21, scope: !26)
!29 = !DILocation(line: 10, column: 17, scope: !26)
!30 = !DILocation(line: 10, column: 10, scope: !26)
!31 = !DILocation(line: 10, column: 3, scope: !26)
!32 = distinct !DISubprogram(name: "NFRMALLOC", scope: !16, file: !16, line: 13, type: !17, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !16, line: 13, type: !6)
!34 = !DILocation(line: 13, column: 21, scope: !32)
!35 = !DILocation(line: 14, column: 17, scope: !32)
!36 = !DILocation(line: 14, column: 10, scope: !32)
!37 = !DILocation(line: 14, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "CLKMALLOC", scope: !16, file: !16, line: 17, type: !17, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !16, line: 17, type: !6)
!40 = !DILocation(line: 17, column: 21, scope: !38)
!41 = !DILocation(line: 18, column: 17, scope: !38)
!42 = !DILocation(line: 18, column: 10, scope: !38)
!43 = !DILocation(line: 18, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !16, file: !16, line: 21, type: !17, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !16, line: 21, type: !6)
!46 = !DILocation(line: 21, column: 21, scope: !44)
!47 = !DILocation(line: 22, column: 17, scope: !44)
!48 = !DILocation(line: 22, column: 10, scope: !44)
!49 = !DILocation(line: 22, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !16, file: !16, line: 25, type: !17, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !16, line: 25, type: !6)
!52 = !DILocation(line: 25, column: 21, scope: !50)
!53 = !DILocation(line: 26, column: 17, scope: !50)
!54 = !DILocation(line: 26, column: 10, scope: !50)
!55 = !DILocation(line: 26, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "LEAKFN", scope: !16, file: !16, line: 29, type: !17, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!57 = !DILocalVariable(name: "n", arg: 1, scope: !56, file: !16, line: 29, type: !6)
!58 = !DILocation(line: 29, column: 18, scope: !56)
!59 = !DILocation(line: 30, column: 17, scope: !56)
!60 = !DILocation(line: 30, column: 10, scope: !56)
!61 = !DILocation(line: 30, column: 3, scope: !56)
!62 = distinct !DISubprogram(name: "clear_conditioned", scope: !5, file: !5, line: 12, type: !63, scopeLine: 12, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!63 = !DISubroutineType(types: !64)
!64 = !{null}
!65 = !DILocalVariable(name: "buf1", scope: !62, file: !5, line: 13, type: !66)
!66 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !67, size: 64)
!67 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!68 = !DILocation(line: 13, column: 8, scope: !62)
!69 = !DILocalVariable(name: "buf2", scope: !62, file: !5, line: 13, type: !66)
!70 = !DILocation(line: 13, column: 15, scope: !62)
!71 = !DILocation(line: 15, column: 6, scope: !72)
!72 = distinct !DILexicalBlock(scope: !62, file: !5, line: 15, column: 6)
!73 = !DILocation(line: 16, column: 10, scope: !74)
!74 = distinct !DILexicalBlock(scope: !72, file: !5, line: 15, column: 9)
!75 = !DILocation(line: 16, column: 8, scope: !74)
!76 = !DILocation(line: 17, column: 2, scope: !74)
!77 = !DILocation(line: 18, column: 10, scope: !78)
!78 = distinct !DILexicalBlock(scope: !72, file: !5, line: 17, column: 9)
!79 = !DILocation(line: 18, column: 8, scope: !78)
!80 = !DILocation(line: 21, column: 6, scope: !81)
!81 = distinct !DILexicalBlock(scope: !62, file: !5, line: 21, column: 6)
!82 = !DILocation(line: 22, column: 8, scope: !83)
!83 = distinct !DILexicalBlock(scope: !81, file: !5, line: 21, column: 9)
!84 = !DILocation(line: 22, column: 3, scope: !83)
!85 = !DILocation(line: 23, column: 2, scope: !83)
!86 = !DILocation(line: 24, column: 8, scope: !87)
!87 = distinct !DILexicalBlock(scope: !81, file: !5, line: 23, column: 9)
!88 = !DILocation(line: 24, column: 3, scope: !87)
!89 = !DILocation(line: 26, column: 1, scope: !62)
!90 = distinct !DISubprogram(name: "unclear_conditioned", scope: !5, file: !5, line: 29, type: !91, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !20)
!91 = !DISubroutineType(types: !92)
!92 = !{null, !6}
!93 = !DILocalVariable(name: "arg1", arg: 1, scope: !90, file: !5, line: 29, type: !6)
!94 = !DILocation(line: 29, column: 30, scope: !90)
!95 = !DILocalVariable(name: "buf1", scope: !90, file: !5, line: 30, type: !66)
!96 = !DILocation(line: 30, column: 8, scope: !90)
!97 = !DILocalVariable(name: "buf2", scope: !90, file: !5, line: 30, type: !66)
!98 = !DILocation(line: 30, column: 15, scope: !90)
!99 = !DILocalVariable(name: "i", scope: !90, file: !5, line: 31, type: !6)
!100 = !DILocation(line: 31, column: 6, scope: !90)
!101 = !DILocation(line: 33, column: 6, scope: !102)
!102 = distinct !DILexicalBlock(scope: !90, file: !5, line: 33, column: 6)
!103 = !DILocation(line: 34, column: 10, scope: !104)
!104 = distinct !DILexicalBlock(scope: !102, file: !5, line: 33, column: 12)
!105 = !DILocation(line: 34, column: 8, scope: !104)
!106 = !DILocation(line: 35, column: 2, scope: !104)
!107 = !DILocation(line: 36, column: 10, scope: !108)
!108 = distinct !DILexicalBlock(scope: !102, file: !5, line: 35, column: 9)
!109 = !DILocation(line: 36, column: 8, scope: !108)
!110 = !DILocation(line: 39, column: 9, scope: !90)
!111 = !DILocation(line: 39, column: 14, scope: !90)
!112 = !DILocation(line: 39, column: 7, scope: !90)
!113 = !DILocation(line: 41, column: 9, scope: !90)
!114 = !DILocation(line: 41, column: 14, scope: !90)
!115 = !DILocation(line: 41, column: 7, scope: !90)
!116 = !DILocation(line: 43, column: 6, scope: !117)
!117 = distinct !DILexicalBlock(scope: !90, file: !5, line: 43, column: 6)
!118 = !DILocation(line: 44, column: 8, scope: !119)
!119 = distinct !DILexicalBlock(scope: !117, file: !5, line: 43, column: 12)
!120 = !DILocation(line: 44, column: 3, scope: !119)
!121 = !DILocation(line: 45, column: 2, scope: !119)
!122 = !DILocation(line: 46, column: 8, scope: !123)
!123 = distinct !DILexicalBlock(scope: !117, file: !5, line: 45, column: 9)
!124 = !DILocation(line: 46, column: 3, scope: !123)
!125 = !DILocation(line: 48, column: 1, scope: !90)
!126 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 50, type: !127, scopeLine: 50, spFlags: DISPFlagDefinition, unit: !2)
!127 = !DISubroutineType(types: !128)
!128 = !{!6}
!129 = !DILocation(line: 51, column: 2, scope: !126)
!130 = !DILocation(line: 52, column: 22, scope: !126)
!131 = !DILocation(line: 52, column: 2, scope: !126)
!132 = !DILocation(line: 53, column: 1, scope: !126)
