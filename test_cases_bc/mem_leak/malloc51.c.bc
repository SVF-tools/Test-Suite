; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc51.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc51.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !10 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !17, metadata !DIExpression()), !dbg !18
  %0 = load i32, ptr %n.addr, align 4, !dbg !19
  %conv = sext i32 %0 to i64, !dbg !19
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !20
  ret ptr %call, !dbg !21
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !22 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, ptr %n.addr, align 4, !dbg !25
  %conv = sext i32 %0 to i64, !dbg !25
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !26
  ret ptr %call, !dbg !27
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !28 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !29, metadata !DIExpression()), !dbg !30
  %0 = load i32, ptr %n.addr, align 4, !dbg !31
  %conv = sext i32 %0 to i64, !dbg !31
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !32
  ret ptr %call, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !34 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %0 = load i32, ptr %n.addr, align 4, !dbg !37
  %conv = sext i32 %0 to i64, !dbg !37
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !38
  ret ptr %call, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !40 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !41, metadata !DIExpression()), !dbg !42
  %0 = load i32, ptr %n.addr, align 4, !dbg !43
  %conv = sext i32 %0 to i64, !dbg !43
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !44
  ret ptr %call, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !46 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %0 = load i32, ptr %n.addr, align 4, !dbg !49
  %conv = sext i32 %0 to i64, !dbg !49
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !50
  ret ptr %call, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !52 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %0 = load i32, ptr %n.addr, align 4, !dbg !55
  %conv = sext i32 %0 to i64, !dbg !55
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !56
  ret ptr %call, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @bar1(ptr noundef %b) #0 !dbg !58 {
entry:
  %b.addr = alloca ptr, align 8
  store ptr %b, ptr %b.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %b.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %0 = load ptr, ptr %b.addr, align 8, !dbg !65
  ret ptr %0, !dbg !66
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @foo(ptr noundef %x) #0 !dbg !67 {
entry:
  %x.addr = alloca ptr, align 8
  %k = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata ptr %k, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load ptr, ptr %x.addr, align 8, !dbg !72
  %call = call ptr @bar1(ptr noundef %0), !dbg !73
  store ptr %call, ptr %k, align 8, !dbg !71
  %1 = load ptr, ptr %k, align 8, !dbg !74
  ret ptr %1, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @tmp() #0 !dbg !76 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  %q = alloca ptr, align 8
  %t = alloca ptr, align 8
  %s = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %p, metadata !79, metadata !DIExpression()), !dbg !80
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !81
  store ptr %call, ptr %p, align 8, !dbg !80
  call void @llvm.dbg.declare(metadata ptr %q, metadata !82, metadata !DIExpression()), !dbg !83
  %call1 = call ptr @CLKMALLOC(i32 noundef 10), !dbg !84
  store ptr %call1, ptr %q, align 8, !dbg !83
  call void @llvm.dbg.declare(metadata ptr %t, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load ptr, ptr %p, align 8, !dbg !87
  %call2 = call ptr @foo(ptr noundef %0), !dbg !88
  store ptr %call2, ptr %t, align 8, !dbg !86
  call void @llvm.dbg.declare(metadata ptr %s, metadata !89, metadata !DIExpression()), !dbg !90
  %1 = load ptr, ptr %q, align 8, !dbg !91
  %call3 = call ptr @foo(ptr noundef %1), !dbg !92
  store ptr %call3, ptr %s, align 8, !dbg !90
  %2 = load ptr, ptr %t, align 8, !dbg !93
  call void @free(ptr noundef %2) #5, !dbg !94
  %3 = load i32, ptr %retval, align 4, !dbg !95
  ret i32 %3, !dbg !95
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !96 {
entry:
  %call = call i32 @tmp(), !dbg !97
  ret i32 0, !dbg !98
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc51.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f5d312120d4915dfc1579bd4dea42b28")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.0"}
!10 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !11, file: !11, line: 5, type: !12, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!11 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !15}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !{}
!17 = !DILocalVariable(name: "n", arg: 1, scope: !10, file: !11, line: 5, type: !15)
!18 = !DILocation(line: 5, column: 22, scope: !10)
!19 = !DILocation(line: 6, column: 17, scope: !10)
!20 = !DILocation(line: 6, column: 10, scope: !10)
!21 = !DILocation(line: 6, column: 3, scope: !10)
!22 = distinct !DISubprogram(name: "PLKMALLOC", scope: !11, file: !11, line: 9, type: !12, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!23 = !DILocalVariable(name: "n", arg: 1, scope: !22, file: !11, line: 9, type: !15)
!24 = !DILocation(line: 9, column: 21, scope: !22)
!25 = !DILocation(line: 10, column: 17, scope: !22)
!26 = !DILocation(line: 10, column: 10, scope: !22)
!27 = !DILocation(line: 10, column: 3, scope: !22)
!28 = distinct !DISubprogram(name: "NFRMALLOC", scope: !11, file: !11, line: 13, type: !12, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!29 = !DILocalVariable(name: "n", arg: 1, scope: !28, file: !11, line: 13, type: !15)
!30 = !DILocation(line: 13, column: 21, scope: !28)
!31 = !DILocation(line: 14, column: 17, scope: !28)
!32 = !DILocation(line: 14, column: 10, scope: !28)
!33 = !DILocation(line: 14, column: 3, scope: !28)
!34 = distinct !DISubprogram(name: "CLKMALLOC", scope: !11, file: !11, line: 17, type: !12, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!35 = !DILocalVariable(name: "n", arg: 1, scope: !34, file: !11, line: 17, type: !15)
!36 = !DILocation(line: 17, column: 21, scope: !34)
!37 = !DILocation(line: 18, column: 17, scope: !34)
!38 = !DILocation(line: 18, column: 10, scope: !34)
!39 = !DILocation(line: 18, column: 3, scope: !34)
!40 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !11, file: !11, line: 21, type: !12, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!41 = !DILocalVariable(name: "n", arg: 1, scope: !40, file: !11, line: 21, type: !15)
!42 = !DILocation(line: 21, column: 21, scope: !40)
!43 = !DILocation(line: 22, column: 17, scope: !40)
!44 = !DILocation(line: 22, column: 10, scope: !40)
!45 = !DILocation(line: 22, column: 3, scope: !40)
!46 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !11, file: !11, line: 25, type: !12, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!47 = !DILocalVariable(name: "n", arg: 1, scope: !46, file: !11, line: 25, type: !15)
!48 = !DILocation(line: 25, column: 21, scope: !46)
!49 = !DILocation(line: 26, column: 17, scope: !46)
!50 = !DILocation(line: 26, column: 10, scope: !46)
!51 = !DILocation(line: 26, column: 3, scope: !46)
!52 = distinct !DISubprogram(name: "LEAKFN", scope: !11, file: !11, line: 29, type: !12, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!53 = !DILocalVariable(name: "n", arg: 1, scope: !52, file: !11, line: 29, type: !15)
!54 = !DILocation(line: 29, column: 18, scope: !52)
!55 = !DILocation(line: 30, column: 17, scope: !52)
!56 = !DILocation(line: 30, column: 10, scope: !52)
!57 = !DILocation(line: 30, column: 3, scope: !52)
!58 = distinct !DISubprogram(name: "bar1", scope: !59, file: !59, line: 10, type: !60, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!59 = !DIFile(filename: "src/mem_leak/malloc51.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f5d312120d4915dfc1579bd4dea42b28")
!60 = !DISubroutineType(types: !61)
!61 = !{!62, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!63 = !DILocalVariable(name: "b", arg: 1, scope: !58, file: !59, line: 10, type: !62)
!64 = !DILocation(line: 10, column: 16, scope: !58)
!65 = !DILocation(line: 11, column: 10, scope: !58)
!66 = !DILocation(line: 11, column: 3, scope: !58)
!67 = distinct !DISubprogram(name: "foo", scope: !59, file: !59, line: 15, type: !60, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!68 = !DILocalVariable(name: "x", arg: 1, scope: !67, file: !59, line: 15, type: !62)
!69 = !DILocation(line: 15, column: 15, scope: !67)
!70 = !DILocalVariable(name: "k", scope: !67, file: !59, line: 17, type: !62)
!71 = !DILocation(line: 17, column: 9, scope: !67)
!72 = !DILocation(line: 17, column: 16, scope: !67)
!73 = !DILocation(line: 17, column: 11, scope: !67)
!74 = !DILocation(line: 18, column: 12, scope: !67)
!75 = !DILocation(line: 18, column: 5, scope: !67)
!76 = distinct !DISubprogram(name: "tmp", scope: !59, file: !59, line: 22, type: !77, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!77 = !DISubroutineType(types: !78)
!78 = !{!15}
!79 = !DILocalVariable(name: "p", scope: !76, file: !59, line: 25, type: !62)
!80 = !DILocation(line: 25, column: 8, scope: !76)
!81 = !DILocation(line: 25, column: 12, scope: !76)
!82 = !DILocalVariable(name: "q", scope: !76, file: !59, line: 26, type: !62)
!83 = !DILocation(line: 26, column: 8, scope: !76)
!84 = !DILocation(line: 26, column: 12, scope: !76)
!85 = !DILocalVariable(name: "t", scope: !76, file: !59, line: 27, type: !62)
!86 = !DILocation(line: 27, column: 7, scope: !76)
!87 = !DILocation(line: 27, column: 16, scope: !76)
!88 = !DILocation(line: 27, column: 12, scope: !76)
!89 = !DILocalVariable(name: "s", scope: !76, file: !59, line: 28, type: !62)
!90 = !DILocation(line: 28, column: 7, scope: !76)
!91 = !DILocation(line: 28, column: 15, scope: !76)
!92 = !DILocation(line: 28, column: 11, scope: !76)
!93 = !DILocation(line: 29, column: 8, scope: !76)
!94 = !DILocation(line: 29, column: 3, scope: !76)
!95 = !DILocation(line: 30, column: 1, scope: !76)
!96 = distinct !DISubprogram(name: "main", scope: !59, file: !59, line: 32, type: !77, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
!97 = !DILocation(line: 34, column: 3, scope: !96)
!98 = !DILocation(line: 35, column: 1, scope: !96)
