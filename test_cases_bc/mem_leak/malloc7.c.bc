; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc7.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g = dso_local global ptr null, align 8, !dbg !0
@.str = private unnamed_addr constant [6 x i8] c"%d,%d\00", align 1, !dbg !5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !22 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %0 = load i32, ptr %n.addr, align 4, !dbg !30
  %conv = sext i32 %0 to i64, !dbg !30
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !31
  ret ptr %call, !dbg !32
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !33 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, ptr %n.addr, align 4, !dbg !36
  %conv = sext i32 %0 to i64, !dbg !36
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !37
  ret ptr %call, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !39 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %0 = load i32, ptr %n.addr, align 4, !dbg !42
  %conv = sext i32 %0 to i64, !dbg !42
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !43
  ret ptr %call, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !45 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %0 = load i32, ptr %n.addr, align 4, !dbg !48
  %conv = sext i32 %0 to i64, !dbg !48
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !49
  ret ptr %call, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !51 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %0 = load i32, ptr %n.addr, align 4, !dbg !54
  %conv = sext i32 %0 to i64, !dbg !54
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !55
  ret ptr %call, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !57 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %0 = load i32, ptr %n.addr, align 4, !dbg !60
  %conv = sext i32 %0 to i64, !dbg !60
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !61
  ret ptr %call, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %0 = load i32, ptr %n.addr, align 4, !dbg !66
  %conv = sext i32 %0 to i64, !dbg !66
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !67
  ret ptr %call, !dbg !68
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !69 {
entry:
  %p = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %p, metadata !72, metadata !DIExpression()), !dbg !73
  %call = call ptr @SAFEMALLOC(i32 noundef 1), !dbg !74
  store ptr %call, ptr %p, align 8, !dbg !73
  %0 = load ptr, ptr %p, align 8, !dbg !75
  store ptr %0, ptr @g, align 8, !dbg !76
  %1 = load ptr, ptr @g, align 8, !dbg !77
  %2 = load ptr, ptr %p, align 8, !dbg !78
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %1, ptr noundef %2), !dbg !79
  ret i32 0, !dbg !80
}

declare i32 @printf(ptr noundef, ...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!14, !15, !16, !17, !18, !19, !20}
!llvm.ident = !{!21}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !7, line: 10, type: !12, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "82974254a31bb29f249f16832832665c")
!4 = !{!5, !0}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(scope: null, file: !7, line: 15, type: !8, isLocal: true, isDefinition: true)
!7 = !DIFile(filename: "src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "82974254a31bb29f249f16832832665c")
!8 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 48, elements: !10)
!9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!10 = !{!11}
!11 = !DISubrange(count: 6)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !{i32 7, !"Dwarf Version", i32 5}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 8, !"PIC Level", i32 2}
!18 = !{i32 7, !"PIE Level", i32 2}
!19 = !{i32 7, !"uwtable", i32 2}
!20 = !{i32 7, !"frame-pointer", i32 2}
!21 = !{!"clang version 16.0.0"}
!22 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !23, file: !23, line: 5, type: !24, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!23 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!24 = !DISubroutineType(types: !25)
!25 = !{!26, !13}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !{}
!28 = !DILocalVariable(name: "n", arg: 1, scope: !22, file: !23, line: 5, type: !13)
!29 = !DILocation(line: 5, column: 22, scope: !22)
!30 = !DILocation(line: 6, column: 17, scope: !22)
!31 = !DILocation(line: 6, column: 10, scope: !22)
!32 = !DILocation(line: 6, column: 3, scope: !22)
!33 = distinct !DISubprogram(name: "PLKMALLOC", scope: !23, file: !23, line: 9, type: !24, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!34 = !DILocalVariable(name: "n", arg: 1, scope: !33, file: !23, line: 9, type: !13)
!35 = !DILocation(line: 9, column: 21, scope: !33)
!36 = !DILocation(line: 10, column: 17, scope: !33)
!37 = !DILocation(line: 10, column: 10, scope: !33)
!38 = !DILocation(line: 10, column: 3, scope: !33)
!39 = distinct !DISubprogram(name: "NFRMALLOC", scope: !23, file: !23, line: 13, type: !24, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!40 = !DILocalVariable(name: "n", arg: 1, scope: !39, file: !23, line: 13, type: !13)
!41 = !DILocation(line: 13, column: 21, scope: !39)
!42 = !DILocation(line: 14, column: 17, scope: !39)
!43 = !DILocation(line: 14, column: 10, scope: !39)
!44 = !DILocation(line: 14, column: 3, scope: !39)
!45 = distinct !DISubprogram(name: "CLKMALLOC", scope: !23, file: !23, line: 17, type: !24, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!46 = !DILocalVariable(name: "n", arg: 1, scope: !45, file: !23, line: 17, type: !13)
!47 = !DILocation(line: 17, column: 21, scope: !45)
!48 = !DILocation(line: 18, column: 17, scope: !45)
!49 = !DILocation(line: 18, column: 10, scope: !45)
!50 = !DILocation(line: 18, column: 3, scope: !45)
!51 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !23, file: !23, line: 21, type: !24, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!52 = !DILocalVariable(name: "n", arg: 1, scope: !51, file: !23, line: 21, type: !13)
!53 = !DILocation(line: 21, column: 21, scope: !51)
!54 = !DILocation(line: 22, column: 17, scope: !51)
!55 = !DILocation(line: 22, column: 10, scope: !51)
!56 = !DILocation(line: 22, column: 3, scope: !51)
!57 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !23, file: !23, line: 25, type: !24, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!58 = !DILocalVariable(name: "n", arg: 1, scope: !57, file: !23, line: 25, type: !13)
!59 = !DILocation(line: 25, column: 21, scope: !57)
!60 = !DILocation(line: 26, column: 17, scope: !57)
!61 = !DILocation(line: 26, column: 10, scope: !57)
!62 = !DILocation(line: 26, column: 3, scope: !57)
!63 = distinct !DISubprogram(name: "LEAKFN", scope: !23, file: !23, line: 29, type: !24, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!64 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !23, line: 29, type: !13)
!65 = !DILocation(line: 29, column: 18, scope: !63)
!66 = !DILocation(line: 30, column: 17, scope: !63)
!67 = !DILocation(line: 30, column: 10, scope: !63)
!68 = !DILocation(line: 30, column: 3, scope: !63)
!69 = distinct !DISubprogram(name: "main", scope: !7, file: !7, line: 11, type: !70, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !27)
!70 = !DISubroutineType(types: !71)
!71 = !{!13}
!72 = !DILocalVariable(name: "p", scope: !69, file: !7, line: 13, type: !12)
!73 = !DILocation(line: 13, column: 7, scope: !69)
!74 = !DILocation(line: 13, column: 11, scope: !69)
!75 = !DILocation(line: 14, column: 6, scope: !69)
!76 = !DILocation(line: 14, column: 4, scope: !69)
!77 = !DILocation(line: 15, column: 17, scope: !69)
!78 = !DILocation(line: 15, column: 19, scope: !69)
!79 = !DILocation(line: 15, column: 2, scope: !69)
!80 = !DILocation(line: 16, column: 1, scope: !69)
