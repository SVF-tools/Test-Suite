; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc21.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc21.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FOO = type { ptr, ptr, ptr }

@.str = private unnamed_addr constant [9 x i8] c"%d,%d,%d\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !21 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, ptr %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !30
  ret ptr %call, !dbg !31
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !36
  ret ptr %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, ptr %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !42
  ret ptr %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !48
  ret ptr %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, ptr %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !54
  ret ptr %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !56 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %0 = load i32, ptr %n.addr, align 4, !dbg !59
  %conv = sext i32 %0 to i64, !dbg !59
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !60
  ret ptr %call, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !62 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %0 = load i32, ptr %n.addr, align 4, !dbg !65
  %conv = sext i32 %0 to i64, !dbg !65
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !66
  ret ptr %call, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getfree(ptr noundef %net) #0 !dbg !68 {
entry:
  %net.addr = alloca ptr, align 8
  store ptr %net, ptr %net.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %net.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %0 = load ptr, ptr %net.addr, align 8, !dbg !80
  %f1 = getelementptr inbounds %struct.FOO, ptr %0, i32 0, i32 0, !dbg !81
  %1 = load ptr, ptr %f1, align 8, !dbg !81
  call void @free(ptr noundef %1) #6, !dbg !82
  %2 = load ptr, ptr %net.addr, align 8, !dbg !83
  %f2 = getelementptr inbounds %struct.FOO, ptr %2, i32 0, i32 1, !dbg !84
  %3 = load ptr, ptr %f2, align 8, !dbg !84
  call void @free(ptr noundef %3) #6, !dbg !85
  %4 = load ptr, ptr %net.addr, align 8, !dbg !86
  %f3 = getelementptr inbounds %struct.FOO, ptr %4, i32 0, i32 2, !dbg !87
  %5 = load ptr, ptr %f3, align 8, !dbg !87
  call void @free(ptr noundef %5) #6, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readmin() #0 !dbg !90 {
entry:
  %net1 = alloca %struct.FOO, align 8
  call void @llvm.dbg.declare(metadata ptr %net1, metadata !93, metadata !DIExpression()), !dbg !94
  %call = call ptr @NFRMALLOC(i32 noundef 4), !dbg !95
  %f1 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 0, !dbg !96
  store ptr %call, ptr %f1, align 8, !dbg !97
  %call1 = call ptr @NFRMALLOC(i32 noundef 2), !dbg !98
  %f2 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 1, !dbg !99
  store ptr %call1, ptr %f2, align 8, !dbg !100
  %call2 = call ptr @NFRMALLOC(i32 noundef 3), !dbg !101
  %f3 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 2, !dbg !102
  store ptr %call2, ptr %f3, align 8, !dbg !103
  %f13 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 0, !dbg !104
  %0 = load ptr, ptr %f13, align 8, !dbg !104
  %f24 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 1, !dbg !105
  %1 = load ptr, ptr %f24, align 8, !dbg !105
  %f35 = getelementptr inbounds %struct.FOO, ptr %net1, i32 0, i32 2, !dbg !106
  %2 = load ptr, ptr %f35, align 8, !dbg !106
  %call6 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %0, ptr noundef %1, ptr noundef %2), !dbg !107
  ret void, !dbg !108
}

declare i32 @printf(ptr noundef, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !109 {
entry:
  call void @readmin(), !dbg !112
  ret i32 0, !dbg !113
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!13, !14, !15, !16, !17, !18, !19}
!llvm.ident = !{!20}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 30, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/mem_leak/malloc21.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "c83f9af6573ff6b7ab69cb0e4d4bced8")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 9)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !9, globals: !12, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc21.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "c83f9af6573ff6b7ab69cb0e4d4bced8")
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !{!0}
!13 = !{i32 7, !"Dwarf Version", i32 5}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 8, !"PIC Level", i32 2}
!17 = !{i32 7, !"PIE Level", i32 2}
!18 = !{i32 7, !"uwtable", i32 2}
!19 = !{i32 7, !"frame-pointer", i32 2}
!20 = !{!"clang version 16.0.0"}
!21 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !22, file: !22, line: 5, type: !23, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!22 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!23 = !DISubroutineType(types: !24)
!24 = !{!25, !11}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!26 = !{}
!27 = !DILocalVariable(name: "n", arg: 1, scope: !21, file: !22, line: 5, type: !11)
!28 = !DILocation(line: 5, column: 22, scope: !21)
!29 = !DILocation(line: 6, column: 17, scope: !21)
!30 = !DILocation(line: 6, column: 10, scope: !21)
!31 = !DILocation(line: 6, column: 3, scope: !21)
!32 = distinct !DISubprogram(name: "PLKMALLOC", scope: !22, file: !22, line: 9, type: !23, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !22, line: 9, type: !11)
!34 = !DILocation(line: 9, column: 21, scope: !32)
!35 = !DILocation(line: 10, column: 17, scope: !32)
!36 = !DILocation(line: 10, column: 10, scope: !32)
!37 = !DILocation(line: 10, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRMALLOC", scope: !22, file: !22, line: 13, type: !23, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !22, line: 13, type: !11)
!40 = !DILocation(line: 13, column: 21, scope: !38)
!41 = !DILocation(line: 14, column: 17, scope: !38)
!42 = !DILocation(line: 14, column: 10, scope: !38)
!43 = !DILocation(line: 14, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "CLKMALLOC", scope: !22, file: !22, line: 17, type: !23, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !22, line: 17, type: !11)
!46 = !DILocation(line: 17, column: 21, scope: !44)
!47 = !DILocation(line: 18, column: 17, scope: !44)
!48 = !DILocation(line: 18, column: 10, scope: !44)
!49 = !DILocation(line: 18, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !22, file: !22, line: 21, type: !23, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !22, line: 21, type: !11)
!52 = !DILocation(line: 21, column: 21, scope: !50)
!53 = !DILocation(line: 22, column: 17, scope: !50)
!54 = !DILocation(line: 22, column: 10, scope: !50)
!55 = !DILocation(line: 22, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !22, file: !22, line: 25, type: !23, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!57 = !DILocalVariable(name: "n", arg: 1, scope: !56, file: !22, line: 25, type: !11)
!58 = !DILocation(line: 25, column: 21, scope: !56)
!59 = !DILocation(line: 26, column: 17, scope: !56)
!60 = !DILocation(line: 26, column: 10, scope: !56)
!61 = !DILocation(line: 26, column: 3, scope: !56)
!62 = distinct !DISubprogram(name: "LEAKFN", scope: !22, file: !22, line: 29, type: !23, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!63 = !DILocalVariable(name: "n", arg: 1, scope: !62, file: !22, line: 29, type: !11)
!64 = !DILocation(line: 29, column: 18, scope: !62)
!65 = !DILocation(line: 30, column: 17, scope: !62)
!66 = !DILocation(line: 30, column: 10, scope: !62)
!67 = !DILocation(line: 30, column: 3, scope: !62)
!68 = distinct !DISubprogram(name: "getfree", scope: !2, file: !2, line: 18, type: !69, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!69 = !DISubroutineType(types: !70)
!70 = !{null, !71}
!71 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !72, size: 64)
!72 = !DIDerivedType(tag: DW_TAG_typedef, name: "FOO", file: !2, line: 14, baseType: !73)
!73 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2, line: 10, size: 192, elements: !74)
!74 = !{!75, !76, !77}
!75 = !DIDerivedType(tag: DW_TAG_member, name: "f1", scope: !73, file: !2, line: 11, baseType: !10, size: 64)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "f2", scope: !73, file: !2, line: 12, baseType: !10, size: 64, offset: 64)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "f3", scope: !73, file: !2, line: 13, baseType: !10, size: 64, offset: 128)
!78 = !DILocalVariable(name: "net", arg: 1, scope: !68, file: !2, line: 18, type: !71)
!79 = !DILocation(line: 18, column: 19, scope: !68)
!80 = !DILocation(line: 20, column: 7, scope: !68)
!81 = !DILocation(line: 20, column: 12, scope: !68)
!82 = !DILocation(line: 20, column: 2, scope: !68)
!83 = !DILocation(line: 21, column: 7, scope: !68)
!84 = !DILocation(line: 21, column: 12, scope: !68)
!85 = !DILocation(line: 21, column: 2, scope: !68)
!86 = !DILocation(line: 22, column: 7, scope: !68)
!87 = !DILocation(line: 22, column: 12, scope: !68)
!88 = !DILocation(line: 22, column: 2, scope: !68)
!89 = !DILocation(line: 23, column: 1, scope: !68)
!90 = distinct !DISubprogram(name: "readmin", scope: !2, file: !2, line: 25, type: !91, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!91 = !DISubroutineType(types: !92)
!92 = !{null}
!93 = !DILocalVariable(name: "net1", scope: !90, file: !2, line: 26, type: !72)
!94 = !DILocation(line: 26, column: 6, scope: !90)
!95 = !DILocation(line: 27, column: 18, scope: !90)
!96 = !DILocation(line: 27, column: 7, scope: !90)
!97 = !DILocation(line: 27, column: 10, scope: !90)
!98 = !DILocation(line: 28, column: 18, scope: !90)
!99 = !DILocation(line: 28, column: 7, scope: !90)
!100 = !DILocation(line: 28, column: 10, scope: !90)
!101 = !DILocation(line: 29, column: 18, scope: !90)
!102 = !DILocation(line: 29, column: 7, scope: !90)
!103 = !DILocation(line: 29, column: 10, scope: !90)
!104 = !DILocation(line: 30, column: 25, scope: !90)
!105 = !DILocation(line: 30, column: 33, scope: !90)
!106 = !DILocation(line: 30, column: 41, scope: !90)
!107 = !DILocation(line: 30, column: 2, scope: !90)
!108 = !DILocation(line: 32, column: 1, scope: !90)
!109 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 34, type: !110, scopeLine: 34, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!110 = !DISubroutineType(types: !111)
!111 = !{!11}
!112 = !DILocation(line: 36, column: 2, scope: !109)
!113 = !DILocation(line: 38, column: 1, scope: !109)
