; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp15.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp15.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { ptr, i32 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !18 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32, ptr %n.addr, align 4, !dbg !26
  %conv = sext i32 %0 to i64, !dbg !26
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !27
  ret ptr %call, !dbg !28
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !29 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i32, ptr %n.addr, align 4, !dbg !32
  %conv = sext i32 %0 to i64, !dbg !32
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !33
  ret ptr %call, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !35 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %0 = load i32, ptr %n.addr, align 4, !dbg !38
  %conv = sext i32 %0 to i64, !dbg !38
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !39
  ret ptr %call, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !41 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i32, ptr %n.addr, align 4, !dbg !44
  %conv = sext i32 %0 to i64, !dbg !44
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !45
  ret ptr %call, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !47 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %0 = load i32, ptr %n.addr, align 4, !dbg !50
  %conv = sext i32 %0 to i64, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !51
  ret ptr %call, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !53 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %0 = load i32, ptr %n.addr, align 4, !dbg !56
  %conv = sext i32 %0 to i64, !dbg !56
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !57
  ret ptr %call, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !59 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %0 = load i32, ptr %n.addr, align 4, !dbg !62
  %conv = sext i32 %0 to i64, !dbg !62
  %call = call noalias ptr @malloc(i64 noundef %conv) #4, !dbg !63
  ret ptr %call, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @reverse(ptr noundef %x) #0 !dbg !65 {
entry:
  %x.addr = alloca ptr, align 8
  %y = alloca ptr, align 8
  %t = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata ptr %y, metadata !70, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.declare(metadata ptr %t, metadata !72, metadata !DIExpression()), !dbg !73
  %0 = load ptr, ptr %x.addr, align 8, !dbg !74
  %next = getelementptr inbounds %struct.List, ptr %0, i32 0, i32 0, !dbg !75
  %1 = load ptr, ptr %next, align 8, !dbg !75
  store ptr %1, ptr %y, align 8, !dbg !76
  %2 = load ptr, ptr %x.addr, align 8, !dbg !77
  call void @free(ptr noundef %2) #5, !dbg !78
  %3 = load ptr, ptr %y, align 8, !dbg !79
  store ptr %3, ptr %x.addr, align 8, !dbg !80
  br label %while.cond, !dbg !81

while.cond:                                       ; preds = %while.body, %entry
  %4 = load ptr, ptr %x.addr, align 8, !dbg !82
  %cmp = icmp ne ptr %4, null, !dbg !83
  br i1 %cmp, label %while.body, label %while.end, !dbg !81

while.body:                                       ; preds = %while.cond
  %5 = load ptr, ptr %x.addr, align 8, !dbg !84
  %next1 = getelementptr inbounds %struct.List, ptr %5, i32 0, i32 0, !dbg !86
  %6 = load ptr, ptr %next1, align 8, !dbg !86
  store ptr %6, ptr %t, align 8, !dbg !87
  %7 = load ptr, ptr %y, align 8, !dbg !88
  %8 = load ptr, ptr %x.addr, align 8, !dbg !89
  %next2 = getelementptr inbounds %struct.List, ptr %8, i32 0, i32 0, !dbg !90
  store ptr %7, ptr %next2, align 8, !dbg !91
  %9 = load ptr, ptr %x.addr, align 8, !dbg !92
  store ptr %9, ptr %y, align 8, !dbg !93
  %10 = load ptr, ptr %t, align 8, !dbg !94
  store ptr %10, ptr %x.addr, align 8, !dbg !95
  br label %while.cond, !dbg !81, !llvm.loop !96

while.end:                                        ; preds = %while.cond
  %call = call noalias ptr @malloc(i64 noundef 8) #4, !dbg !99
  store ptr %call, ptr %t, align 8, !dbg !100
  %11 = load ptr, ptr %y, align 8, !dbg !101
  %12 = load ptr, ptr %t, align 8, !dbg !102
  %next3 = getelementptr inbounds %struct.List, ptr %12, i32 0, i32 0, !dbg !103
  store ptr %11, ptr %next3, align 8, !dbg !104
  %13 = load ptr, ptr %t, align 8, !dbg !105
  ret ptr %13, !dbg !106
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @main() #0 !dbg !107 {
entry:
  %node = alloca ptr, align 8
  %ret_val = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %node, metadata !109, metadata !DIExpression()), !dbg !110
  call void @llvm.dbg.declare(metadata ptr %ret_val, metadata !111, metadata !DIExpression()), !dbg !112
  %call = call noalias ptr @malloc(i64 noundef 8) #4, !dbg !113
  store ptr %call, ptr %node, align 8, !dbg !114
  %0 = load ptr, ptr %node, align 8, !dbg !115
  %call1 = call ptr @reverse(ptr noundef %0), !dbg !116
  store ptr %call1, ptr %ret_val, align 8, !dbg !117
  %1 = load ptr, ptr %ret_val, align 8, !dbg !118
  call void @free(ptr noundef %1) #5, !dbg !119
  %2 = load ptr, ptr %ret_val, align 8, !dbg !120
  %next = getelementptr inbounds %struct.List, ptr %2, i32 0, i32 0, !dbg !121
  %3 = load ptr, ptr %next, align 8, !dbg !121
  call void @free(ptr noundef %3) #5, !dbg !122
  %4 = load ptr, ptr %ret_val, align 8, !dbg !123
  ret ptr %4, !dbg !124
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp15.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "17b8f7010b3005ccefff5377bfedd8a1")
!2 = !{!3}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!4 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !5, line: 11, size: 128, elements: !6)
!5 = !DIFile(filename: "src/mem_leak/sp15.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "17b8f7010b3005ccefff5377bfedd8a1")
!6 = !{!7, !8}
!7 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4, file: !5, line: 12, baseType: !3, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4, file: !5, line: 13, baseType: !9, size: 32, offset: 64)
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 16.0.0"}
!18 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 5, type: !20, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!19 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !9}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !{}
!24 = !DILocalVariable(name: "n", arg: 1, scope: !18, file: !19, line: 5, type: !9)
!25 = !DILocation(line: 5, column: 22, scope: !18)
!26 = !DILocation(line: 6, column: 17, scope: !18)
!27 = !DILocation(line: 6, column: 10, scope: !18)
!28 = !DILocation(line: 6, column: 3, scope: !18)
!29 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 9, type: !20, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!30 = !DILocalVariable(name: "n", arg: 1, scope: !29, file: !19, line: 9, type: !9)
!31 = !DILocation(line: 9, column: 21, scope: !29)
!32 = !DILocation(line: 10, column: 17, scope: !29)
!33 = !DILocation(line: 10, column: 10, scope: !29)
!34 = !DILocation(line: 10, column: 3, scope: !29)
!35 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 13, type: !20, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!36 = !DILocalVariable(name: "n", arg: 1, scope: !35, file: !19, line: 13, type: !9)
!37 = !DILocation(line: 13, column: 21, scope: !35)
!38 = !DILocation(line: 14, column: 17, scope: !35)
!39 = !DILocation(line: 14, column: 10, scope: !35)
!40 = !DILocation(line: 14, column: 3, scope: !35)
!41 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 17, type: !20, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!42 = !DILocalVariable(name: "n", arg: 1, scope: !41, file: !19, line: 17, type: !9)
!43 = !DILocation(line: 17, column: 21, scope: !41)
!44 = !DILocation(line: 18, column: 17, scope: !41)
!45 = !DILocation(line: 18, column: 10, scope: !41)
!46 = !DILocation(line: 18, column: 3, scope: !41)
!47 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 21, type: !20, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!48 = !DILocalVariable(name: "n", arg: 1, scope: !47, file: !19, line: 21, type: !9)
!49 = !DILocation(line: 21, column: 21, scope: !47)
!50 = !DILocation(line: 22, column: 17, scope: !47)
!51 = !DILocation(line: 22, column: 10, scope: !47)
!52 = !DILocation(line: 22, column: 3, scope: !47)
!53 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 25, type: !20, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!54 = !DILocalVariable(name: "n", arg: 1, scope: !53, file: !19, line: 25, type: !9)
!55 = !DILocation(line: 25, column: 21, scope: !53)
!56 = !DILocation(line: 26, column: 17, scope: !53)
!57 = !DILocation(line: 26, column: 10, scope: !53)
!58 = !DILocation(line: 26, column: 3, scope: !53)
!59 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 29, type: !20, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!60 = !DILocalVariable(name: "n", arg: 1, scope: !59, file: !19, line: 29, type: !9)
!61 = !DILocation(line: 29, column: 18, scope: !59)
!62 = !DILocation(line: 30, column: 17, scope: !59)
!63 = !DILocation(line: 30, column: 10, scope: !59)
!64 = !DILocation(line: 30, column: 3, scope: !59)
!65 = distinct !DISubprogram(name: "reverse", scope: !5, file: !5, line: 16, type: !66, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!66 = !DISubroutineType(types: !67)
!67 = !{!3, !3}
!68 = !DILocalVariable(name: "x", arg: 1, scope: !65, file: !5, line: 16, type: !3)
!69 = !DILocation(line: 16, column: 35, scope: !65)
!70 = !DILocalVariable(name: "y", scope: !65, file: !5, line: 17, type: !3)
!71 = !DILocation(line: 17, column: 15, scope: !65)
!72 = !DILocalVariable(name: "t", scope: !65, file: !5, line: 17, type: !3)
!73 = !DILocation(line: 17, column: 19, scope: !65)
!74 = !DILocation(line: 18, column: 6, scope: !65)
!75 = !DILocation(line: 18, column: 9, scope: !65)
!76 = !DILocation(line: 18, column: 4, scope: !65)
!77 = !DILocation(line: 19, column: 7, scope: !65)
!78 = !DILocation(line: 19, column: 2, scope: !65)
!79 = !DILocation(line: 20, column: 6, scope: !65)
!80 = !DILocation(line: 20, column: 4, scope: !65)
!81 = !DILocation(line: 21, column: 2, scope: !65)
!82 = !DILocation(line: 21, column: 9, scope: !65)
!83 = !DILocation(line: 21, column: 11, scope: !65)
!84 = !DILocation(line: 22, column: 7, scope: !85)
!85 = distinct !DILexicalBlock(scope: !65, file: !5, line: 21, column: 17)
!86 = !DILocation(line: 22, column: 10, scope: !85)
!87 = !DILocation(line: 22, column: 5, scope: !85)
!88 = !DILocation(line: 23, column: 13, scope: !85)
!89 = !DILocation(line: 23, column: 3, scope: !85)
!90 = !DILocation(line: 23, column: 6, scope: !85)
!91 = !DILocation(line: 23, column: 11, scope: !85)
!92 = !DILocation(line: 24, column: 7, scope: !85)
!93 = !DILocation(line: 24, column: 5, scope: !85)
!94 = !DILocation(line: 25, column: 7, scope: !85)
!95 = !DILocation(line: 25, column: 5, scope: !85)
!96 = distinct !{!96, !81, !97, !98}
!97 = !DILocation(line: 26, column: 2, scope: !65)
!98 = !{!"llvm.loop.mustprogress"}
!99 = !DILocation(line: 27, column: 22, scope: !65)
!100 = !DILocation(line: 27, column: 4, scope: !65)
!101 = !DILocation(line: 28, column: 12, scope: !65)
!102 = !DILocation(line: 28, column: 2, scope: !65)
!103 = !DILocation(line: 28, column: 5, scope: !65)
!104 = !DILocation(line: 28, column: 10, scope: !65)
!105 = !DILocation(line: 29, column: 9, scope: !65)
!106 = !DILocation(line: 29, column: 2, scope: !65)
!107 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 32, type: !108, scopeLine: 32, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !23)
!108 = !DISubroutineType(types: !2)
!109 = !DILocalVariable(name: "node", scope: !107, file: !5, line: 33, type: !3)
!110 = !DILocation(line: 33, column: 15, scope: !107)
!111 = !DILocalVariable(name: "ret_val", scope: !107, file: !5, line: 33, type: !3)
!112 = !DILocation(line: 33, column: 22, scope: !107)
!113 = !DILocation(line: 34, column: 25, scope: !107)
!114 = !DILocation(line: 34, column: 7, scope: !107)
!115 = !DILocation(line: 35, column: 20, scope: !107)
!116 = !DILocation(line: 35, column: 12, scope: !107)
!117 = !DILocation(line: 35, column: 10, scope: !107)
!118 = !DILocation(line: 36, column: 7, scope: !107)
!119 = !DILocation(line: 36, column: 2, scope: !107)
!120 = !DILocation(line: 37, column: 7, scope: !107)
!121 = !DILocation(line: 37, column: 16, scope: !107)
!122 = !DILocation(line: 37, column: 2, scope: !107)
!123 = !DILocation(line: 38, column: 9, scope: !107)
!124 = !DILocation(line: 38, column: 2, scope: !107)
