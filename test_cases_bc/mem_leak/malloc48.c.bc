; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc48.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc48.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"111\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"112\00", align 1, !dbg !7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !20 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, ptr %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !30
  ret ptr %call, !dbg !31
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !36
  ret ptr %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, ptr %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !42
  ret ptr %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !48
  ret ptr %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, ptr %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !54
  ret ptr %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !56 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %0 = load i32, ptr %n.addr, align 4, !dbg !59
  %conv = sext i32 %0 to i64, !dbg !59
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !60
  ret ptr %call, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !62 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %0 = load i32, ptr %n.addr, align 4, !dbg !65
  %conv = sext i32 %0 to i64, !dbg !65
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !66
  ret ptr %call, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !68 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  %a = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %p, metadata !71, metadata !DIExpression()), !dbg !73
  %call = call ptr @PLKMALLOC(i32 noundef 1), !dbg !74
  store ptr %call, ptr %p, align 8, !dbg !73
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !75
  call void @llvm.dbg.declare(metadata ptr %a, metadata !76, metadata !DIExpression()), !dbg !77
  %0 = load i32, ptr %a, align 4, !dbg !78
  switch i32 %0, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
  ], !dbg !79

sw.bb:                                            ; preds = %entry
  %call2 = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !80
  br label %sw.epilog, !dbg !82

sw.bb3:                                           ; preds = %entry
  %call4 = call i32 (ptr, ...) @printf(ptr noundef @.str.1), !dbg !83
  store i32 0, ptr %retval, align 4, !dbg !84
  br label %return, !dbg !84

sw.epilog:                                        ; preds = %sw.bb, %entry
  %1 = load ptr, ptr %p, align 8, !dbg !85
  call void @free(ptr noundef %1) #6, !dbg !86
  store i32 0, ptr %retval, align 4, !dbg !87
  br label %return, !dbg !87

return:                                           ; preds = %sw.epilog, %sw.bb3
  %2 = load i32, ptr %retval, align 4, !dbg !88
  ret i32 %2, !dbg !88
}

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!9}
!llvm.module.flags = !{!12, !13, !14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 12, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/mem_leak/malloc48.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "697d01f5e7b63619699c990bf3cda5b3")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 4)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true)
!9 = distinct !DICompileUnit(language: DW_LANG_C11, file: !10, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !11, splitDebugInlining: false, nameTableKind: None)
!10 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc48.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "697d01f5e7b63619699c990bf3cda5b3")
!11 = !{!0, !7}
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 8, !"PIC Level", i32 2}
!16 = !{i32 7, !"PIE Level", i32 2}
!17 = !{i32 7, !"uwtable", i32 2}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 16.0.0"}
!20 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !21, file: !21, line: 5, type: !22, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!21 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !25}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!25 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!26 = !{}
!27 = !DILocalVariable(name: "n", arg: 1, scope: !20, file: !21, line: 5, type: !25)
!28 = !DILocation(line: 5, column: 22, scope: !20)
!29 = !DILocation(line: 6, column: 17, scope: !20)
!30 = !DILocation(line: 6, column: 10, scope: !20)
!31 = !DILocation(line: 6, column: 3, scope: !20)
!32 = distinct !DISubprogram(name: "PLKMALLOC", scope: !21, file: !21, line: 9, type: !22, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !21, line: 9, type: !25)
!34 = !DILocation(line: 9, column: 21, scope: !32)
!35 = !DILocation(line: 10, column: 17, scope: !32)
!36 = !DILocation(line: 10, column: 10, scope: !32)
!37 = !DILocation(line: 10, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRMALLOC", scope: !21, file: !21, line: 13, type: !22, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !21, line: 13, type: !25)
!40 = !DILocation(line: 13, column: 21, scope: !38)
!41 = !DILocation(line: 14, column: 17, scope: !38)
!42 = !DILocation(line: 14, column: 10, scope: !38)
!43 = !DILocation(line: 14, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "CLKMALLOC", scope: !21, file: !21, line: 17, type: !22, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !21, line: 17, type: !25)
!46 = !DILocation(line: 17, column: 21, scope: !44)
!47 = !DILocation(line: 18, column: 17, scope: !44)
!48 = !DILocation(line: 18, column: 10, scope: !44)
!49 = !DILocation(line: 18, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !21, file: !21, line: 21, type: !22, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !21, line: 21, type: !25)
!52 = !DILocation(line: 21, column: 21, scope: !50)
!53 = !DILocation(line: 22, column: 17, scope: !50)
!54 = !DILocation(line: 22, column: 10, scope: !50)
!55 = !DILocation(line: 22, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !21, file: !21, line: 25, type: !22, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!57 = !DILocalVariable(name: "n", arg: 1, scope: !56, file: !21, line: 25, type: !25)
!58 = !DILocation(line: 25, column: 21, scope: !56)
!59 = !DILocation(line: 26, column: 17, scope: !56)
!60 = !DILocation(line: 26, column: 10, scope: !56)
!61 = !DILocation(line: 26, column: 3, scope: !56)
!62 = distinct !DISubprogram(name: "LEAKFN", scope: !21, file: !21, line: 29, type: !22, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!63 = !DILocalVariable(name: "n", arg: 1, scope: !62, file: !21, line: 29, type: !25)
!64 = !DILocation(line: 29, column: 18, scope: !62)
!65 = !DILocation(line: 30, column: 17, scope: !62)
!66 = !DILocation(line: 30, column: 10, scope: !62)
!67 = !DILocation(line: 30, column: 3, scope: !62)
!68 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 10, type: !69, scopeLine: 10, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !26)
!69 = !DISubroutineType(types: !70)
!70 = !{!25}
!71 = !DILocalVariable(name: "p", scope: !68, file: !2, line: 11, type: !72)
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!73 = !DILocation(line: 11, column: 7, scope: !68)
!74 = !DILocation(line: 11, column: 11, scope: !68)
!75 = !DILocation(line: 12, column: 2, scope: !68)
!76 = !DILocalVariable(name: "a", scope: !68, file: !2, line: 14, type: !25)
!77 = !DILocation(line: 14, column: 6, scope: !68)
!78 = !DILocation(line: 15, column: 10, scope: !68)
!79 = !DILocation(line: 15, column: 2, scope: !68)
!80 = !DILocation(line: 17, column: 3, scope: !81)
!81 = distinct !DILexicalBlock(scope: !68, file: !2, line: 15, column: 13)
!82 = !DILocation(line: 18, column: 3, scope: !81)
!83 = !DILocation(line: 20, column: 3, scope: !81)
!84 = !DILocation(line: 21, column: 3, scope: !81)
!85 = !DILocation(line: 24, column: 7, scope: !68)
!86 = !DILocation(line: 24, column: 2, scope: !68)
!87 = !DILocation(line: 25, column: 2, scope: !68)
!88 = !DILocation(line: 26, column: 1, scope: !68)
