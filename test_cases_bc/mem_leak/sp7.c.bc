; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/mem_leak/sp7.c.bc'
source_filename = "/root/testsss/Test-Suite/src/mem_leak/sp7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@G = dso_local global ptr null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !18 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !23, !DIExpression(), !24)
  %0 = load i32, ptr %n.addr, align 4, !dbg !25
  %conv = sext i32 %0 to i64, !dbg !25
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !26
  ret ptr %call, !dbg !27
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !28 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !29, !DIExpression(), !30)
  %0 = load i32, ptr %n.addr, align 4, !dbg !31
  %conv = sext i32 %0 to i64, !dbg !31
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !32
  ret ptr %call, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !34 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !35, !DIExpression(), !36)
  %0 = load i32, ptr %n.addr, align 4, !dbg !37
  %conv = sext i32 %0 to i64, !dbg !37
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !38
  ret ptr %call, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !40 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !41, !DIExpression(), !42)
  %0 = load i32, ptr %n.addr, align 4, !dbg !43
  %conv = sext i32 %0 to i64, !dbg !43
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !44
  ret ptr %call, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !46 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !47, !DIExpression(), !48)
  %0 = load i32, ptr %n.addr, align 4, !dbg !49
  %conv = sext i32 %0 to i64, !dbg !49
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !50
  ret ptr %call, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !52 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !53, !DIExpression(), !54)
  %0 = load i32, ptr %n.addr, align 4, !dbg !55
  %conv = sext i32 %0 to i64, !dbg !55
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !56
  ret ptr %call, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !58 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
    #dbg_declare(ptr %n.addr, !59, !DIExpression(), !60)
  %0 = load i32, ptr %n.addr, align 4, !dbg !61
  %conv = sext i32 %0 to i64, !dbg !61
  %call = call noalias ptr @malloc(i64 noundef %conv) #2, !dbg !62
  ret ptr %call, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @make_global() #0 !dbg !64 {
entry:
  ret ptr @G, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ResourceLeak_TC07(ptr noundef %p) #0 !dbg !68 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca ptr, align 8
  %gp = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
    #dbg_declare(ptr %p.addr, !71, !DIExpression(), !72)
    #dbg_declare(ptr %gp, !73, !DIExpression(), !75)
  %call = call ptr @make_global(), !dbg !76
  store ptr %call, ptr %gp, align 8, !dbg !75
  %0 = load ptr, ptr %p.addr, align 8, !dbg !77
  %1 = load ptr, ptr %gp, align 8, !dbg !78
  store ptr %0, ptr %1, align 8, !dbg !79
  %2 = load i32, ptr %retval, align 4, !dbg !80
  ret i32 %2, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !81 {
entry:
  %retval = alloca i32, align 4
  %p = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
    #dbg_declare(ptr %p, !84, !DIExpression(), !85)
  %call = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !86
  store ptr %call, ptr %p, align 8, !dbg !87
  %0 = load ptr, ptr %p, align 8, !dbg !88
  %call1 = call i32 @ResourceLeak_TC07(ptr noundef %0), !dbg !89
  ret i32 0, !dbg !90
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "G", scope: !2, file: !9, line: 11, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !4, globals: !8, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/root/testsss/Test-Suite/src/mem_leak/sp7.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c49999934a0ddd7b640107215a377423")
!4 = !{!5, !6}
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!0}
!9 = !DIFile(filename: "src/mem_leak/sp7.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "c49999934a0ddd7b640107215a377423")
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!18 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 5, type: !20, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!19 = !DIFile(filename: "memleak_check.h", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!20 = !DISubroutineType(types: !21)
!21 = !{!5, !7}
!22 = !{}
!23 = !DILocalVariable(name: "n", arg: 1, scope: !18, file: !19, line: 5, type: !7)
!24 = !DILocation(line: 5, column: 22, scope: !18)
!25 = !DILocation(line: 6, column: 17, scope: !18)
!26 = !DILocation(line: 6, column: 10, scope: !18)
!27 = !DILocation(line: 6, column: 3, scope: !18)
!28 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 9, type: !20, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!29 = !DILocalVariable(name: "n", arg: 1, scope: !28, file: !19, line: 9, type: !7)
!30 = !DILocation(line: 9, column: 21, scope: !28)
!31 = !DILocation(line: 10, column: 17, scope: !28)
!32 = !DILocation(line: 10, column: 10, scope: !28)
!33 = !DILocation(line: 10, column: 3, scope: !28)
!34 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 13, type: !20, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!35 = !DILocalVariable(name: "n", arg: 1, scope: !34, file: !19, line: 13, type: !7)
!36 = !DILocation(line: 13, column: 21, scope: !34)
!37 = !DILocation(line: 14, column: 17, scope: !34)
!38 = !DILocation(line: 14, column: 10, scope: !34)
!39 = !DILocation(line: 14, column: 3, scope: !34)
!40 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 17, type: !20, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!41 = !DILocalVariable(name: "n", arg: 1, scope: !40, file: !19, line: 17, type: !7)
!42 = !DILocation(line: 17, column: 21, scope: !40)
!43 = !DILocation(line: 18, column: 17, scope: !40)
!44 = !DILocation(line: 18, column: 10, scope: !40)
!45 = !DILocation(line: 18, column: 3, scope: !40)
!46 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 21, type: !20, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!47 = !DILocalVariable(name: "n", arg: 1, scope: !46, file: !19, line: 21, type: !7)
!48 = !DILocation(line: 21, column: 21, scope: !46)
!49 = !DILocation(line: 22, column: 17, scope: !46)
!50 = !DILocation(line: 22, column: 10, scope: !46)
!51 = !DILocation(line: 22, column: 3, scope: !46)
!52 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 25, type: !20, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!53 = !DILocalVariable(name: "n", arg: 1, scope: !52, file: !19, line: 25, type: !7)
!54 = !DILocation(line: 25, column: 21, scope: !52)
!55 = !DILocation(line: 26, column: 17, scope: !52)
!56 = !DILocation(line: 26, column: 10, scope: !52)
!57 = !DILocation(line: 26, column: 3, scope: !52)
!58 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 29, type: !20, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!59 = !DILocalVariable(name: "n", arg: 1, scope: !58, file: !19, line: 29, type: !7)
!60 = !DILocation(line: 29, column: 18, scope: !58)
!61 = !DILocation(line: 30, column: 17, scope: !58)
!62 = !DILocation(line: 30, column: 10, scope: !58)
!63 = !DILocation(line: 30, column: 3, scope: !58)
!64 = distinct !DISubprogram(name: "make_global", scope: !9, file: !9, line: 13, type: !65, scopeLine: 13, spFlags: DISPFlagDefinition, unit: !2)
!65 = !DISubroutineType(types: !66)
!66 = !{!6}
!67 = !DILocation(line: 14, column: 4, scope: !64)
!68 = distinct !DISubprogram(name: "ResourceLeak_TC07", scope: !9, file: !9, line: 17, type: !69, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!69 = !DISubroutineType(types: !70)
!70 = !{!7, !6}
!71 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !9, line: 17, type: !6)
!72 = !DILocation(line: 17, column: 29, scope: !68)
!73 = !DILocalVariable(name: "gp", scope: !68, file: !9, line: 19, type: !74)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!75 = !DILocation(line: 19, column: 10, scope: !68)
!76 = !DILocation(line: 19, column: 15, scope: !68)
!77 = !DILocation(line: 20, column: 12, scope: !68)
!78 = !DILocation(line: 20, column: 7, scope: !68)
!79 = !DILocation(line: 20, column: 10, scope: !68)
!80 = !DILocation(line: 21, column: 1, scope: !68)
!81 = distinct !DISubprogram(name: "main", scope: !9, file: !9, line: 23, type: !82, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !22)
!82 = !DISubroutineType(types: !83)
!83 = !{!7}
!84 = !DILocalVariable(name: "p", scope: !81, file: !9, line: 25, type: !6)
!85 = !DILocation(line: 25, column: 9, scope: !81)
!86 = !DILocation(line: 26, column: 19, scope: !81)
!87 = !DILocation(line: 26, column: 9, scope: !81)
!88 = !DILocation(line: 27, column: 23, scope: !81)
!89 = !DILocation(line: 27, column: 4, scope: !81)
!90 = !DILocation(line: 28, column: 7, scope: !81)
