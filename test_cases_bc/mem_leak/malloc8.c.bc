; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc8.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [45 x i8] c"Error:  Unable to malloc memory.  Aborting.\0A\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !21 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load i32, ptr %n.addr, align 4, !dbg !29
  %conv = sext i32 %0 to i64, !dbg !29
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !30
  ret ptr %call, !dbg !31
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %conv = sext i32 %0 to i64, !dbg !35
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !36
  ret ptr %call, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !38 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load i32, ptr %n.addr, align 4, !dbg !41
  %conv = sext i32 %0 to i64, !dbg !41
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !42
  ret ptr %call, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !44 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %n.addr, align 4, !dbg !47
  %conv = sext i32 %0 to i64, !dbg !47
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !48
  ret ptr %call, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !50 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %0 = load i32, ptr %n.addr, align 4, !dbg !53
  %conv = sext i32 %0 to i64, !dbg !53
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !54
  ret ptr %call, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !56 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %0 = load i32, ptr %n.addr, align 4, !dbg !59
  %conv = sext i32 %0 to i64, !dbg !59
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !60
  ret ptr %call, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !62 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %0 = load i32, ptr %n.addr, align 4, !dbg !65
  %conv = sext i32 %0 to i64, !dbg !65
  %call = call noalias ptr @malloc(i64 noundef %conv) #6, !dbg !66
  ret ptr %call, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @my_malloc(i32 noundef %size) #0 !dbg !68 {
entry:
  %size.addr = alloca i32, align 4
  %ret = alloca ptr, align 8
  store i32 %size, ptr %size.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %size.addr, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata ptr %ret, metadata !71, metadata !DIExpression()), !dbg !72
  %0 = load i32, ptr %size.addr, align 4, !dbg !73
  %call = call ptr @SAFEMALLOC(i32 noundef %0), !dbg !75
  store ptr %call, ptr %ret, align 8, !dbg !76
  %cmp = icmp eq ptr %call, null, !dbg !77
  br i1 %cmp, label %if.then, label %if.end, !dbg !78

if.then:                                          ; preds = %entry
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str), !dbg !79
  call void @exit(i32 noundef 1) #7, !dbg !81
  unreachable, !dbg !81

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %ret, align 8, !dbg !82
  ret ptr %1, !dbg !83
}

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !84 {
entry:
  %side_ordering = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %side_ordering, metadata !87, metadata !DIExpression()), !dbg !88
  %call = call ptr @my_malloc(i32 noundef 40), !dbg !89
  store ptr %call, ptr %side_ordering, align 8, !dbg !88
  %0 = load ptr, ptr %side_ordering, align 8, !dbg !90
  call void @free(ptr noundef %0) #8, !dbg !91
  ret i32 0, !dbg !92
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #5

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!13, !14, !15, !16, !17, !18, !19}
!llvm.ident = !{!20}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 16, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "4ff05b411e2382e9b06b46bb557de701")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 360, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 45)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !9, globals: !12, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "4ff05b411e2382e9b06b46bb557de701")
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !{!0}
!13 = !{i32 7, !"Dwarf Version", i32 5}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 8, !"PIC Level", i32 2}
!17 = !{i32 7, !"PIE Level", i32 2}
!18 = !{i32 7, !"uwtable", i32 2}
!19 = !{i32 7, !"frame-pointer", i32 2}
!20 = !{!"clang version 16.0.0"}
!21 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !22, file: !22, line: 5, type: !23, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!22 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!23 = !DISubroutineType(types: !24)
!24 = !{!25, !11}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!26 = !{}
!27 = !DILocalVariable(name: "n", arg: 1, scope: !21, file: !22, line: 5, type: !11)
!28 = !DILocation(line: 5, column: 22, scope: !21)
!29 = !DILocation(line: 6, column: 17, scope: !21)
!30 = !DILocation(line: 6, column: 10, scope: !21)
!31 = !DILocation(line: 6, column: 3, scope: !21)
!32 = distinct !DISubprogram(name: "PLKMALLOC", scope: !22, file: !22, line: 9, type: !23, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !22, line: 9, type: !11)
!34 = !DILocation(line: 9, column: 21, scope: !32)
!35 = !DILocation(line: 10, column: 17, scope: !32)
!36 = !DILocation(line: 10, column: 10, scope: !32)
!37 = !DILocation(line: 10, column: 3, scope: !32)
!38 = distinct !DISubprogram(name: "NFRMALLOC", scope: !22, file: !22, line: 13, type: !23, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!39 = !DILocalVariable(name: "n", arg: 1, scope: !38, file: !22, line: 13, type: !11)
!40 = !DILocation(line: 13, column: 21, scope: !38)
!41 = !DILocation(line: 14, column: 17, scope: !38)
!42 = !DILocation(line: 14, column: 10, scope: !38)
!43 = !DILocation(line: 14, column: 3, scope: !38)
!44 = distinct !DISubprogram(name: "CLKMALLOC", scope: !22, file: !22, line: 17, type: !23, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!45 = !DILocalVariable(name: "n", arg: 1, scope: !44, file: !22, line: 17, type: !11)
!46 = !DILocation(line: 17, column: 21, scope: !44)
!47 = !DILocation(line: 18, column: 17, scope: !44)
!48 = !DILocation(line: 18, column: 10, scope: !44)
!49 = !DILocation(line: 18, column: 3, scope: !44)
!50 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !22, file: !22, line: 21, type: !23, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!51 = !DILocalVariable(name: "n", arg: 1, scope: !50, file: !22, line: 21, type: !11)
!52 = !DILocation(line: 21, column: 21, scope: !50)
!53 = !DILocation(line: 22, column: 17, scope: !50)
!54 = !DILocation(line: 22, column: 10, scope: !50)
!55 = !DILocation(line: 22, column: 3, scope: !50)
!56 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !22, file: !22, line: 25, type: !23, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!57 = !DILocalVariable(name: "n", arg: 1, scope: !56, file: !22, line: 25, type: !11)
!58 = !DILocation(line: 25, column: 21, scope: !56)
!59 = !DILocation(line: 26, column: 17, scope: !56)
!60 = !DILocation(line: 26, column: 10, scope: !56)
!61 = !DILocation(line: 26, column: 3, scope: !56)
!62 = distinct !DISubprogram(name: "LEAKFN", scope: !22, file: !22, line: 29, type: !23, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!63 = !DILocalVariable(name: "n", arg: 1, scope: !62, file: !22, line: 29, type: !11)
!64 = !DILocation(line: 29, column: 18, scope: !62)
!65 = !DILocation(line: 30, column: 17, scope: !62)
!66 = !DILocation(line: 30, column: 10, scope: !62)
!67 = !DILocation(line: 30, column: 3, scope: !62)
!68 = distinct !DISubprogram(name: "my_malloc", scope: !2, file: !2, line: 11, type: !23, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!69 = !DILocalVariable(name: "size", arg: 1, scope: !68, file: !2, line: 11, type: !11)
!70 = !DILocation(line: 11, column: 22, scope: !68)
!71 = !DILocalVariable(name: "ret", scope: !68, file: !2, line: 13, type: !25)
!72 = !DILocation(line: 13, column: 9, scope: !68)
!73 = !DILocation(line: 15, column: 27, scope: !74)
!74 = distinct !DILexicalBlock(scope: !68, file: !2, line: 15, column: 8)
!75 = !DILocation(line: 15, column: 15, scope: !74)
!76 = !DILocation(line: 15, column: 13, scope: !74)
!77 = !DILocation(line: 15, column: 34, scope: !74)
!78 = !DILocation(line: 15, column: 8, scope: !68)
!79 = !DILocation(line: 16, column: 9, scope: !80)
!80 = distinct !DILexicalBlock(scope: !74, file: !2, line: 15, column: 40)
!81 = !DILocation(line: 17, column: 10, scope: !80)
!82 = !DILocation(line: 19, column: 13, scope: !68)
!83 = !DILocation(line: 19, column: 5, scope: !68)
!84 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 22, type: !85, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !26)
!85 = !DISubroutineType(types: !86)
!86 = !{!11}
!87 = !DILocalVariable(name: "side_ordering", scope: !84, file: !2, line: 25, type: !10)
!88 = !DILocation(line: 25, column: 8, scope: !84)
!89 = !DILocation(line: 25, column: 32, scope: !84)
!90 = !DILocation(line: 27, column: 7, scope: !84)
!91 = !DILocation(line: 27, column: 2, scope: !84)
!92 = !DILocation(line: 28, column: 1, scope: !84)
