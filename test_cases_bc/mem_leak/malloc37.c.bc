; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc37.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc37.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Buf = type { ptr }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1, !dbg !0
@Buf = dso_local global %struct.Buf zeroinitializer, align 8, !dbg !7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 !dbg !24 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load i32, ptr %n.addr, align 4, !dbg !33
  %conv = sext i32 %0 to i64, !dbg !33
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !34
  ret ptr %call, !dbg !35
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKMALLOC(i32 noundef %n) #0 !dbg !36 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %0 = load i32, ptr %n.addr, align 4, !dbg !39
  %conv = sext i32 %0 to i64, !dbg !39
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !40
  ret ptr %call, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRMALLOC(i32 noundef %n) #0 !dbg !42 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %0 = load i32, ptr %n.addr, align 4, !dbg !45
  %conv = sext i32 %0 to i64, !dbg !45
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !46
  ret ptr %call, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @CLKMALLOC(i32 noundef %n) #0 !dbg !48 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %0 = load i32, ptr %n.addr, align 4, !dbg !51
  %conv = sext i32 %0 to i64, !dbg !51
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !52
  ret ptr %call, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @NFRLEAKFP(i32 noundef %n) #0 !dbg !54 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %0 = load i32, ptr %n.addr, align 4, !dbg !57
  %conv = sext i32 %0 to i64, !dbg !57
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !58
  ret ptr %call, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @PLKLEAKFP(i32 noundef %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, ptr %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !64
  ret ptr %call, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @LEAKFN(i32 noundef %n) #0 !dbg !66 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, ptr %n.addr, align 4, !dbg !69
  %conv = sext i32 %0 to i64, !dbg !69
  %call = call noalias ptr @malloc(i64 noundef %conv) #5, !dbg !70
  ret ptr %call, !dbg !71
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @readBuf() #0 !dbg !72 {
entry:
  %buf = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !76, metadata !DIExpression()), !dbg !77
  %call = call ptr @NFRMALLOC(i32 noundef 10), !dbg !78
  store ptr %call, ptr %buf, align 8, !dbg !77
  %call1 = call ptr @SAFEMALLOC(i32 noundef 10), !dbg !79
  %0 = load ptr, ptr %buf, align 8, !dbg !80
  %name = getelementptr inbounds %struct.Buf, ptr %0, i32 0, i32 0, !dbg !81
  store ptr %call1, ptr %name, align 8, !dbg !82
  %1 = load ptr, ptr %buf, align 8, !dbg !83
  ret ptr %1, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !85 {
entry:
  %buf = alloca ptr, align 8
  %buf1 = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !88, metadata !DIExpression()), !dbg !89
  %call = call ptr @readBuf(), !dbg !90
  store ptr %call, ptr %buf, align 8, !dbg !89
  %0 = load ptr, ptr %buf, align 8, !dbg !91
  %name = getelementptr inbounds %struct.Buf, ptr %0, i32 0, i32 0, !dbg !92
  %1 = load ptr, ptr %name, align 8, !dbg !92
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %1), !dbg !93
  call void @llvm.dbg.declare(metadata ptr %buf1, metadata !94, metadata !DIExpression()), !dbg !95
  %call2 = call ptr @readBuf(), !dbg !96
  store ptr %call2, ptr %buf1, align 8, !dbg !95
  %2 = load ptr, ptr %buf, align 8, !dbg !97
  %name3 = getelementptr inbounds %struct.Buf, ptr %2, i32 0, i32 0, !dbg !98
  %3 = load ptr, ptr %name3, align 8, !dbg !98
  call void @free(ptr noundef %3) #6, !dbg !99
  %4 = load ptr, ptr %buf1, align 8, !dbg !100
  %name4 = getelementptr inbounds %struct.Buf, ptr %4, i32 0, i32 0, !dbg !101
  %5 = load ptr, ptr %name4, align 8, !dbg !101
  %call5 = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %5), !dbg !102
  ret i32 0, !dbg !103
}

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!9}
!llvm.module.flags = !{!16, !17, !18, !19, !20, !21, !22}
!llvm.ident = !{!23}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 29, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/mem_leak/malloc37.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "d9a3901b6c2fcf743daea3ef726a4537")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 24, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 3)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "Buf", scope: !9, file: !2, line: 14, type: !12, isLocal: false, isDefinition: true)
!9 = distinct !DICompileUnit(language: DW_LANG_C11, file: !10, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !11, splitDebugInlining: false, nameTableKind: None)
!10 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc37.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "d9a3901b6c2fcf743daea3ef726a4537")
!11 = !{!0, !7}
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Buf", file: !2, line: 10, size: 64, elements: !13)
!13 = !{!14}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !2, line: 12, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!16 = !{i32 7, !"Dwarf Version", i32 5}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{i32 1, !"wchar_size", i32 4}
!19 = !{i32 8, !"PIC Level", i32 2}
!20 = !{i32 7, !"PIE Level", i32 2}
!21 = !{i32 7, !"uwtable", i32 2}
!22 = !{i32 7, !"frame-pointer", i32 2}
!23 = !{!"clang version 16.0.0"}
!24 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !25, file: !25, line: 5, type: !26, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!25 = !DIFile(filename: "memleak_check.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "f78006bd129ed179fe44821c3aed9305")
!26 = !DISubroutineType(types: !27)
!27 = !{!28, !29}
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!29 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!30 = !{}
!31 = !DILocalVariable(name: "n", arg: 1, scope: !24, file: !25, line: 5, type: !29)
!32 = !DILocation(line: 5, column: 22, scope: !24)
!33 = !DILocation(line: 6, column: 17, scope: !24)
!34 = !DILocation(line: 6, column: 10, scope: !24)
!35 = !DILocation(line: 6, column: 3, scope: !24)
!36 = distinct !DISubprogram(name: "PLKMALLOC", scope: !25, file: !25, line: 9, type: !26, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!37 = !DILocalVariable(name: "n", arg: 1, scope: !36, file: !25, line: 9, type: !29)
!38 = !DILocation(line: 9, column: 21, scope: !36)
!39 = !DILocation(line: 10, column: 17, scope: !36)
!40 = !DILocation(line: 10, column: 10, scope: !36)
!41 = !DILocation(line: 10, column: 3, scope: !36)
!42 = distinct !DISubprogram(name: "NFRMALLOC", scope: !25, file: !25, line: 13, type: !26, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!43 = !DILocalVariable(name: "n", arg: 1, scope: !42, file: !25, line: 13, type: !29)
!44 = !DILocation(line: 13, column: 21, scope: !42)
!45 = !DILocation(line: 14, column: 17, scope: !42)
!46 = !DILocation(line: 14, column: 10, scope: !42)
!47 = !DILocation(line: 14, column: 3, scope: !42)
!48 = distinct !DISubprogram(name: "CLKMALLOC", scope: !25, file: !25, line: 17, type: !26, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!49 = !DILocalVariable(name: "n", arg: 1, scope: !48, file: !25, line: 17, type: !29)
!50 = !DILocation(line: 17, column: 21, scope: !48)
!51 = !DILocation(line: 18, column: 17, scope: !48)
!52 = !DILocation(line: 18, column: 10, scope: !48)
!53 = !DILocation(line: 18, column: 3, scope: !48)
!54 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !25, file: !25, line: 21, type: !26, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!55 = !DILocalVariable(name: "n", arg: 1, scope: !54, file: !25, line: 21, type: !29)
!56 = !DILocation(line: 21, column: 21, scope: !54)
!57 = !DILocation(line: 22, column: 17, scope: !54)
!58 = !DILocation(line: 22, column: 10, scope: !54)
!59 = !DILocation(line: 22, column: 3, scope: !54)
!60 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !25, file: !25, line: 25, type: !26, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!61 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !25, line: 25, type: !29)
!62 = !DILocation(line: 25, column: 21, scope: !60)
!63 = !DILocation(line: 26, column: 17, scope: !60)
!64 = !DILocation(line: 26, column: 10, scope: !60)
!65 = !DILocation(line: 26, column: 3, scope: !60)
!66 = distinct !DISubprogram(name: "LEAKFN", scope: !25, file: !25, line: 29, type: !26, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!67 = !DILocalVariable(name: "n", arg: 1, scope: !66, file: !25, line: 29, type: !29)
!68 = !DILocation(line: 29, column: 18, scope: !66)
!69 = !DILocation(line: 30, column: 17, scope: !66)
!70 = !DILocation(line: 30, column: 10, scope: !66)
!71 = !DILocation(line: 30, column: 3, scope: !66)
!72 = distinct !DISubprogram(name: "readBuf", scope: !2, file: !2, line: 16, type: !73, scopeLine: 16, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!73 = !DISubroutineType(types: !74)
!74 = !{!75}
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!76 = !DILocalVariable(name: "buf", scope: !72, file: !2, line: 18, type: !75)
!77 = !DILocation(line: 18, column: 14, scope: !72)
!78 = !DILocation(line: 18, column: 20, scope: !72)
!79 = !DILocation(line: 19, column: 14, scope: !72)
!80 = !DILocation(line: 19, column: 2, scope: !72)
!81 = !DILocation(line: 19, column: 7, scope: !72)
!82 = !DILocation(line: 19, column: 12, scope: !72)
!83 = !DILocation(line: 21, column: 9, scope: !72)
!84 = !DILocation(line: 21, column: 2, scope: !72)
!85 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 25, type: !86, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !9, retainedNodes: !30)
!86 = !DISubroutineType(types: !87)
!87 = !{!29}
!88 = !DILocalVariable(name: "buf", scope: !85, file: !2, line: 27, type: !75)
!89 = !DILocation(line: 27, column: 15, scope: !85)
!90 = !DILocation(line: 27, column: 21, scope: !85)
!91 = !DILocation(line: 29, column: 14, scope: !85)
!92 = !DILocation(line: 29, column: 19, scope: !85)
!93 = !DILocation(line: 29, column: 2, scope: !85)
!94 = !DILocalVariable(name: "buf1", scope: !85, file: !2, line: 30, type: !75)
!95 = !DILocation(line: 30, column: 14, scope: !85)
!96 = !DILocation(line: 30, column: 21, scope: !85)
!97 = !DILocation(line: 32, column: 7, scope: !85)
!98 = !DILocation(line: 32, column: 12, scope: !85)
!99 = !DILocation(line: 32, column: 2, scope: !85)
!100 = !DILocation(line: 33, column: 14, scope: !85)
!101 = !DILocation(line: 33, column: 20, scope: !85)
!102 = !DILocation(line: 33, column: 2, scope: !85)
!103 = !DILocation(line: 35, column: 1, scope: !85)
