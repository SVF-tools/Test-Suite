; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_nullptr_deref_tests/array_2d_big.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_nullptr_deref_tests/array_2d_big.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %arr = alloca [100 x [100 x ptr]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, ptr %i, align 4
  %cmp = icmp slt i32 %0, 100
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i32 0, ptr %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, ptr %j, align 4
  %cmp2 = icmp slt i32 %1, 100
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, ptr %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [100 x [100 x ptr]], ptr %arr, i64 0, i64 %idxprom
  %3 = load i32, ptr %j, align 4
  %idxprom4 = sext i32 %3 to i64
  %arrayidx5 = getelementptr inbounds [100 x ptr], ptr %arrayidx, i64 0, i64 %idxprom4
  store ptr null, ptr %arrayidx5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %4 = load i32, ptr %j, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, ptr %j, align 4
  br label %for.cond1, !llvm.loop !6

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %5 = load i32, ptr %i, align 4
  %inc7 = add nsw i32 %5, 1
  store i32 %inc7, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end8:                                         ; preds = %for.cond
  store i32 0, ptr %m, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc22, %for.end8
  %6 = load i32, ptr %m, align 4
  %cmp10 = icmp slt i32 %6, 100
  br i1 %cmp10, label %for.body11, label %for.end24

for.body11:                                       ; preds = %for.cond9
  store i32 0, ptr %n, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc19, %for.body11
  %7 = load i32, ptr %n, align 4
  %cmp13 = icmp slt i32 %7, 100
  br i1 %cmp13, label %for.body14, label %for.end21

for.body14:                                       ; preds = %for.cond12
  %8 = load i32, ptr %m, align 4
  %idxprom15 = sext i32 %8 to i64
  %arrayidx16 = getelementptr inbounds [100 x [100 x ptr]], ptr %arr, i64 0, i64 %idxprom15
  %9 = load i32, ptr %n, align 4
  %idxprom17 = sext i32 %9 to i64
  %arrayidx18 = getelementptr inbounds [100 x ptr], ptr %arrayidx16, i64 0, i64 %idxprom17
  %10 = load ptr, ptr %arrayidx18, align 8
  call void @UNSAFE_LOAD(ptr noundef %10)
  br label %for.inc19

for.inc19:                                        ; preds = %for.body14
  %11 = load i32, ptr %n, align 4
  %inc20 = add nsw i32 %11, 1
  store i32 %inc20, ptr %n, align 4
  br label %for.cond12, !llvm.loop !9

for.end21:                                        ; preds = %for.cond12
  br label %for.inc22

for.inc22:                                        ; preds = %for.end21
  %12 = load i32, ptr %m, align 4
  %inc23 = add nsw i32 %12, 1
  store i32 %inc23, ptr %m, align 4
  br label %for.cond9, !llvm.loop !10

for.end24:                                        ; preds = %for.cond9
  ret i32 0
}

declare void @UNSAFE_LOAD(ptr noundef) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
