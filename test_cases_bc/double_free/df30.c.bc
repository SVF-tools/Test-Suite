; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/double_free/df30.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/double_free/df30.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"%hd\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"%zu\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"%02x\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"%d -- %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [5 x i32] [i32 37, i32 48, i32 50, i32 120, i32 0], align 4
@GLOBAL_CONST_TRUE = dso_local constant i32 1, align 4
@GLOBAL_CONST_FALSE = dso_local constant i32 0, align 4
@GLOBAL_CONST_FIVE = dso_local constant i32 5, align 4
@globalTrue = dso_local global i32 1, align 4
@globalFalse = dso_local global i32 0, align 4
@globalFive = dso_local global i32 5, align 4
@globalArgc = dso_local global i32 0, align 4
@globalArgv = dso_local global ptr null, align 8
@staticFive = internal global i32 5, align 4
@.str.15 = private unnamed_addr constant [21 x i8] c"Benign, fixed string\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOC(i32 noundef %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias ptr @malloc(i64 noundef %conv) #6
  ret ptr %call
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOC(i32 noundef %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias ptr @malloc(i64 noundef %conv) #6
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREEMALLOCFN(i32 noundef %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias ptr @malloc(i64 noundef %conv) #6
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEMALLOCFP(i32 noundef %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  %0 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias ptr @malloc(i64 noundef %conv) #6
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @SAFEFREE(ptr noundef %p) #0 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  call void @free(ptr noundef %0) #7
  %1 = load ptr, ptr %retval, align 8
  ret ptr %1
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @DOUBLEFREE(ptr noundef %p) #0 {
entry:
  %retval = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  call void @free(ptr noundef %0) #7
  %1 = load ptr, ptr %retval, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printLine(ptr noundef %line) #0 {
entry:
  %line.addr = alloca ptr, align 8
  store ptr %line, ptr %line.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %cmp = icmp ne ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %line.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, ptr noundef %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @printf(ptr noundef, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printWLine(ptr noundef %line) #0 {
entry:
  %line.addr = alloca ptr, align 8
  store ptr %line, ptr %line.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %cmp = icmp ne ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %line.addr, align 8
  %call = call i32 (ptr, ...) @wprintf(ptr noundef @.str.1, ptr noundef %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @wprintf(ptr noundef, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printIntLine(i32 noundef %intNumber) #0 {
entry:
  %intNumber.addr = alloca i32, align 4
  store i32 %intNumber, ptr %intNumber.addr, align 4
  %0 = load i32, ptr %intNumber.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printShortLine(i16 noundef signext %shortNumber) #0 {
entry:
  %shortNumber.addr = alloca i16, align 2
  store i16 %shortNumber, ptr %shortNumber.addr, align 2
  %0 = load i16, ptr %shortNumber.addr, align 2
  %conv = sext i16 %0 to i32
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i32 noundef %conv)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printFloatLine(float noundef %floatNumber) #0 {
entry:
  %floatNumber.addr = alloca float, align 4
  store float %floatNumber, ptr %floatNumber.addr, align 4
  %0 = load float, ptr %floatNumber.addr, align 4
  %conv = fpext float %0 to double
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.4, double noundef %conv)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printLongLine(i64 noundef %longNumber) #0 {
entry:
  %longNumber.addr = alloca i64, align 8
  store i64 %longNumber, ptr %longNumber.addr, align 8
  %0 = load i64, ptr %longNumber.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.5, i64 noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printLongLongLine(i64 noundef %longLongIntNumber) #0 {
entry:
  %longLongIntNumber.addr = alloca i64, align 8
  store i64 %longLongIntNumber, ptr %longLongIntNumber.addr, align 8
  %0 = load i64, ptr %longLongIntNumber.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.5, i64 noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printSizeTLine(i64 noundef %sizeTNumber) #0 {
entry:
  %sizeTNumber.addr = alloca i64, align 8
  store i64 %sizeTNumber, ptr %sizeTNumber.addr, align 8
  %0 = load i64, ptr %sizeTNumber.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.6, i64 noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printHexCharLine(i8 noundef signext %charHex) #0 {
entry:
  %charHex.addr = alloca i8, align 1
  store i8 %charHex, ptr %charHex.addr, align 1
  %0 = load i8, ptr %charHex.addr, align 1
  %conv = sext i8 %0 to i32
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.7, i32 noundef %conv)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printWcharLine(i32 noundef %wideChar) #0 {
entry:
  %wideChar.addr = alloca i32, align 4
  %s = alloca [2 x i32], align 4
  store i32 %wideChar, ptr %wideChar.addr, align 4
  %0 = load i32, ptr %wideChar.addr, align 4
  %arrayidx = getelementptr inbounds [2 x i32], ptr %s, i64 0, i64 0
  store i32 %0, ptr %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [2 x i32], ptr %s, i64 0, i64 1
  store i32 0, ptr %arrayidx1, align 4
  %arraydecay = getelementptr inbounds [2 x i32], ptr %s, i64 0, i64 0
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.8, ptr noundef %arraydecay)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printUnsignedLine(i32 noundef %unsignedNumber) #0 {
entry:
  %unsignedNumber.addr = alloca i32, align 4
  store i32 %unsignedNumber, ptr %unsignedNumber.addr, align 4
  %0 = load i32, ptr %unsignedNumber.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.9, i32 noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printHexUnsignedCharLine(i8 noundef zeroext %unsignedCharacter) #0 {
entry:
  %unsignedCharacter.addr = alloca i8, align 1
  store i8 %unsignedCharacter, ptr %unsignedCharacter.addr, align 1
  %0 = load i8, ptr %unsignedCharacter.addr, align 1
  %conv = zext i8 %0 to i32
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.7, i32 noundef %conv)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printDoubleLine(double noundef %doubleNumber) #0 {
entry:
  %doubleNumber.addr = alloca double, align 8
  store double %doubleNumber, ptr %doubleNumber.addr, align 8
  %0 = load double, ptr %doubleNumber.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.10, double noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printStructLine(ptr noundef %structTwoIntsStruct) #0 {
entry:
  %structTwoIntsStruct.addr = alloca ptr, align 8
  store ptr %structTwoIntsStruct, ptr %structTwoIntsStruct.addr, align 8
  %0 = load ptr, ptr %structTwoIntsStruct.addr, align 8
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %intOne, align 4
  %2 = load ptr, ptr %structTwoIntsStruct.addr, align 8
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %2, i32 0, i32 1
  %3 = load i32, ptr %intTwo, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.11, i32 noundef %1, i32 noundef %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @printBytesLine(ptr noundef %bytes, i64 noundef %numBytes) #0 {
entry:
  %bytes.addr = alloca ptr, align 8
  %numBytes.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %bytes, ptr %bytes.addr, align 8
  store i64 %numBytes, ptr %numBytes.addr, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8
  %1 = load i64, ptr %numBytes.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %bytes.addr, align 8
  %3 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 %3
  %4 = load i8, ptr %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.12, i32 noundef %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i64, ptr %i, align 8
  %inc = add i64 %5, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(ptr noundef @.str.13)
  ret void
}

declare i32 @puts(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @decodeHexChars(ptr noundef %bytes, i64 noundef %numBytes, ptr noundef %hex) #0 {
entry:
  %bytes.addr = alloca ptr, align 8
  %numBytes.addr = alloca i64, align 8
  %hex.addr = alloca ptr, align 8
  %numWritten = alloca i64, align 8
  %byte = alloca i32, align 4
  store ptr %bytes, ptr %bytes.addr, align 8
  store i64 %numBytes, ptr %numBytes.addr, align 8
  store ptr %hex, ptr %hex.addr, align 8
  store i64 0, ptr %numWritten, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, ptr %numWritten, align 8
  %1 = load i64, ptr %numBytes.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %call = call ptr @__ctype_b_loc() #8
  %2 = load ptr, ptr %call, align 8
  %3 = load ptr, ptr %hex.addr, align 8
  %4 = load i64, ptr %numWritten, align 8
  %mul = mul i64 2, %4
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 %mul
  %5 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx1 = getelementptr inbounds i16, ptr %2, i64 %idxprom
  %6 = load i16, ptr %arrayidx1, align 2
  %conv2 = zext i16 %6 to i32
  %and = and i32 %conv2, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %call3 = call ptr @__ctype_b_loc() #8
  %7 = load ptr, ptr %call3, align 8
  %8 = load ptr, ptr %hex.addr, align 8
  %9 = load i64, ptr %numWritten, align 8
  %mul4 = mul i64 2, %9
  %add = add i64 %mul4, 1
  %arrayidx5 = getelementptr inbounds i8, ptr %8, i64 %add
  %10 = load i8, ptr %arrayidx5, align 1
  %conv6 = sext i8 %10 to i32
  %idxprom7 = sext i32 %conv6 to i64
  %arrayidx8 = getelementptr inbounds i16, ptr %7, i64 %idxprom7
  %11 = load i16, ptr %arrayidx8, align 2
  %conv9 = zext i16 %11 to i32
  %and10 = and i32 %conv9, 4096
  %tobool11 = icmp ne i32 %and10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %tobool11, %land.rhs ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load ptr, ptr %hex.addr, align 8
  %14 = load i64, ptr %numWritten, align 8
  %mul12 = mul i64 2, %14
  %arrayidx13 = getelementptr inbounds i8, ptr %13, i64 %mul12
  %call14 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %arrayidx13, ptr noundef @.str.12, ptr noundef %byte) #7
  %15 = load i32, ptr %byte, align 4
  %conv15 = trunc i32 %15 to i8
  %16 = load ptr, ptr %bytes.addr, align 8
  %17 = load i64, ptr %numWritten, align 8
  %arrayidx16 = getelementptr inbounds i8, ptr %16, i64 %17
  store i8 %conv15, ptr %arrayidx16, align 1
  %18 = load i64, ptr %numWritten, align 8
  %inc = add i64 %18, 1
  store i64 %inc, ptr %numWritten, align 8
  br label %while.cond, !llvm.loop !8

while.end:                                        ; preds = %land.end
  %19 = load i64, ptr %numWritten, align 8
  ret i64 %19
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() #4

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(ptr noundef, ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @decodeHexWChars(ptr noundef %bytes, i64 noundef %numBytes, ptr noundef %hex) #0 {
entry:
  %bytes.addr = alloca ptr, align 8
  %numBytes.addr = alloca i64, align 8
  %hex.addr = alloca ptr, align 8
  %numWritten = alloca i64, align 8
  %byte = alloca i32, align 4
  store ptr %bytes, ptr %bytes.addr, align 8
  store i64 %numBytes, ptr %numBytes.addr, align 8
  store ptr %hex, ptr %hex.addr, align 8
  store i64 0, ptr %numWritten, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, ptr %numWritten, align 8
  %1 = load i64, ptr %numBytes.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %2 = load ptr, ptr %hex.addr, align 8
  %3 = load i64, ptr %numWritten, align 8
  %mul = mul i64 2, %3
  %arrayidx = getelementptr inbounds i32, ptr %2, i64 %mul
  %4 = load i32, ptr %arrayidx, align 4
  %call = call i32 @iswxdigit(i32 noundef %4) #7
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %5 = load ptr, ptr %hex.addr, align 8
  %6 = load i64, ptr %numWritten, align 8
  %mul1 = mul i64 2, %6
  %add = add i64 %mul1, 1
  %arrayidx2 = getelementptr inbounds i32, ptr %5, i64 %add
  %7 = load i32, ptr %arrayidx2, align 4
  %call3 = call i32 @iswxdigit(i32 noundef %7) #7
  %tobool4 = icmp ne i32 %call3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %tobool4, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load ptr, ptr %hex.addr, align 8
  %10 = load i64, ptr %numWritten, align 8
  %mul5 = mul i64 2, %10
  %arrayidx6 = getelementptr inbounds i32, ptr %9, i64 %mul5
  %call7 = call i32 (ptr, ptr, ...) @__isoc99_swscanf(ptr noundef %arrayidx6, ptr noundef @.str.14, ptr noundef %byte) #7
  %11 = load i32, ptr %byte, align 4
  %conv = trunc i32 %11 to i8
  %12 = load ptr, ptr %bytes.addr, align 8
  %13 = load i64, ptr %numWritten, align 8
  %arrayidx8 = getelementptr inbounds i8, ptr %12, i64 %13
  store i8 %conv, ptr %arrayidx8, align 1
  %14 = load i64, ptr %numWritten, align 8
  %inc = add i64 %14, 1
  store i64 %inc, ptr %numWritten, align 8
  br label %while.cond, !llvm.loop !9

while.end:                                        ; preds = %land.end
  %15 = load i64, ptr %numWritten, align 8
  ret i64 %15
}

; Function Attrs: nounwind
declare i32 @iswxdigit(i32 noundef) #2

; Function Attrs: nounwind
declare i32 @__isoc99_swscanf(ptr noundef, ptr noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @globalReturnsTrue() #0 {
entry:
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @globalReturnsFalse() #0 {
entry:
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @globalReturnsTrueOrFalse() #0 {
entry:
  %call = call i32 @rand() #7
  %rem = srem i32 %call, 2
  ret i32 %rem
}

; Function Attrs: nounwind
declare i32 @rand() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good1() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good2() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good3() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good4() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good5() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good6() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good7() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good8() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @good9() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad1() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad2() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad3() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad4() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad5() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad6() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad7() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad8() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bad9() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_07_bad() #0 {
entry:
  %data = alloca ptr, align 8
  store ptr null, ptr %data, align 8
  %0 = load i32, ptr @staticFive, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %call = call ptr @DOUBLEFREEMALLOC(i32 noundef 800)
  store ptr %call, ptr %data, align 8
  %1 = load ptr, ptr %data, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8
  %call3 = call ptr @SAFEFREE(ptr noundef %2)
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4
  %cmp5 = icmp eq i32 %3, 5
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end4
  %4 = load ptr, ptr %data, align 8
  %call7 = call ptr @DOUBLEFREE(ptr noundef %4)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end4
  ret void
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE415_Double_Free__malloc_free_long_07_good() #0 {
entry:
  call void @goodB2G1()
  call void @goodB2G2()
  call void @goodG2B1()
  call void @goodG2B2()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  %call = call i64 @time(ptr noundef null) #7
  %conv = trunc i64 %call to i32
  call void @srand(i32 noundef %conv) #7
  call void @CWE415_Double_Free__malloc_free_long_07_good()
  call void @CWE415_Double_Free__malloc_free_long_07_bad()
  ret i32 0
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #2

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G1() #0 {
entry:
  %data = alloca ptr, align 8
  store ptr null, ptr %data, align 8
  %0 = load i32, ptr @staticFive, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800)
  store ptr %call, ptr %data, align 8
  %1 = load ptr, ptr %data, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8
  %call3 = call ptr @SAFEFREE(ptr noundef %2)
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4
  %cmp5 = icmp ne i32 %3, 5
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end4
  call void @printLine(ptr noundef @.str.15)
  br label %if.end7

if.else:                                          ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G2() #0 {
entry:
  %data = alloca ptr, align 8
  store ptr null, ptr %data, align 8
  %0 = load i32, ptr @staticFive, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800)
  store ptr %call, ptr %data, align 8
  %1 = load ptr, ptr %data, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load ptr, ptr %data, align 8
  %call3 = call ptr @SAFEFREE(ptr noundef %2)
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr @staticFive, align 4
  %cmp5 = icmp eq i32 %3, 5
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B1() #0 {
entry:
  %data = alloca ptr, align 8
  store ptr null, ptr %data, align 8
  %0 = load i32, ptr @staticFive, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.15)
  br label %if.end3

if.else:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800)
  store ptr %call, ptr %data, align 8
  %1 = load ptr, ptr %data, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  call void @exit(i32 noundef -1) #9
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  %2 = load i32, ptr @staticFive, align 4
  %cmp4 = icmp eq i32 %2, 5
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8
  %call6 = call ptr @SAFEFREE(ptr noundef %3)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B2() #0 {
entry:
  %data = alloca ptr, align 8
  store ptr null, ptr %data, align 8
  %0 = load i32, ptr @staticFive, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  %call = call ptr @SAFEMALLOC(i32 noundef 800)
  store ptr %call, ptr %data, align 8
  %1 = load ptr, ptr %data, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  call void @exit(i32 noundef -1) #9
  unreachable

if.end:                                           ; preds = %if.then
  br label %if.end3

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, ptr @staticFive, align 4
  %cmp4 = icmp eq i32 %2, 5
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %3 = load ptr, ptr %data, align 8
  %call6 = call ptr @SAFEFREE(ptr noundef %3)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end3
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { nounwind willreturn memory(none) }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
