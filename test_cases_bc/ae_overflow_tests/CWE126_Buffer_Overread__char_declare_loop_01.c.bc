; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__char_declare_loop_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__char_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__char_declare_loop_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i8], align 16
  %dataGoodBuffer = alloca [100 x i8], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i8], align 16
    #dbg_declare(ptr %data, !39, !DIExpression(), !41)
    #dbg_declare(ptr %dataBadBuffer, !42, !DIExpression(), !46)
    #dbg_declare(ptr %dataGoodBuffer, !47, !DIExpression(), !51)
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dataBadBuffer, i64 0, i64 0, !dbg !52
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 65, i64 49, i1 false), !dbg !52
  %arrayidx = getelementptr inbounds [50 x i8], ptr %dataBadBuffer, i64 0, i64 49, !dbg !53
  store i8 0, ptr %arrayidx, align 1, !dbg !54
  %arraydecay1 = getelementptr inbounds [100 x i8], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !55
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay1, i8 65, i64 99, i1 false), !dbg !55
  %arrayidx2 = getelementptr inbounds [100 x i8], ptr %dataGoodBuffer, i64 0, i64 99, !dbg !56
  store i8 0, ptr %arrayidx2, align 1, !dbg !57
  %arraydecay3 = getelementptr inbounds [50 x i8], ptr %dataBadBuffer, i64 0, i64 0, !dbg !58
  store ptr %arraydecay3, ptr %data, align 8, !dbg !59
    #dbg_declare(ptr %i, !60, !DIExpression(), !65)
    #dbg_declare(ptr %destLen, !66, !DIExpression(), !67)
    #dbg_declare(ptr %dest, !68, !DIExpression(), !69)
  %arraydecay4 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !70
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay4, i8 67, i64 99, i1 false), !dbg !70
  %arrayidx5 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99, !dbg !71
  store i8 0, ptr %arrayidx5, align 1, !dbg !72
  %arraydecay6 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !73
  %call = call i64 @strlen(ptr noundef %arraydecay6) #5, !dbg !74
  store i64 %call, ptr %destLen, align 8, !dbg !75
  store i64 0, ptr %i, align 8, !dbg !76
  br label %for.cond, !dbg !78

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8, !dbg !79
  %1 = load i64, ptr %destLen, align 8, !dbg !81
  %cmp = icmp ult i64 %0, %1, !dbg !82
  br i1 %cmp, label %for.body, label %for.end, !dbg !83

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !84
  %3 = load i64, ptr %i, align 8, !dbg !86
  %arrayidx7 = getelementptr inbounds nuw i8, ptr %2, i64 %3, !dbg !84
  %4 = load i8, ptr %arrayidx7, align 1, !dbg !84
  %5 = load i64, ptr %i, align 8, !dbg !87
  %arrayidx8 = getelementptr inbounds nuw [100 x i8], ptr %dest, i64 0, i64 %5, !dbg !88
  store i8 %4, ptr %arrayidx8, align 1, !dbg !89
  br label %for.inc, !dbg !90

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !91
  %inc = add i64 %6, 1, !dbg !91
  store i64 %inc, ptr %i, align 8, !dbg !91
  br label %for.cond, !dbg !92, !llvm.loop !93

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !96
  %8 = load i64, ptr %destLen, align 8, !dbg !97
  %mul = mul i64 %8, 1, !dbg !98
  %sub = sub i64 %mul, 1, !dbg !99
  %call9 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %7, i64 noundef %sub), !dbg !100
  %arrayidx10 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99, !dbg !101
  store i8 0, ptr %arrayidx10, align 1, !dbg !102
  %arraydecay11 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !103
  call void @printLine(ptr noundef %arraydecay11), !dbg !104
  ret void, !dbg !105
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__char_declare_loop_01_good() #0 !dbg !106 {
entry:
  call void @goodG2B(), !dbg !107
  ret void, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !109 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !114, !DIExpression(), !115)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !116, !DIExpression(), !117)
  %call = call i64 @time(ptr noundef null) #6, !dbg !118
  %conv = trunc i64 %call to i32, !dbg !119
  call void @srand(i32 noundef %conv) #6, !dbg !120
  call void @printLine(ptr noundef @.str), !dbg !121
  call void @CWE126_Buffer_Overread__char_declare_loop_01_good(), !dbg !122
  call void @printLine(ptr noundef @.str.1), !dbg !123
  call void @printLine(ptr noundef @.str.2), !dbg !124
  call void @CWE126_Buffer_Overread__char_declare_loop_01_bad(), !dbg !125
  call void @printLine(ptr noundef @.str.3), !dbg !126
  ret i32 0, !dbg !127
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !128 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i8], align 16
  %dataGoodBuffer = alloca [100 x i8], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i8], align 16
    #dbg_declare(ptr %data, !129, !DIExpression(), !130)
    #dbg_declare(ptr %dataBadBuffer, !131, !DIExpression(), !132)
    #dbg_declare(ptr %dataGoodBuffer, !133, !DIExpression(), !134)
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dataBadBuffer, i64 0, i64 0, !dbg !135
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 65, i64 49, i1 false), !dbg !135
  %arrayidx = getelementptr inbounds [50 x i8], ptr %dataBadBuffer, i64 0, i64 49, !dbg !136
  store i8 0, ptr %arrayidx, align 1, !dbg !137
  %arraydecay1 = getelementptr inbounds [100 x i8], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !138
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay1, i8 65, i64 99, i1 false), !dbg !138
  %arrayidx2 = getelementptr inbounds [100 x i8], ptr %dataGoodBuffer, i64 0, i64 99, !dbg !139
  store i8 0, ptr %arrayidx2, align 1, !dbg !140
  %arraydecay3 = getelementptr inbounds [100 x i8], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !141
  store ptr %arraydecay3, ptr %data, align 8, !dbg !142
    #dbg_declare(ptr %i, !143, !DIExpression(), !145)
    #dbg_declare(ptr %destLen, !146, !DIExpression(), !147)
    #dbg_declare(ptr %dest, !148, !DIExpression(), !149)
  %arraydecay4 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !150
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay4, i8 67, i64 99, i1 false), !dbg !150
  %arrayidx5 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99, !dbg !151
  store i8 0, ptr %arrayidx5, align 1, !dbg !152
  %arraydecay6 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !153
  %call = call i64 @strlen(ptr noundef %arraydecay6) #5, !dbg !154
  store i64 %call, ptr %destLen, align 8, !dbg !155
  %0 = load ptr, ptr %data, align 8, !dbg !156
  %1 = load i64, ptr %destLen, align 8, !dbg !157
  %sub = sub i64 %1, 1, !dbg !158
  %call7 = call i32 (ptr, i64, i32, ...) @BOF_CHECK_GEP(ptr noundef %0, i64 noundef %sub, i32 noundef 0), !dbg !159
  store i64 0, ptr %i, align 8, !dbg !160
  br label %for.cond, !dbg !162

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8, !dbg !163
  %3 = load i64, ptr %destLen, align 8, !dbg !165
  %cmp = icmp ult i64 %2, %3, !dbg !166
  br i1 %cmp, label %for.body, label %for.end, !dbg !167

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %data, align 8, !dbg !168
  %5 = load i64, ptr %i, align 8, !dbg !170
  %arrayidx8 = getelementptr inbounds nuw i8, ptr %4, i64 %5, !dbg !168
  %6 = load i8, ptr %arrayidx8, align 1, !dbg !168
  %7 = load i64, ptr %i, align 8, !dbg !171
  %arrayidx9 = getelementptr inbounds nuw [100 x i8], ptr %dest, i64 0, i64 %7, !dbg !172
  store i8 %6, ptr %arrayidx9, align 1, !dbg !173
  %8 = load ptr, ptr %data, align 8, !dbg !174
  %9 = load i64, ptr %i, align 8, !dbg !175
  %add = add i64 %9, 1, !dbg !176
  %mul = mul i64 %add, 1, !dbg !177
  %sub10 = sub i64 %mul, 1, !dbg !178
  %call11 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef %sub10), !dbg !179
  br label %for.inc, !dbg !180

for.inc:                                          ; preds = %for.body
  %10 = load i64, ptr %i, align 8, !dbg !181
  %inc = add i64 %10, 1, !dbg !181
  store i64 %inc, ptr %i, align 8, !dbg !181
  br label %for.cond, !dbg !182, !llvm.loop !183

for.end:                                          ; preds = %for.cond
  %11 = load ptr, ptr %data, align 8, !dbg !185
  %12 = load i64, ptr %destLen, align 8, !dbg !186
  %mul12 = mul i64 %12, 1, !dbg !187
  %sub13 = sub i64 %mul12, 1, !dbg !188
  %call14 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %11, i64 noundef %sub13), !dbg !189
  %arrayidx15 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99, !dbg !190
  store i8 0, ptr %arrayidx15, align 1, !dbg !191
  %arraydecay16 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0, !dbg !192
  call void @printLine(ptr noundef %arraydecay16), !dbg !193
  ret void, !dbg !194
}

declare i32 @BOF_CHECK_GEP(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 108, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE126_Buffer_Overread__char_declare_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "fcac898ff0cc0ffe7a7d669ada9db145")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 110, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 113, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 115, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__char_declare_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "fcac898ff0cc0ffe7a7d669ada9db145")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!35 = distinct !DISubprogram(name: "CWE126_Buffer_Overread__char_declare_loop_01_bad", scope: !2, file: !2, line: 23, type: !36, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 25, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!41 = !DILocation(line: 25, column: 12, scope: !35)
!42 = !DILocalVariable(name: "dataBadBuffer", scope: !35, file: !2, line: 26, type: !43)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 400, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 50)
!46 = !DILocation(line: 26, column: 10, scope: !35)
!47 = !DILocalVariable(name: "dataGoodBuffer", scope: !35, file: !2, line: 27, type: !48)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 800, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 100)
!51 = !DILocation(line: 27, column: 10, scope: !35)
!52 = !DILocation(line: 28, column: 5, scope: !35)
!53 = !DILocation(line: 29, column: 5, scope: !35)
!54 = !DILocation(line: 29, column: 25, scope: !35)
!55 = !DILocation(line: 30, column: 5, scope: !35)
!56 = !DILocation(line: 31, column: 5, scope: !35)
!57 = !DILocation(line: 31, column: 27, scope: !35)
!58 = !DILocation(line: 33, column: 12, scope: !35)
!59 = !DILocation(line: 33, column: 10, scope: !35)
!60 = !DILocalVariable(name: "i", scope: !61, file: !2, line: 35, type: !62)
!61 = distinct !DILexicalBlock(scope: !35, file: !2, line: 34, column: 5)
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !63, line: 18, baseType: !64)
!63 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!64 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!65 = !DILocation(line: 35, column: 16, scope: !61)
!66 = !DILocalVariable(name: "destLen", scope: !61, file: !2, line: 35, type: !62)
!67 = !DILocation(line: 35, column: 19, scope: !61)
!68 = !DILocalVariable(name: "dest", scope: !61, file: !2, line: 36, type: !48)
!69 = !DILocation(line: 36, column: 14, scope: !61)
!70 = !DILocation(line: 37, column: 9, scope: !61)
!71 = !DILocation(line: 38, column: 9, scope: !61)
!72 = !DILocation(line: 38, column: 21, scope: !61)
!73 = !DILocation(line: 39, column: 26, scope: !61)
!74 = !DILocation(line: 39, column: 19, scope: !61)
!75 = !DILocation(line: 39, column: 17, scope: !61)
!76 = !DILocation(line: 42, column: 16, scope: !77)
!77 = distinct !DILexicalBlock(scope: !61, file: !2, line: 42, column: 9)
!78 = !DILocation(line: 42, column: 14, scope: !77)
!79 = !DILocation(line: 42, column: 21, scope: !80)
!80 = distinct !DILexicalBlock(scope: !77, file: !2, line: 42, column: 9)
!81 = !DILocation(line: 42, column: 25, scope: !80)
!82 = !DILocation(line: 42, column: 23, scope: !80)
!83 = !DILocation(line: 42, column: 9, scope: !77)
!84 = !DILocation(line: 44, column: 23, scope: !85)
!85 = distinct !DILexicalBlock(scope: !80, file: !2, line: 43, column: 9)
!86 = !DILocation(line: 44, column: 28, scope: !85)
!87 = !DILocation(line: 44, column: 18, scope: !85)
!88 = !DILocation(line: 44, column: 13, scope: !85)
!89 = !DILocation(line: 44, column: 21, scope: !85)
!90 = !DILocation(line: 45, column: 9, scope: !85)
!91 = !DILocation(line: 42, column: 35, scope: !80)
!92 = !DILocation(line: 42, column: 9, scope: !80)
!93 = distinct !{!93, !83, !94, !95}
!94 = !DILocation(line: 45, column: 9, scope: !77)
!95 = !{!"llvm.loop.mustprogress"}
!96 = !DILocation(line: 46, column: 26, scope: !61)
!97 = !DILocation(line: 46, column: 32, scope: !61)
!98 = !DILocation(line: 46, column: 39, scope: !61)
!99 = !DILocation(line: 46, column: 53, scope: !61)
!100 = !DILocation(line: 46, column: 9, scope: !61)
!101 = !DILocation(line: 47, column: 9, scope: !61)
!102 = !DILocation(line: 47, column: 21, scope: !61)
!103 = !DILocation(line: 48, column: 19, scope: !61)
!104 = !DILocation(line: 48, column: 9, scope: !61)
!105 = !DILocation(line: 50, column: 1, scope: !35)
!106 = distinct !DISubprogram(name: "CWE126_Buffer_Overread__char_declare_loop_01_good", scope: !2, file: !2, line: 88, type: !36, scopeLine: 89, spFlags: DISPFlagDefinition, unit: !22)
!107 = !DILocation(line: 90, column: 5, scope: !106)
!108 = !DILocation(line: 91, column: 1, scope: !106)
!109 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 103, type: !110, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!110 = !DISubroutineType(types: !111)
!111 = !{!112, !112, !113}
!112 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!114 = !DILocalVariable(name: "argc", arg: 1, scope: !109, file: !2, line: 103, type: !112)
!115 = !DILocation(line: 103, column: 14, scope: !109)
!116 = !DILocalVariable(name: "argv", arg: 2, scope: !109, file: !2, line: 103, type: !113)
!117 = !DILocation(line: 103, column: 27, scope: !109)
!118 = !DILocation(line: 106, column: 22, scope: !109)
!119 = !DILocation(line: 106, column: 12, scope: !109)
!120 = !DILocation(line: 106, column: 5, scope: !109)
!121 = !DILocation(line: 108, column: 5, scope: !109)
!122 = !DILocation(line: 109, column: 5, scope: !109)
!123 = !DILocation(line: 110, column: 5, scope: !109)
!124 = !DILocation(line: 113, column: 5, scope: !109)
!125 = !DILocation(line: 114, column: 5, scope: !109)
!126 = !DILocation(line: 115, column: 5, scope: !109)
!127 = !DILocation(line: 117, column: 5, scope: !109)
!128 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 57, type: !36, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!129 = !DILocalVariable(name: "data", scope: !128, file: !2, line: 59, type: !40)
!130 = !DILocation(line: 59, column: 12, scope: !128)
!131 = !DILocalVariable(name: "dataBadBuffer", scope: !128, file: !2, line: 60, type: !43)
!132 = !DILocation(line: 60, column: 10, scope: !128)
!133 = !DILocalVariable(name: "dataGoodBuffer", scope: !128, file: !2, line: 61, type: !48)
!134 = !DILocation(line: 61, column: 10, scope: !128)
!135 = !DILocation(line: 62, column: 5, scope: !128)
!136 = !DILocation(line: 63, column: 5, scope: !128)
!137 = !DILocation(line: 63, column: 25, scope: !128)
!138 = !DILocation(line: 64, column: 5, scope: !128)
!139 = !DILocation(line: 65, column: 5, scope: !128)
!140 = !DILocation(line: 65, column: 27, scope: !128)
!141 = !DILocation(line: 67, column: 12, scope: !128)
!142 = !DILocation(line: 67, column: 10, scope: !128)
!143 = !DILocalVariable(name: "i", scope: !144, file: !2, line: 69, type: !62)
!144 = distinct !DILexicalBlock(scope: !128, file: !2, line: 68, column: 5)
!145 = !DILocation(line: 69, column: 16, scope: !144)
!146 = !DILocalVariable(name: "destLen", scope: !144, file: !2, line: 69, type: !62)
!147 = !DILocation(line: 69, column: 19, scope: !144)
!148 = !DILocalVariable(name: "dest", scope: !144, file: !2, line: 70, type: !48)
!149 = !DILocation(line: 70, column: 14, scope: !144)
!150 = !DILocation(line: 71, column: 9, scope: !144)
!151 = !DILocation(line: 72, column: 9, scope: !144)
!152 = !DILocation(line: 72, column: 21, scope: !144)
!153 = !DILocation(line: 73, column: 26, scope: !144)
!154 = !DILocation(line: 73, column: 19, scope: !144)
!155 = !DILocation(line: 73, column: 17, scope: !144)
!156 = !DILocation(line: 76, column: 23, scope: !144)
!157 = !DILocation(line: 76, column: 29, scope: !144)
!158 = !DILocation(line: 76, column: 37, scope: !144)
!159 = !DILocation(line: 76, column: 9, scope: !144)
!160 = !DILocation(line: 77, column: 16, scope: !161)
!161 = distinct !DILexicalBlock(scope: !144, file: !2, line: 77, column: 9)
!162 = !DILocation(line: 77, column: 14, scope: !161)
!163 = !DILocation(line: 77, column: 21, scope: !164)
!164 = distinct !DILexicalBlock(scope: !161, file: !2, line: 77, column: 9)
!165 = !DILocation(line: 77, column: 25, scope: !164)
!166 = !DILocation(line: 77, column: 23, scope: !164)
!167 = !DILocation(line: 77, column: 9, scope: !161)
!168 = !DILocation(line: 79, column: 23, scope: !169)
!169 = distinct !DILexicalBlock(scope: !164, file: !2, line: 78, column: 9)
!170 = !DILocation(line: 79, column: 28, scope: !169)
!171 = !DILocation(line: 79, column: 18, scope: !169)
!172 = !DILocation(line: 79, column: 13, scope: !169)
!173 = !DILocation(line: 79, column: 21, scope: !169)
!174 = !DILocation(line: 80, column: 28, scope: !169)
!175 = !DILocation(line: 80, column: 35, scope: !169)
!176 = !DILocation(line: 80, column: 36, scope: !169)
!177 = !DILocation(line: 80, column: 39, scope: !169)
!178 = !DILocation(line: 80, column: 53, scope: !169)
!179 = !DILocation(line: 80, column: 13, scope: !169)
!180 = !DILocation(line: 81, column: 9, scope: !169)
!181 = !DILocation(line: 77, column: 35, scope: !164)
!182 = !DILocation(line: 77, column: 9, scope: !164)
!183 = distinct !{!183, !167, !184, !95}
!184 = !DILocation(line: 81, column: 9, scope: !161)
!185 = !DILocation(line: 82, column: 24, scope: !144)
!186 = !DILocation(line: 82, column: 30, scope: !144)
!187 = !DILocation(line: 82, column: 37, scope: !144)
!188 = !DILocation(line: 82, column: 51, scope: !144)
!189 = !DILocation(line: 82, column: 9, scope: !144)
!190 = !DILocation(line: 83, column: 9, scope: !144)
!191 = !DILocation(line: 83, column: 21, scope: !144)
!192 = !DILocation(line: 84, column: 19, scope: !144)
!193 = !DILocation(line: 84, column: 9, scope: !144)
!194 = !DILocation(line: 86, column: 1, scope: !128)
