; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca [100 x i8], align 16
  %dest = alloca [50 x i8], align 16
  %i = alloca i64, align 8
  %dataLen = alloca i64, align 8
    #dbg_declare(ptr %data, !39, !DIExpression(), !41)
    #dbg_declare(ptr %dataBuffer, !42, !DIExpression(), !46)
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dataBuffer, i64 0, i64 0, !dbg !47
  store ptr %arraydecay, ptr %data, align 8, !dbg !48
  %0 = load ptr, ptr %data, align 8, !dbg !49
  call void @llvm.memset.p0.i64(ptr align 1 %0, i8 65, i64 99, i1 false), !dbg !50
  %1 = load ptr, ptr %data, align 8, !dbg !51
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 99, !dbg !51
  store i8 0, ptr %arrayidx, align 1, !dbg !52
    #dbg_declare(ptr %dest, !53, !DIExpression(), !58)
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !58
    #dbg_declare(ptr %i, !59, !DIExpression(), !63)
    #dbg_declare(ptr %dataLen, !64, !DIExpression(), !65)
  %2 = load ptr, ptr %data, align 8, !dbg !66
  %call = call i64 @strlen(ptr noundef %2) #5, !dbg !67
  store i64 %call, ptr %dataLen, align 8, !dbg !68
  store i64 0, ptr %i, align 8, !dbg !69
  br label %for.cond, !dbg !71

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, ptr %i, align 8, !dbg !72
  %4 = load i64, ptr %dataLen, align 8, !dbg !74
  %cmp = icmp ult i64 %3, %4, !dbg !75
  br i1 %cmp, label %for.body, label %for.end, !dbg !76

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !77
  %6 = load i64, ptr %i, align 8, !dbg !79
  %arrayidx1 = getelementptr inbounds nuw i8, ptr %5, i64 %6, !dbg !77
  %7 = load i8, ptr %arrayidx1, align 1, !dbg !77
  %8 = load i64, ptr %i, align 8, !dbg !80
  %arrayidx2 = getelementptr inbounds nuw [50 x i8], ptr %dest, i64 0, i64 %8, !dbg !81
  store i8 %7, ptr %arrayidx2, align 1, !dbg !82
  br label %for.inc, !dbg !83

for.inc:                                          ; preds = %for.body
  %9 = load i64, ptr %i, align 8, !dbg !84
  %inc = add i64 %9, 1, !dbg !84
  store i64 %inc, ptr %i, align 8, !dbg !84
  br label %for.cond, !dbg !85, !llvm.loop !86

for.end:                                          ; preds = %for.cond
  %arrayidx3 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 49, !dbg !89
  store i8 0, ptr %arrayidx3, align 1, !dbg !90
  %arraydecay4 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !91
  %10 = load i64, ptr %dataLen, align 8, !dbg !92
  %sub = sub i64 %10, 1, !dbg !93
  %call5 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay4, i64 noundef %sub), !dbg !94
  %11 = load ptr, ptr %data, align 8, !dbg !95
  %12 = load i64, ptr %dataLen, align 8, !dbg !96
  %sub6 = sub i64 %12, 1, !dbg !97
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %11, i64 noundef %sub6), !dbg !98
  %13 = load ptr, ptr %data, align 8, !dbg !99
  call void @printLine(ptr noundef %13), !dbg !100
  ret void, !dbg !101
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_good() #0 !dbg !102 {
entry:
  call void @goodG2B(), !dbg !103
  ret void, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !105 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !110, !DIExpression(), !111)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !112, !DIExpression(), !113)
  %call = call i64 @time(ptr noundef null) #6, !dbg !114
  %conv = trunc i64 %call to i32, !dbg !115
  call void @srand(i32 noundef %conv) #6, !dbg !116
  call void @printLine(ptr noundef @.str), !dbg !117
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_good(), !dbg !118
  call void @printLine(ptr noundef @.str.1), !dbg !119
  call void @printLine(ptr noundef @.str.2), !dbg !120
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_bad(), !dbg !121
  call void @printLine(ptr noundef @.str.3), !dbg !122
  ret i32 0, !dbg !123
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !124 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca [100 x i8], align 16
  %dest = alloca [50 x i8], align 16
  %i = alloca i64, align 8
  %dataLen = alloca i64, align 8
    #dbg_declare(ptr %data, !125, !DIExpression(), !126)
    #dbg_declare(ptr %dataBuffer, !127, !DIExpression(), !128)
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dataBuffer, i64 0, i64 0, !dbg !129
  store ptr %arraydecay, ptr %data, align 8, !dbg !130
  %0 = load ptr, ptr %data, align 8, !dbg !131
  call void @llvm.memset.p0.i64(ptr align 1 %0, i8 65, i64 49, i1 false), !dbg !132
  %1 = load ptr, ptr %data, align 8, !dbg !133
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 49, !dbg !133
  store i8 0, ptr %arrayidx, align 1, !dbg !134
    #dbg_declare(ptr %dest, !135, !DIExpression(), !137)
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !137
    #dbg_declare(ptr %i, !138, !DIExpression(), !139)
    #dbg_declare(ptr %dataLen, !140, !DIExpression(), !141)
  %2 = load ptr, ptr %data, align 8, !dbg !142
  %call = call i64 @strlen(ptr noundef %2) #5, !dbg !143
  store i64 %call, ptr %dataLen, align 8, !dbg !144
  store i64 0, ptr %i, align 8, !dbg !145
  br label %for.cond, !dbg !147

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, ptr %i, align 8, !dbg !148
  %4 = load i64, ptr %dataLen, align 8, !dbg !150
  %cmp = icmp ult i64 %3, %4, !dbg !151
  br i1 %cmp, label %for.body, label %for.end, !dbg !152

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !153
  %6 = load i64, ptr %i, align 8, !dbg !155
  %arrayidx1 = getelementptr inbounds nuw i8, ptr %5, i64 %6, !dbg !153
  %7 = load i8, ptr %arrayidx1, align 1, !dbg !153
  %8 = load i64, ptr %i, align 8, !dbg !156
  %arrayidx2 = getelementptr inbounds nuw [50 x i8], ptr %dest, i64 0, i64 %8, !dbg !157
  store i8 %7, ptr %arrayidx2, align 1, !dbg !158
  %arraydecay3 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !159
  %9 = load i64, ptr %i, align 8, !dbg !160
  %call4 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay3, i64 noundef %9), !dbg !161
  %10 = load ptr, ptr %data, align 8, !dbg !162
  %11 = load i64, ptr %i, align 8, !dbg !163
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %10, i64 noundef %11), !dbg !164
  br label %for.inc, !dbg !165

for.inc:                                          ; preds = %for.body
  %12 = load i64, ptr %i, align 8, !dbg !166
  %inc = add i64 %12, 1, !dbg !166
  store i64 %inc, ptr %i, align 8, !dbg !166
  br label %for.cond, !dbg !167, !llvm.loop !168

for.end:                                          ; preds = %for.cond
  %arraydecay6 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !170
  %13 = load i64, ptr %dataLen, align 8, !dbg !171
  %sub = sub i64 %13, 1, !dbg !172
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay6, i64 noundef %sub), !dbg !173
  %14 = load ptr, ptr %data, align 8, !dbg !174
  %15 = load i64, ptr %dataLen, align 8, !dbg !175
  %sub8 = sub i64 %15, 1, !dbg !176
  %call9 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %14, i64 noundef %sub8), !dbg !177
  %arrayidx10 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 49, !dbg !178
  store i8 0, ptr %arrayidx10, align 1, !dbg !179
  %16 = load ptr, ptr %data, align 8, !dbg !180
  call void @printLine(ptr noundef %16), !dbg !181
  ret void, !dbg !182
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 98, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "9d701b805c41687811bbe6830fa17d01")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 100, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 103, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 105, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "9d701b805c41687811bbe6830fa17d01")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!35 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_bad", scope: !2, file: !2, line: 23, type: !36, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 25, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!41 = !DILocation(line: 25, column: 12, scope: !35)
!42 = !DILocalVariable(name: "dataBuffer", scope: !35, file: !2, line: 26, type: !43)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 800, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 100)
!46 = !DILocation(line: 26, column: 10, scope: !35)
!47 = !DILocation(line: 27, column: 12, scope: !35)
!48 = !DILocation(line: 27, column: 10, scope: !35)
!49 = !DILocation(line: 29, column: 12, scope: !35)
!50 = !DILocation(line: 29, column: 5, scope: !35)
!51 = !DILocation(line: 30, column: 5, scope: !35)
!52 = !DILocation(line: 30, column: 17, scope: !35)
!53 = !DILocalVariable(name: "dest", scope: !54, file: !2, line: 32, type: !55)
!54 = distinct !DILexicalBlock(scope: !35, file: !2, line: 31, column: 5)
!55 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 400, elements: !56)
!56 = !{!57}
!57 = !DISubrange(count: 50)
!58 = !DILocation(line: 32, column: 14, scope: !54)
!59 = !DILocalVariable(name: "i", scope: !54, file: !2, line: 33, type: !60)
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !61, line: 18, baseType: !62)
!61 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!62 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!63 = !DILocation(line: 33, column: 16, scope: !54)
!64 = !DILocalVariable(name: "dataLen", scope: !54, file: !2, line: 33, type: !60)
!65 = !DILocation(line: 33, column: 19, scope: !54)
!66 = !DILocation(line: 34, column: 26, scope: !54)
!67 = !DILocation(line: 34, column: 19, scope: !54)
!68 = !DILocation(line: 34, column: 17, scope: !54)
!69 = !DILocation(line: 36, column: 16, scope: !70)
!70 = distinct !DILexicalBlock(scope: !54, file: !2, line: 36, column: 9)
!71 = !DILocation(line: 36, column: 14, scope: !70)
!72 = !DILocation(line: 36, column: 21, scope: !73)
!73 = distinct !DILexicalBlock(scope: !70, file: !2, line: 36, column: 9)
!74 = !DILocation(line: 36, column: 25, scope: !73)
!75 = !DILocation(line: 36, column: 23, scope: !73)
!76 = !DILocation(line: 36, column: 9, scope: !70)
!77 = !DILocation(line: 38, column: 23, scope: !78)
!78 = distinct !DILexicalBlock(scope: !73, file: !2, line: 37, column: 9)
!79 = !DILocation(line: 38, column: 28, scope: !78)
!80 = !DILocation(line: 38, column: 18, scope: !78)
!81 = !DILocation(line: 38, column: 13, scope: !78)
!82 = !DILocation(line: 38, column: 21, scope: !78)
!83 = !DILocation(line: 39, column: 9, scope: !78)
!84 = !DILocation(line: 36, column: 35, scope: !73)
!85 = !DILocation(line: 36, column: 9, scope: !73)
!86 = distinct !{!86, !76, !87, !88}
!87 = !DILocation(line: 39, column: 9, scope: !70)
!88 = !{!"llvm.loop.mustprogress"}
!89 = !DILocation(line: 40, column: 9, scope: !54)
!90 = !DILocation(line: 40, column: 20, scope: !54)
!91 = !DILocation(line: 41, column: 26, scope: !54)
!92 = !DILocation(line: 41, column: 32, scope: !54)
!93 = !DILocation(line: 41, column: 40, scope: !54)
!94 = !DILocation(line: 41, column: 9, scope: !54)
!95 = !DILocation(line: 42, column: 24, scope: !54)
!96 = !DILocation(line: 42, column: 30, scope: !54)
!97 = !DILocation(line: 42, column: 38, scope: !54)
!98 = !DILocation(line: 42, column: 9, scope: !54)
!99 = !DILocation(line: 43, column: 19, scope: !54)
!100 = !DILocation(line: 43, column: 9, scope: !54)
!101 = !DILocation(line: 45, column: 1, scope: !35)
!102 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01_good", scope: !2, file: !2, line: 78, type: !36, scopeLine: 79, spFlags: DISPFlagDefinition, unit: !22)
!103 = !DILocation(line: 80, column: 5, scope: !102)
!104 = !DILocation(line: 81, column: 1, scope: !102)
!105 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 93, type: !106, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !108, !109}
!108 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!110 = !DILocalVariable(name: "argc", arg: 1, scope: !105, file: !2, line: 93, type: !108)
!111 = !DILocation(line: 93, column: 14, scope: !105)
!112 = !DILocalVariable(name: "argv", arg: 2, scope: !105, file: !2, line: 93, type: !109)
!113 = !DILocation(line: 93, column: 27, scope: !105)
!114 = !DILocation(line: 96, column: 22, scope: !105)
!115 = !DILocation(line: 96, column: 12, scope: !105)
!116 = !DILocation(line: 96, column: 5, scope: !105)
!117 = !DILocation(line: 98, column: 5, scope: !105)
!118 = !DILocation(line: 99, column: 5, scope: !105)
!119 = !DILocation(line: 100, column: 5, scope: !105)
!120 = !DILocation(line: 103, column: 5, scope: !105)
!121 = !DILocation(line: 104, column: 5, scope: !105)
!122 = !DILocation(line: 105, column: 5, scope: !105)
!123 = !DILocation(line: 107, column: 5, scope: !105)
!124 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 52, type: !36, scopeLine: 53, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!125 = !DILocalVariable(name: "data", scope: !124, file: !2, line: 54, type: !40)
!126 = !DILocation(line: 54, column: 12, scope: !124)
!127 = !DILocalVariable(name: "dataBuffer", scope: !124, file: !2, line: 55, type: !43)
!128 = !DILocation(line: 55, column: 10, scope: !124)
!129 = !DILocation(line: 56, column: 12, scope: !124)
!130 = !DILocation(line: 56, column: 10, scope: !124)
!131 = !DILocation(line: 58, column: 12, scope: !124)
!132 = !DILocation(line: 58, column: 5, scope: !124)
!133 = !DILocation(line: 59, column: 5, scope: !124)
!134 = !DILocation(line: 59, column: 16, scope: !124)
!135 = !DILocalVariable(name: "dest", scope: !136, file: !2, line: 61, type: !55)
!136 = distinct !DILexicalBlock(scope: !124, file: !2, line: 60, column: 5)
!137 = !DILocation(line: 61, column: 14, scope: !136)
!138 = !DILocalVariable(name: "i", scope: !136, file: !2, line: 62, type: !60)
!139 = !DILocation(line: 62, column: 16, scope: !136)
!140 = !DILocalVariable(name: "dataLen", scope: !136, file: !2, line: 62, type: !60)
!141 = !DILocation(line: 62, column: 19, scope: !136)
!142 = !DILocation(line: 63, column: 26, scope: !136)
!143 = !DILocation(line: 63, column: 19, scope: !136)
!144 = !DILocation(line: 63, column: 17, scope: !136)
!145 = !DILocation(line: 65, column: 16, scope: !146)
!146 = distinct !DILexicalBlock(scope: !136, file: !2, line: 65, column: 9)
!147 = !DILocation(line: 65, column: 14, scope: !146)
!148 = !DILocation(line: 65, column: 21, scope: !149)
!149 = distinct !DILexicalBlock(scope: !146, file: !2, line: 65, column: 9)
!150 = !DILocation(line: 65, column: 25, scope: !149)
!151 = !DILocation(line: 65, column: 23, scope: !149)
!152 = !DILocation(line: 65, column: 9, scope: !146)
!153 = !DILocation(line: 67, column: 23, scope: !154)
!154 = distinct !DILexicalBlock(scope: !149, file: !2, line: 66, column: 9)
!155 = !DILocation(line: 67, column: 28, scope: !154)
!156 = !DILocation(line: 67, column: 18, scope: !154)
!157 = !DILocation(line: 67, column: 13, scope: !154)
!158 = !DILocation(line: 67, column: 21, scope: !154)
!159 = !DILocation(line: 68, column: 28, scope: !154)
!160 = !DILocation(line: 68, column: 34, scope: !154)
!161 = !DILocation(line: 68, column: 13, scope: !154)
!162 = !DILocation(line: 69, column: 28, scope: !154)
!163 = !DILocation(line: 69, column: 34, scope: !154)
!164 = !DILocation(line: 69, column: 13, scope: !154)
!165 = !DILocation(line: 70, column: 9, scope: !154)
!166 = !DILocation(line: 65, column: 35, scope: !149)
!167 = !DILocation(line: 65, column: 9, scope: !149)
!168 = distinct !{!168, !152, !169, !88}
!169 = !DILocation(line: 70, column: 9, scope: !146)
!170 = !DILocation(line: 71, column: 24, scope: !136)
!171 = !DILocation(line: 71, column: 30, scope: !136)
!172 = !DILocation(line: 71, column: 38, scope: !136)
!173 = !DILocation(line: 71, column: 9, scope: !136)
!174 = !DILocation(line: 72, column: 24, scope: !136)
!175 = !DILocation(line: 72, column: 30, scope: !136)
!176 = !DILocation(line: 72, column: 38, scope: !136)
!177 = !DILocation(line: 72, column: 9, scope: !136)
!178 = !DILocation(line: 73, column: 9, scope: !136)
!179 = !DILocation(line: 73, column: 20, scope: !136)
!180 = !DILocation(line: 74, column: 19, scope: !136)
!181 = !DILocation(line: 74, column: 9, scope: !136)
!182 = !DILocation(line: 76, column: 1, scope: !124)
