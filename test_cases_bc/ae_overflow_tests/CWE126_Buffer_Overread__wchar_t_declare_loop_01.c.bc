; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_bad() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i32], align 16
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 65, i64 noundef 49) #4
  %arrayidx = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 49
  store i32 0, ptr %arrayidx, align 4
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0
  %call2 = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 65, i64 noundef 99) #4
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 99
  store i32 0, ptr %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0
  store ptr %arraydecay4, ptr %data, align 8
  %arraydecay5 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  %call6 = call ptr @wmemset(ptr noundef %arraydecay5, i32 noundef 67, i64 noundef 99) #4
  %arrayidx7 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99
  store i32 0, ptr %arrayidx7, align 4
  %arraydecay8 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  %call9 = call i64 @wcslen(ptr noundef %arraydecay8) #5
  store i64 %call9, ptr %destLen, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8
  %1 = load i64, ptr %destLen, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8
  %3 = load i64, ptr %i, align 8
  %arrayidx10 = getelementptr inbounds i32, ptr %2, i64 %3
  %4 = load i32, ptr %arrayidx10, align 4
  %5 = load i64, ptr %i, align 8
  %arrayidx11 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 %5
  store i32 %4, ptr %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8
  %inc = add i64 %6, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8
  %8 = load i64, ptr %destLen, align 8
  %mul = mul i64 %8, 4
  %sub = sub i64 %mul, 1
  %call12 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %7, i64 noundef %sub)
  %arrayidx13 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99
  store i32 0, ptr %arrayidx13, align 4
  %arraydecay14 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  call void @printWLine(ptr noundef %arraydecay14)
  ret void
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @wcslen(ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare void @printWLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_good() #0 {
entry:
  call void @goodG2B()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i32], align 16
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 65, i64 noundef 49) #4
  %arrayidx = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 49
  store i32 0, ptr %arrayidx, align 4
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0
  %call2 = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 65, i64 noundef 99) #4
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 99
  store i32 0, ptr %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0
  store ptr %arraydecay4, ptr %data, align 8
  %arraydecay5 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  %call6 = call ptr @wmemset(ptr noundef %arraydecay5, i32 noundef 67, i64 noundef 99) #4
  %arrayidx7 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99
  store i32 0, ptr %arrayidx7, align 4
  %arraydecay8 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  %call9 = call i64 @wcslen(ptr noundef %arraydecay8) #5
  store i64 %call9, ptr %destLen, align 8
  %0 = load ptr, ptr %data, align 8
  %1 = load i64, ptr %destLen, align 8
  %sub = sub i64 %1, 1
  %mul = mul i64 %sub, 4
  %call10 = call i32 (ptr, i64, i32, ...) @BOF_CHECK_GEP(ptr noundef %0, i64 noundef %mul, i32 noundef 0)
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8
  %3 = load i64, ptr %destLen, align 8
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %data, align 8
  %5 = load i64, ptr %i, align 8
  %arrayidx11 = getelementptr inbounds i32, ptr %4, i64 %5
  %6 = load i32, ptr %arrayidx11, align 4
  %7 = load i64, ptr %i, align 8
  %arrayidx12 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 %7
  store i32 %6, ptr %arrayidx12, align 4
  %8 = load ptr, ptr %data, align 8
  %9 = load i64, ptr %i, align 8
  %add = add i64 %9, 1
  %mul13 = mul i64 %add, 4
  %sub14 = sub i64 %mul13, 1
  %call15 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef %sub14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, ptr %i, align 8
  %inc = add i64 %10, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %11 = load ptr, ptr %data, align 8
  %12 = load i64, ptr %destLen, align 8
  %mul16 = mul i64 %12, 4
  %sub17 = sub i64 %mul16, 1
  %call18 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %11, i64 noundef %sub17)
  %arrayidx19 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99
  store i32 0, ptr %arrayidx19, align 4
  %arraydecay20 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0
  call void @printWLine(ptr noundef %arraydecay20)
  ret void
}

declare i32 @BOF_CHECK_GEP(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
