; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !39, !DIExpression(), !44)
    #dbg_declare(ptr %dataBadBuffer, !45, !DIExpression(), !49)
    #dbg_declare(ptr %dataGoodBuffer, !50, !DIExpression(), !54)
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0, !dbg !55
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 65, i64 noundef 49) #4, !dbg !56
  %arrayidx = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 49, !dbg !57
  store i32 0, ptr %arrayidx, align 4, !dbg !58
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !59
  %call2 = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 65, i64 noundef 99) #4, !dbg !60
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 99, !dbg !61
  store i32 0, ptr %arrayidx3, align 4, !dbg !62
  %arraydecay4 = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0, !dbg !63
  store ptr %arraydecay4, ptr %data, align 8, !dbg !64
    #dbg_declare(ptr %i, !65, !DIExpression(), !70)
    #dbg_declare(ptr %destLen, !71, !DIExpression(), !72)
    #dbg_declare(ptr %dest, !73, !DIExpression(), !74)
  %arraydecay5 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !75
  %call6 = call ptr @wmemset(ptr noundef %arraydecay5, i32 noundef 67, i64 noundef 99) #4, !dbg !76
  %arrayidx7 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99, !dbg !77
  store i32 0, ptr %arrayidx7, align 4, !dbg !78
  %arraydecay8 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !79
  %call9 = call i64 @wcslen(ptr noundef %arraydecay8) #5, !dbg !80
  store i64 %call9, ptr %destLen, align 8, !dbg !81
  store i64 0, ptr %i, align 8, !dbg !82
  br label %for.cond, !dbg !84

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8, !dbg !85
  %1 = load i64, ptr %destLen, align 8, !dbg !87
  %cmp = icmp ult i64 %0, %1, !dbg !88
  br i1 %cmp, label %for.body, label %for.end, !dbg !89

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %data, align 8, !dbg !90
  %3 = load i64, ptr %i, align 8, !dbg !92
  %arrayidx10 = getelementptr inbounds nuw i32, ptr %2, i64 %3, !dbg !90
  %4 = load i32, ptr %arrayidx10, align 4, !dbg !90
  %5 = load i64, ptr %i, align 8, !dbg !93
  %arrayidx11 = getelementptr inbounds nuw [100 x i32], ptr %dest, i64 0, i64 %5, !dbg !94
  store i32 %4, ptr %arrayidx11, align 4, !dbg !95
  br label %for.inc, !dbg !96

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !97
  %inc = add i64 %6, 1, !dbg !97
  store i64 %inc, ptr %i, align 8, !dbg !97
  br label %for.cond, !dbg !98, !llvm.loop !99

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !102
  %8 = load i64, ptr %destLen, align 8, !dbg !103
  %mul = mul i64 %8, 4, !dbg !104
  %sub = sub i64 %mul, 1, !dbg !105
  %call12 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %7, i64 noundef %sub), !dbg !106
  %arrayidx13 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99, !dbg !107
  store i32 0, ptr %arrayidx13, align 4, !dbg !108
  %arraydecay14 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !109
  call void @printWLine(ptr noundef %arraydecay14), !dbg !110
  ret void, !dbg !111
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @wcslen(ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare void @printWLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_good() #0 !dbg !112 {
entry:
  call void @goodG2B(), !dbg !113
  ret void, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !115 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !120, !DIExpression(), !121)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !122, !DIExpression(), !123)
  %call = call i64 @time(ptr noundef null) #4, !dbg !124
  %conv = trunc i64 %call to i32, !dbg !125
  call void @srand(i32 noundef %conv) #4, !dbg !126
  call void @printLine(ptr noundef @.str), !dbg !127
  call void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_good(), !dbg !128
  call void @printLine(ptr noundef @.str.1), !dbg !129
  call void @printLine(ptr noundef @.str.2), !dbg !130
  call void @CWE126_Buffer_Overread__wchar_t_declare_loop_01_bad(), !dbg !131
  call void @printLine(ptr noundef @.str.3), !dbg !132
  ret i32 0, !dbg !133
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #1

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !134 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !135, !DIExpression(), !136)
    #dbg_declare(ptr %dataBadBuffer, !137, !DIExpression(), !138)
    #dbg_declare(ptr %dataGoodBuffer, !139, !DIExpression(), !140)
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0, !dbg !141
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 65, i64 noundef 49) #4, !dbg !142
  %arrayidx = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 49, !dbg !143
  store i32 0, ptr %arrayidx, align 4, !dbg !144
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !145
  %call2 = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 65, i64 noundef 99) #4, !dbg !146
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 99, !dbg !147
  store i32 0, ptr %arrayidx3, align 4, !dbg !148
  %arraydecay4 = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !149
  store ptr %arraydecay4, ptr %data, align 8, !dbg !150
    #dbg_declare(ptr %i, !151, !DIExpression(), !153)
    #dbg_declare(ptr %destLen, !154, !DIExpression(), !155)
    #dbg_declare(ptr %dest, !156, !DIExpression(), !157)
  %arraydecay5 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !158
  %call6 = call ptr @wmemset(ptr noundef %arraydecay5, i32 noundef 67, i64 noundef 99) #4, !dbg !159
  %arrayidx7 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99, !dbg !160
  store i32 0, ptr %arrayidx7, align 4, !dbg !161
  %arraydecay8 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !162
  %call9 = call i64 @wcslen(ptr noundef %arraydecay8) #5, !dbg !163
  store i64 %call9, ptr %destLen, align 8, !dbg !164
  %0 = load ptr, ptr %data, align 8, !dbg !165
  %1 = load i64, ptr %destLen, align 8, !dbg !166
  %sub = sub i64 %1, 1, !dbg !167
  %mul = mul i64 %sub, 4, !dbg !168
  %call10 = call i32 (ptr, i64, i32, ...) @BOF_CHECK_GEP(ptr noundef %0, i64 noundef %mul, i32 noundef 0), !dbg !169
  store i64 0, ptr %i, align 8, !dbg !170
  br label %for.cond, !dbg !172

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8, !dbg !173
  %3 = load i64, ptr %destLen, align 8, !dbg !175
  %cmp = icmp ult i64 %2, %3, !dbg !176
  br i1 %cmp, label %for.body, label %for.end, !dbg !177

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %data, align 8, !dbg !178
  %5 = load i64, ptr %i, align 8, !dbg !180
  %arrayidx11 = getelementptr inbounds nuw i32, ptr %4, i64 %5, !dbg !178
  %6 = load i32, ptr %arrayidx11, align 4, !dbg !178
  %7 = load i64, ptr %i, align 8, !dbg !181
  %arrayidx12 = getelementptr inbounds nuw [100 x i32], ptr %dest, i64 0, i64 %7, !dbg !182
  store i32 %6, ptr %arrayidx12, align 4, !dbg !183
  %8 = load ptr, ptr %data, align 8, !dbg !184
  %9 = load i64, ptr %i, align 8, !dbg !185
  %add = add i64 %9, 1, !dbg !186
  %mul13 = mul i64 %add, 4, !dbg !187
  %sub14 = sub i64 %mul13, 1, !dbg !188
  %call15 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef %sub14), !dbg !189
  br label %for.inc, !dbg !190

for.inc:                                          ; preds = %for.body
  %10 = load i64, ptr %i, align 8, !dbg !191
  %inc = add i64 %10, 1, !dbg !191
  store i64 %inc, ptr %i, align 8, !dbg !191
  br label %for.cond, !dbg !192, !llvm.loop !193

for.end:                                          ; preds = %for.cond
  %11 = load ptr, ptr %data, align 8, !dbg !195
  %12 = load i64, ptr %destLen, align 8, !dbg !196
  %mul16 = mul i64 %12, 4, !dbg !197
  %sub17 = sub i64 %mul16, 1, !dbg !198
  %call18 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %11, i64 noundef %sub17), !dbg !199
  %arrayidx19 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 99, !dbg !200
  store i32 0, ptr %arrayidx19, align 4, !dbg !201
  %arraydecay20 = getelementptr inbounds [100 x i32], ptr %dest, i64 0, i64 0, !dbg !202
  call void @printWLine(ptr noundef %arraydecay20), !dbg !203
  ret void, !dbg !204
}

declare i32 @BOF_CHECK_GEP(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { nounwind willreturn memory(read) }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 108, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "8121ec4b77d60b31a8dcc59c35429d61")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 110, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 113, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 115, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__wchar_t_declare_loop_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "8121ec4b77d60b31a8dcc59c35429d61")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!35 = distinct !DISubprogram(name: "CWE126_Buffer_Overread__wchar_t_declare_loop_01_bad", scope: !2, file: !2, line: 23, type: !36, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 25, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !42, line: 24, baseType: !43)
!42 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_wchar_t.h", directory: "", checksumkind: CSK_MD5, checksum: "1bf0c51e90dd5eb05cdcc01afdea587a")
!43 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!44 = !DILocation(line: 25, column: 15, scope: !35)
!45 = !DILocalVariable(name: "dataBadBuffer", scope: !35, file: !2, line: 26, type: !46)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 1600, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 50)
!49 = !DILocation(line: 26, column: 13, scope: !35)
!50 = !DILocalVariable(name: "dataGoodBuffer", scope: !35, file: !2, line: 27, type: !51)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 3200, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 100)
!54 = !DILocation(line: 27, column: 13, scope: !35)
!55 = !DILocation(line: 28, column: 13, scope: !35)
!56 = !DILocation(line: 28, column: 5, scope: !35)
!57 = !DILocation(line: 29, column: 5, scope: !35)
!58 = !DILocation(line: 29, column: 25, scope: !35)
!59 = !DILocation(line: 30, column: 13, scope: !35)
!60 = !DILocation(line: 30, column: 5, scope: !35)
!61 = !DILocation(line: 31, column: 5, scope: !35)
!62 = !DILocation(line: 31, column: 27, scope: !35)
!63 = !DILocation(line: 33, column: 12, scope: !35)
!64 = !DILocation(line: 33, column: 10, scope: !35)
!65 = !DILocalVariable(name: "i", scope: !66, file: !2, line: 35, type: !67)
!66 = distinct !DILexicalBlock(scope: !35, file: !2, line: 34, column: 5)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !68, line: 18, baseType: !69)
!68 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!69 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!70 = !DILocation(line: 35, column: 16, scope: !66)
!71 = !DILocalVariable(name: "destLen", scope: !66, file: !2, line: 35, type: !67)
!72 = !DILocation(line: 35, column: 19, scope: !66)
!73 = !DILocalVariable(name: "dest", scope: !66, file: !2, line: 36, type: !51)
!74 = !DILocation(line: 36, column: 17, scope: !66)
!75 = !DILocation(line: 37, column: 17, scope: !66)
!76 = !DILocation(line: 37, column: 9, scope: !66)
!77 = !DILocation(line: 38, column: 9, scope: !66)
!78 = !DILocation(line: 38, column: 21, scope: !66)
!79 = !DILocation(line: 39, column: 26, scope: !66)
!80 = !DILocation(line: 39, column: 19, scope: !66)
!81 = !DILocation(line: 39, column: 17, scope: !66)
!82 = !DILocation(line: 42, column: 16, scope: !83)
!83 = distinct !DILexicalBlock(scope: !66, file: !2, line: 42, column: 9)
!84 = !DILocation(line: 42, column: 14, scope: !83)
!85 = !DILocation(line: 42, column: 21, scope: !86)
!86 = distinct !DILexicalBlock(scope: !83, file: !2, line: 42, column: 9)
!87 = !DILocation(line: 42, column: 25, scope: !86)
!88 = !DILocation(line: 42, column: 23, scope: !86)
!89 = !DILocation(line: 42, column: 9, scope: !83)
!90 = !DILocation(line: 44, column: 23, scope: !91)
!91 = distinct !DILexicalBlock(scope: !86, file: !2, line: 43, column: 9)
!92 = !DILocation(line: 44, column: 28, scope: !91)
!93 = !DILocation(line: 44, column: 18, scope: !91)
!94 = !DILocation(line: 44, column: 13, scope: !91)
!95 = !DILocation(line: 44, column: 21, scope: !91)
!96 = !DILocation(line: 45, column: 9, scope: !91)
!97 = !DILocation(line: 42, column: 35, scope: !86)
!98 = !DILocation(line: 42, column: 9, scope: !86)
!99 = distinct !{!99, !89, !100, !101}
!100 = !DILocation(line: 45, column: 9, scope: !83)
!101 = !{!"llvm.loop.mustprogress"}
!102 = !DILocation(line: 46, column: 26, scope: !66)
!103 = !DILocation(line: 46, column: 32, scope: !66)
!104 = !DILocation(line: 46, column: 40, scope: !66)
!105 = !DILocation(line: 46, column: 58, scope: !66)
!106 = !DILocation(line: 46, column: 9, scope: !66)
!107 = !DILocation(line: 47, column: 9, scope: !66)
!108 = !DILocation(line: 47, column: 21, scope: !66)
!109 = !DILocation(line: 48, column: 20, scope: !66)
!110 = !DILocation(line: 48, column: 9, scope: !66)
!111 = !DILocation(line: 50, column: 1, scope: !35)
!112 = distinct !DISubprogram(name: "CWE126_Buffer_Overread__wchar_t_declare_loop_01_good", scope: !2, file: !2, line: 88, type: !36, scopeLine: 89, spFlags: DISPFlagDefinition, unit: !22)
!113 = !DILocation(line: 90, column: 5, scope: !112)
!114 = !DILocation(line: 91, column: 1, scope: !112)
!115 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 103, type: !116, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!116 = !DISubroutineType(types: !117)
!117 = !{!43, !43, !118}
!118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !119, size: 64)
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!120 = !DILocalVariable(name: "argc", arg: 1, scope: !115, file: !2, line: 103, type: !43)
!121 = !DILocation(line: 103, column: 14, scope: !115)
!122 = !DILocalVariable(name: "argv", arg: 2, scope: !115, file: !2, line: 103, type: !118)
!123 = !DILocation(line: 103, column: 27, scope: !115)
!124 = !DILocation(line: 106, column: 22, scope: !115)
!125 = !DILocation(line: 106, column: 12, scope: !115)
!126 = !DILocation(line: 106, column: 5, scope: !115)
!127 = !DILocation(line: 108, column: 5, scope: !115)
!128 = !DILocation(line: 109, column: 5, scope: !115)
!129 = !DILocation(line: 110, column: 5, scope: !115)
!130 = !DILocation(line: 113, column: 5, scope: !115)
!131 = !DILocation(line: 114, column: 5, scope: !115)
!132 = !DILocation(line: 115, column: 5, scope: !115)
!133 = !DILocation(line: 117, column: 5, scope: !115)
!134 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 57, type: !36, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!135 = !DILocalVariable(name: "data", scope: !134, file: !2, line: 59, type: !40)
!136 = !DILocation(line: 59, column: 15, scope: !134)
!137 = !DILocalVariable(name: "dataBadBuffer", scope: !134, file: !2, line: 60, type: !46)
!138 = !DILocation(line: 60, column: 13, scope: !134)
!139 = !DILocalVariable(name: "dataGoodBuffer", scope: !134, file: !2, line: 61, type: !51)
!140 = !DILocation(line: 61, column: 13, scope: !134)
!141 = !DILocation(line: 62, column: 13, scope: !134)
!142 = !DILocation(line: 62, column: 5, scope: !134)
!143 = !DILocation(line: 63, column: 5, scope: !134)
!144 = !DILocation(line: 63, column: 25, scope: !134)
!145 = !DILocation(line: 64, column: 13, scope: !134)
!146 = !DILocation(line: 64, column: 5, scope: !134)
!147 = !DILocation(line: 65, column: 5, scope: !134)
!148 = !DILocation(line: 65, column: 27, scope: !134)
!149 = !DILocation(line: 67, column: 12, scope: !134)
!150 = !DILocation(line: 67, column: 10, scope: !134)
!151 = !DILocalVariable(name: "i", scope: !152, file: !2, line: 69, type: !67)
!152 = distinct !DILexicalBlock(scope: !134, file: !2, line: 68, column: 5)
!153 = !DILocation(line: 69, column: 16, scope: !152)
!154 = !DILocalVariable(name: "destLen", scope: !152, file: !2, line: 69, type: !67)
!155 = !DILocation(line: 69, column: 19, scope: !152)
!156 = !DILocalVariable(name: "dest", scope: !152, file: !2, line: 70, type: !51)
!157 = !DILocation(line: 70, column: 17, scope: !152)
!158 = !DILocation(line: 71, column: 17, scope: !152)
!159 = !DILocation(line: 71, column: 9, scope: !152)
!160 = !DILocation(line: 72, column: 9, scope: !152)
!161 = !DILocation(line: 72, column: 21, scope: !152)
!162 = !DILocation(line: 73, column: 26, scope: !152)
!163 = !DILocation(line: 73, column: 19, scope: !152)
!164 = !DILocation(line: 73, column: 17, scope: !152)
!165 = !DILocation(line: 76, column: 23, scope: !152)
!166 = !DILocation(line: 76, column: 30, scope: !152)
!167 = !DILocation(line: 76, column: 38, scope: !152)
!168 = !DILocation(line: 76, column: 42, scope: !152)
!169 = !DILocation(line: 76, column: 9, scope: !152)
!170 = !DILocation(line: 77, column: 16, scope: !171)
!171 = distinct !DILexicalBlock(scope: !152, file: !2, line: 77, column: 9)
!172 = !DILocation(line: 77, column: 14, scope: !171)
!173 = !DILocation(line: 77, column: 21, scope: !174)
!174 = distinct !DILexicalBlock(scope: !171, file: !2, line: 77, column: 9)
!175 = !DILocation(line: 77, column: 25, scope: !174)
!176 = !DILocation(line: 77, column: 23, scope: !174)
!177 = !DILocation(line: 77, column: 9, scope: !171)
!178 = !DILocation(line: 79, column: 23, scope: !179)
!179 = distinct !DILexicalBlock(scope: !174, file: !2, line: 78, column: 9)
!180 = !DILocation(line: 79, column: 28, scope: !179)
!181 = !DILocation(line: 79, column: 18, scope: !179)
!182 = !DILocation(line: 79, column: 13, scope: !179)
!183 = !DILocation(line: 79, column: 21, scope: !179)
!184 = !DILocation(line: 80, column: 28, scope: !179)
!185 = !DILocation(line: 80, column: 35, scope: !179)
!186 = !DILocation(line: 80, column: 37, scope: !179)
!187 = !DILocation(line: 80, column: 42, scope: !179)
!188 = !DILocation(line: 80, column: 60, scope: !179)
!189 = !DILocation(line: 80, column: 13, scope: !179)
!190 = !DILocation(line: 81, column: 9, scope: !179)
!191 = !DILocation(line: 77, column: 35, scope: !174)
!192 = !DILocation(line: 77, column: 9, scope: !174)
!193 = distinct !{!193, !177, !194, !101}
!194 = !DILocation(line: 81, column: 9, scope: !171)
!195 = !DILocation(line: 82, column: 24, scope: !152)
!196 = !DILocation(line: 82, column: 30, scope: !152)
!197 = !DILocation(line: 82, column: 38, scope: !152)
!198 = !DILocation(line: 82, column: 56, scope: !152)
!199 = !DILocation(line: 82, column: 9, scope: !152)
!200 = !DILocation(line: 83, column: 9, scope: !152)
!201 = !DILocation(line: 83, column: 21, scope: !152)
!202 = !DILocation(line: 84, column: 20, scope: !152)
!203 = !DILocation(line: 84, column: 9, scope: !152)
!204 = !DILocation(line: 86, column: 1, scope: !134)
