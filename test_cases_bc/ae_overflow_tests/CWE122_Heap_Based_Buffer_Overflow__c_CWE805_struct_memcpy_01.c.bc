; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad() #0 !dbg !44 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [100 x %struct._twoIntsStruct], align 16
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !48, metadata !DIExpression()), !dbg !49
  store ptr null, ptr %data, align 8, !dbg !50
  %call = call noalias ptr @malloc(i64 noundef 400) #7, !dbg !51
  store ptr %call, ptr %data, align 8, !dbg !52
  %0 = load ptr, ptr %data, align 8, !dbg !53
  %cmp = icmp eq ptr %0, null, !dbg !55
  br i1 %cmp, label %if.then, label %if.end, !dbg !56

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !57
  unreachable, !dbg !57

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %source, metadata !59, metadata !DIExpression()), !dbg !64
  call void @llvm.dbg.declare(metadata ptr %i, metadata !65, metadata !DIExpression()), !dbg !70
  store i64 0, ptr %i, align 8, !dbg !71
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !74
  %cmp1 = icmp ult i64 %1, 100, !dbg !76
  br i1 %cmp1, label %for.body, label %for.end, !dbg !77

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !78
  %arrayidx = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %2, !dbg !80
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !81
  store i32 0, ptr %intOne, align 8, !dbg !82
  %3 = load i64, ptr %i, align 8, !dbg !83
  %arrayidx2 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %3, !dbg !84
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !85
  store i32 0, ptr %intTwo, align 4, !dbg !86
  br label %for.inc, !dbg !87

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !88
  %inc = add i64 %4, 1, !dbg !88
  store i64 %inc, ptr %i, align 8, !dbg !88
  br label %for.cond, !dbg !89, !llvm.loop !90

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !93
  %arraydecay = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !94
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 16 %arraydecay, i64 800, i1 false), !dbg !94
  %6 = load ptr, ptr %data, align 8, !dbg !95
  %call3 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %6, i64 noundef 799), !dbg !96
  %arraydecay4 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !97
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay4, i64 noundef 799), !dbg !98
  %7 = load ptr, ptr %data, align 8, !dbg !99
  %arrayidx6 = getelementptr inbounds %struct._twoIntsStruct, ptr %7, i64 0, !dbg !99
  call void @printStructLine(ptr noundef %arrayidx6), !dbg !100
  %8 = load ptr, ptr %data, align 8, !dbg !101
  call void @free(ptr noundef %8) #9, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

declare i32 @UNSAFE_BUFACCESS(...) #5

declare i32 @SAFE_BUFACCESS(...) #5

declare void @printStructLine(ptr noundef) #5

; Function Attrs: nounwind
declare void @free(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_good() #0 !dbg !104 {
entry:
  call void @goodG2B(), !dbg !105
  ret void, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !107 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !112, metadata !DIExpression()), !dbg !113
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %call = call i64 @time(ptr noundef null) #9, !dbg !116
  %conv = trunc i64 %call to i32, !dbg !117
  call void @srand(i32 noundef %conv) #9, !dbg !118
  call void @printLine(ptr noundef @.str), !dbg !119
  call void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_good(), !dbg !120
  call void @printLine(ptr noundef @.str.1), !dbg !121
  call void @printLine(ptr noundef @.str.2), !dbg !122
  call void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad(), !dbg !123
  call void @printLine(ptr noundef @.str.3), !dbg !124
  ret i32 0, !dbg !125
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #6

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #6

declare void @printLine(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !126 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [100 x %struct._twoIntsStruct], align 16
  %i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !127, metadata !DIExpression()), !dbg !128
  store ptr null, ptr %data, align 8, !dbg !129
  %call = call noalias ptr @malloc(i64 noundef 800) #7, !dbg !130
  store ptr %call, ptr %data, align 8, !dbg !131
  %0 = load ptr, ptr %data, align 8, !dbg !132
  %cmp = icmp eq ptr %0, null, !dbg !134
  br i1 %cmp, label %if.then, label %if.end, !dbg !135

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8, !dbg !136
  unreachable, !dbg !136

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %source, metadata !138, metadata !DIExpression()), !dbg !140
  call void @llvm.dbg.declare(metadata ptr %i, metadata !141, metadata !DIExpression()), !dbg !143
  store i64 0, ptr %i, align 8, !dbg !144
  br label %for.cond, !dbg !146

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, ptr %i, align 8, !dbg !147
  %cmp1 = icmp ult i64 %1, 100, !dbg !149
  br i1 %cmp1, label %for.body, label %for.end, !dbg !150

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !151
  %arrayidx = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %2, !dbg !153
  %intOne = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !154
  store i32 0, ptr %intOne, align 8, !dbg !155
  %3 = load i64, ptr %i, align 8, !dbg !156
  %arrayidx2 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %3, !dbg !157
  %intTwo = getelementptr inbounds %struct._twoIntsStruct, ptr %arrayidx2, i32 0, i32 1, !dbg !158
  store i32 0, ptr %intTwo, align 4, !dbg !159
  br label %for.inc, !dbg !160

for.inc:                                          ; preds = %for.body
  %4 = load i64, ptr %i, align 8, !dbg !161
  %inc = add i64 %4, 1, !dbg !161
  store i64 %inc, ptr %i, align 8, !dbg !161
  br label %for.cond, !dbg !162, !llvm.loop !163

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %data, align 8, !dbg !165
  %arraydecay = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !166
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 16 %arraydecay, i64 800, i1 false), !dbg !166
  %6 = load ptr, ptr %data, align 8, !dbg !167
  %call3 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %6, i64 noundef 799), !dbg !168
  %arraydecay4 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !169
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay4, i64 noundef 799), !dbg !170
  %7 = load ptr, ptr %data, align 8, !dbg !171
  %arrayidx6 = getelementptr inbounds %struct._twoIntsStruct, ptr %7, i64 0, !dbg !171
  call void @printStructLine(ptr noundef %arrayidx6), !dbg !172
  %8 = load ptr, ptr %data, align 8, !dbg !173
  call void @free(ptr noundef %8) #9, !dbg !174
  ret void, !dbg !175
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!36, !37, !38, !39, !40, !41, !42}
!llvm.ident = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 101, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "0506068d7b490dc18cbe33905bd77fdf")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 103, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 106, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 108, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !35, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "0506068d7b490dc18cbe33905bd77fdf")
!24 = !{!25, !33, !34}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !27, line: 103, baseType: !28)
!27 = !DIFile(filename: "src/ae_overflow_tests/std_testcase.h", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "88a24111f8dafef29ef3f03c1f00803c")
!28 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !27, line: 99, size: 64, elements: !29)
!29 = !{!30, !32}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !28, file: !27, line: 101, baseType: !31, size: 32)
!31 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !28, file: !27, line: 102, baseType: !31, size: 32, offset: 32)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!34 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!35 = !{!0, !7, !12, !17}
!36 = !{i32 7, !"Dwarf Version", i32 5}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 1, !"wchar_size", i32 4}
!39 = !{i32 8, !"PIC Level", i32 2}
!40 = !{i32 7, !"PIE Level", i32 2}
!41 = !{i32 7, !"uwtable", i32 2}
!42 = !{i32 7, !"frame-pointer", i32 2}
!43 = !{!"clang version 16.0.0"}
!44 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_bad", scope: !2, file: !2, line: 21, type: !45, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !47)
!45 = !DISubroutineType(types: !46)
!46 = !{null}
!47 = !{}
!48 = !DILocalVariable(name: "data", scope: !44, file: !2, line: 23, type: !25)
!49 = !DILocation(line: 23, column: 21, scope: !44)
!50 = !DILocation(line: 24, column: 10, scope: !44)
!51 = !DILocation(line: 26, column: 29, scope: !44)
!52 = !DILocation(line: 26, column: 10, scope: !44)
!53 = !DILocation(line: 27, column: 9, scope: !54)
!54 = distinct !DILexicalBlock(scope: !44, file: !2, line: 27, column: 9)
!55 = !DILocation(line: 27, column: 14, scope: !54)
!56 = !DILocation(line: 27, column: 9, scope: !44)
!57 = !DILocation(line: 27, column: 24, scope: !58)
!58 = distinct !DILexicalBlock(scope: !54, file: !2, line: 27, column: 23)
!59 = !DILocalVariable(name: "source", scope: !60, file: !2, line: 29, type: !61)
!60 = distinct !DILexicalBlock(scope: !44, file: !2, line: 28, column: 5)
!61 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 6400, elements: !62)
!62 = !{!63}
!63 = !DISubrange(count: 100)
!64 = !DILocation(line: 29, column: 23, scope: !60)
!65 = !DILocalVariable(name: "i", scope: !66, file: !2, line: 31, type: !67)
!66 = distinct !DILexicalBlock(scope: !60, file: !2, line: 30, column: 9)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !68, line: 46, baseType: !69)
!68 = !DIFile(filename: "/opt/llvm/lib/clang/16/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!69 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!70 = !DILocation(line: 31, column: 20, scope: !66)
!71 = !DILocation(line: 33, column: 20, scope: !72)
!72 = distinct !DILexicalBlock(scope: !66, file: !2, line: 33, column: 13)
!73 = !DILocation(line: 33, column: 18, scope: !72)
!74 = !DILocation(line: 33, column: 25, scope: !75)
!75 = distinct !DILexicalBlock(scope: !72, file: !2, line: 33, column: 13)
!76 = !DILocation(line: 33, column: 27, scope: !75)
!77 = !DILocation(line: 33, column: 13, scope: !72)
!78 = !DILocation(line: 35, column: 24, scope: !79)
!79 = distinct !DILexicalBlock(scope: !75, file: !2, line: 34, column: 13)
!80 = !DILocation(line: 35, column: 17, scope: !79)
!81 = !DILocation(line: 35, column: 27, scope: !79)
!82 = !DILocation(line: 35, column: 34, scope: !79)
!83 = !DILocation(line: 36, column: 24, scope: !79)
!84 = !DILocation(line: 36, column: 17, scope: !79)
!85 = !DILocation(line: 36, column: 27, scope: !79)
!86 = !DILocation(line: 36, column: 34, scope: !79)
!87 = !DILocation(line: 37, column: 13, scope: !79)
!88 = !DILocation(line: 33, column: 35, scope: !75)
!89 = !DILocation(line: 33, column: 13, scope: !75)
!90 = distinct !{!90, !77, !91, !92}
!91 = !DILocation(line: 37, column: 13, scope: !72)
!92 = !{!"llvm.loop.mustprogress"}
!93 = !DILocation(line: 40, column: 16, scope: !60)
!94 = !DILocation(line: 40, column: 9, scope: !60)
!95 = !DILocation(line: 41, column: 26, scope: !60)
!96 = !DILocation(line: 41, column: 9, scope: !60)
!97 = !DILocation(line: 42, column: 24, scope: !60)
!98 = !DILocation(line: 42, column: 9, scope: !60)
!99 = !DILocation(line: 43, column: 26, scope: !60)
!100 = !DILocation(line: 43, column: 9, scope: !60)
!101 = !DILocation(line: 44, column: 14, scope: !60)
!102 = !DILocation(line: 44, column: 9, scope: !60)
!103 = !DILocation(line: 46, column: 1, scope: !44)
!104 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01_good", scope: !2, file: !2, line: 81, type: !45, scopeLine: 82, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !47)
!105 = !DILocation(line: 83, column: 5, scope: !104)
!106 = !DILocation(line: 84, column: 1, scope: !104)
!107 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 96, type: !108, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !47)
!108 = !DISubroutineType(types: !109)
!109 = !{!31, !31, !110}
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!112 = !DILocalVariable(name: "argc", arg: 1, scope: !107, file: !2, line: 96, type: !31)
!113 = !DILocation(line: 96, column: 14, scope: !107)
!114 = !DILocalVariable(name: "argv", arg: 2, scope: !107, file: !2, line: 96, type: !110)
!115 = !DILocation(line: 96, column: 27, scope: !107)
!116 = !DILocation(line: 99, column: 22, scope: !107)
!117 = !DILocation(line: 99, column: 12, scope: !107)
!118 = !DILocation(line: 99, column: 5, scope: !107)
!119 = !DILocation(line: 101, column: 5, scope: !107)
!120 = !DILocation(line: 102, column: 5, scope: !107)
!121 = !DILocation(line: 103, column: 5, scope: !107)
!122 = !DILocation(line: 106, column: 5, scope: !107)
!123 = !DILocation(line: 107, column: 5, scope: !107)
!124 = !DILocation(line: 108, column: 5, scope: !107)
!125 = !DILocation(line: 110, column: 5, scope: !107)
!126 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 53, type: !45, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !47)
!127 = !DILocalVariable(name: "data", scope: !126, file: !2, line: 55, type: !25)
!128 = !DILocation(line: 55, column: 21, scope: !126)
!129 = !DILocation(line: 56, column: 10, scope: !126)
!130 = !DILocation(line: 58, column: 29, scope: !126)
!131 = !DILocation(line: 58, column: 10, scope: !126)
!132 = !DILocation(line: 59, column: 9, scope: !133)
!133 = distinct !DILexicalBlock(scope: !126, file: !2, line: 59, column: 9)
!134 = !DILocation(line: 59, column: 14, scope: !133)
!135 = !DILocation(line: 59, column: 9, scope: !126)
!136 = !DILocation(line: 59, column: 24, scope: !137)
!137 = distinct !DILexicalBlock(scope: !133, file: !2, line: 59, column: 23)
!138 = !DILocalVariable(name: "source", scope: !139, file: !2, line: 61, type: !61)
!139 = distinct !DILexicalBlock(scope: !126, file: !2, line: 60, column: 5)
!140 = !DILocation(line: 61, column: 23, scope: !139)
!141 = !DILocalVariable(name: "i", scope: !142, file: !2, line: 63, type: !67)
!142 = distinct !DILexicalBlock(scope: !139, file: !2, line: 62, column: 9)
!143 = !DILocation(line: 63, column: 20, scope: !142)
!144 = !DILocation(line: 65, column: 20, scope: !145)
!145 = distinct !DILexicalBlock(scope: !142, file: !2, line: 65, column: 13)
!146 = !DILocation(line: 65, column: 18, scope: !145)
!147 = !DILocation(line: 65, column: 25, scope: !148)
!148 = distinct !DILexicalBlock(scope: !145, file: !2, line: 65, column: 13)
!149 = !DILocation(line: 65, column: 27, scope: !148)
!150 = !DILocation(line: 65, column: 13, scope: !145)
!151 = !DILocation(line: 67, column: 24, scope: !152)
!152 = distinct !DILexicalBlock(scope: !148, file: !2, line: 66, column: 13)
!153 = !DILocation(line: 67, column: 17, scope: !152)
!154 = !DILocation(line: 67, column: 27, scope: !152)
!155 = !DILocation(line: 67, column: 34, scope: !152)
!156 = !DILocation(line: 68, column: 24, scope: !152)
!157 = !DILocation(line: 68, column: 17, scope: !152)
!158 = !DILocation(line: 68, column: 27, scope: !152)
!159 = !DILocation(line: 68, column: 34, scope: !152)
!160 = !DILocation(line: 69, column: 13, scope: !152)
!161 = !DILocation(line: 65, column: 35, scope: !148)
!162 = !DILocation(line: 65, column: 13, scope: !148)
!163 = distinct !{!163, !150, !164, !92}
!164 = !DILocation(line: 69, column: 13, scope: !145)
!165 = !DILocation(line: 72, column: 16, scope: !139)
!166 = !DILocation(line: 72, column: 9, scope: !139)
!167 = !DILocation(line: 73, column: 24, scope: !139)
!168 = !DILocation(line: 73, column: 9, scope: !139)
!169 = !DILocation(line: 74, column: 24, scope: !139)
!170 = !DILocation(line: 74, column: 9, scope: !139)
!171 = !DILocation(line: 76, column: 26, scope: !139)
!172 = !DILocation(line: 76, column: 9, scope: !139)
!173 = !DILocation(line: 77, column: 14, scope: !139)
!174 = !DILocation(line: 77, column: 9, scope: !139)
!175 = !DILocation(line: 79, column: 1, scope: !126)
