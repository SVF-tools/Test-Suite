; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_bad() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %source = alloca [100 x i32], align 16
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0
  store ptr %arraydecay, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i32, ptr %0, i64 0
  store i32 0, ptr %arrayidx, align 4
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0
  %call = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 67, i64 noundef 99) #3
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99
  store i32 0, ptr %arrayidx2, align 4
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8
  %cmp = icmp ult i64 %1, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 %2
  %3 = load i32, ptr %arrayidx3, align 4
  %4 = load ptr, ptr %data, align 8
  %5 = load i64, ptr %i, align 8
  %arrayidx4 = getelementptr inbounds i32, ptr %4, i64 %5
  store i32 %3, ptr %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8
  %inc = add i64 %6, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8
  %arrayidx5 = getelementptr inbounds i32, ptr %7, i64 99
  store i32 0, ptr %arrayidx5, align 4
  %8 = load ptr, ptr %data, align 8
  %call6 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %8, i64 noundef 399)
  %arraydecay7 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay7, i64 noundef 399)
  %9 = load ptr, ptr %data, align 8
  call void @printWLine(ptr noundef %9)
  ret void
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

declare i32 @UNSAFE_BUFACCESS(...) #2

declare i32 @SAFE_BUFACCESS(...) #2

declare void @printWLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_good() #0 {
entry:
  call void @goodG2B()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %source = alloca [100 x i32], align 16
  %arraydecay = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0
  store ptr %arraydecay, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i32, ptr %0, i64 0
  store i32 0, ptr %arrayidx, align 4
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0
  %call = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 67, i64 noundef 99) #3
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99
  store i32 0, ptr %arrayidx2, align 4
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8
  %cmp = icmp ult i64 %1, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8
  %arrayidx3 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 %2
  %3 = load i32, ptr %arrayidx3, align 4
  %4 = load ptr, ptr %data, align 8
  %5 = load i64, ptr %i, align 8
  %arrayidx4 = getelementptr inbounds i32, ptr %4, i64 %5
  store i32 %3, ptr %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8
  %inc = add i64 %6, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8
  %arrayidx5 = getelementptr inbounds i32, ptr %7, i64 99
  store i32 0, ptr %arrayidx5, align 4
  %8 = load ptr, ptr %data, align 8
  %call6 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef 399)
  %arraydecay7 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay7, i64 noundef 399)
  %9 = load ptr, ptr %data, align 8
  call void @printWLine(ptr noundef %9)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
