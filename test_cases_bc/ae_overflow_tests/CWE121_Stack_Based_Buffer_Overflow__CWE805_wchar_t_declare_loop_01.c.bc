; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %source = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !39, !DIExpression(), !44)
    #dbg_declare(ptr %dataBadBuffer, !45, !DIExpression(), !49)
    #dbg_declare(ptr %dataGoodBuffer, !50, !DIExpression(), !54)
  %arraydecay = getelementptr inbounds [50 x i32], ptr %dataBadBuffer, i64 0, i64 0, !dbg !55
  store ptr %arraydecay, ptr %data, align 8, !dbg !56
  %0 = load ptr, ptr %data, align 8, !dbg !57
  %arrayidx = getelementptr inbounds i32, ptr %0, i64 0, !dbg !57
  store i32 0, ptr %arrayidx, align 4, !dbg !58
    #dbg_declare(ptr %i, !59, !DIExpression(), !64)
    #dbg_declare(ptr %source, !65, !DIExpression(), !66)
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !67
  %call = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 67, i64 noundef 99) #3, !dbg !68
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !69
  store i32 0, ptr %arrayidx2, align 4, !dbg !70
  store i64 0, ptr %i, align 8, !dbg !71
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8, !dbg !74
  %cmp = icmp ult i64 %1, 100, !dbg !76
  br i1 %cmp, label %for.body, label %for.end, !dbg !77

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !78
  %arrayidx3 = getelementptr inbounds nuw [100 x i32], ptr %source, i64 0, i64 %2, !dbg !80
  %3 = load i32, ptr %arrayidx3, align 4, !dbg !80
  %4 = load ptr, ptr %data, align 8, !dbg !81
  %5 = load i64, ptr %i, align 8, !dbg !82
  %arrayidx4 = getelementptr inbounds nuw i32, ptr %4, i64 %5, !dbg !81
  store i32 %3, ptr %arrayidx4, align 4, !dbg !83
  br label %for.inc, !dbg !84

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !85
  %inc = add i64 %6, 1, !dbg !85
  store i64 %inc, ptr %i, align 8, !dbg !85
  br label %for.cond, !dbg !86, !llvm.loop !87

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !90
  %arrayidx5 = getelementptr inbounds i32, ptr %7, i64 99, !dbg !90
  store i32 0, ptr %arrayidx5, align 4, !dbg !91
  %8 = load ptr, ptr %data, align 8, !dbg !92
  %call6 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %8, i64 noundef 399), !dbg !93
  %arraydecay7 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !94
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay7, i64 noundef 399), !dbg !95
  %9 = load ptr, ptr %data, align 8, !dbg !96
  call void @printWLine(ptr noundef %9), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

declare i32 @UNSAFE_BUFACCESS(...) #2

declare i32 @SAFE_BUFACCESS(...) #2

declare void @printWLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_good() #0 !dbg !99 {
entry:
  call void @goodG2B(), !dbg !100
  ret void, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !102 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !107, !DIExpression(), !108)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !109, !DIExpression(), !110)
  %call = call i64 @time(ptr noundef null) #3, !dbg !111
  %conv = trunc i64 %call to i32, !dbg !112
  call void @srand(i32 noundef %conv) #3, !dbg !113
  call void @printLine(ptr noundef @.str), !dbg !114
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_good(), !dbg !115
  call void @printLine(ptr noundef @.str.1), !dbg !116
  call void @printLine(ptr noundef @.str.2), !dbg !117
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_bad(), !dbg !118
  call void @printLine(ptr noundef @.str.3), !dbg !119
  ret i32 0, !dbg !120
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #1

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !121 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i32], align 16
  %dataGoodBuffer = alloca [100 x i32], align 16
  %i = alloca i64, align 8
  %source = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !122, !DIExpression(), !123)
    #dbg_declare(ptr %dataBadBuffer, !124, !DIExpression(), !125)
    #dbg_declare(ptr %dataGoodBuffer, !126, !DIExpression(), !127)
  %arraydecay = getelementptr inbounds [100 x i32], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !128
  store ptr %arraydecay, ptr %data, align 8, !dbg !129
  %0 = load ptr, ptr %data, align 8, !dbg !130
  %arrayidx = getelementptr inbounds i32, ptr %0, i64 0, !dbg !130
  store i32 0, ptr %arrayidx, align 4, !dbg !131
    #dbg_declare(ptr %i, !132, !DIExpression(), !134)
    #dbg_declare(ptr %source, !135, !DIExpression(), !136)
  %arraydecay1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !137
  %call = call ptr @wmemset(ptr noundef %arraydecay1, i32 noundef 67, i64 noundef 99) #3, !dbg !138
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !139
  store i32 0, ptr %arrayidx2, align 4, !dbg !140
  store i64 0, ptr %i, align 8, !dbg !141
  br label %for.cond, !dbg !143

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8, !dbg !144
  %cmp = icmp ult i64 %1, 100, !dbg !146
  br i1 %cmp, label %for.body, label %for.end, !dbg !147

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !148
  %arrayidx3 = getelementptr inbounds nuw [100 x i32], ptr %source, i64 0, i64 %2, !dbg !150
  %3 = load i32, ptr %arrayidx3, align 4, !dbg !150
  %4 = load ptr, ptr %data, align 8, !dbg !151
  %5 = load i64, ptr %i, align 8, !dbg !152
  %arrayidx4 = getelementptr inbounds nuw i32, ptr %4, i64 %5, !dbg !151
  store i32 %3, ptr %arrayidx4, align 4, !dbg !153
  br label %for.inc, !dbg !154

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !155
  %inc = add i64 %6, 1, !dbg !155
  store i64 %inc, ptr %i, align 8, !dbg !155
  br label %for.cond, !dbg !156, !llvm.loop !157

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !159
  %arrayidx5 = getelementptr inbounds i32, ptr %7, i64 99, !dbg !159
  store i32 0, ptr %arrayidx5, align 4, !dbg !160
  %8 = load ptr, ptr %data, align 8, !dbg !161
  %call6 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef 399), !dbg !162
  %arraydecay7 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !163
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay7, i64 noundef 399), !dbg !164
  %9 = load ptr, ptr %data, align 8, !dbg !165
  call void @printWLine(ptr noundef %9), !dbg !166
  ret void, !dbg !167
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 99, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "ed042e31d81dcd4f1c02de1b569f7377")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 101, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 104, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 106, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "ed042e31d81dcd4f1c02de1b569f7377")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!35 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_bad", scope: !2, file: !2, line: 23, type: !36, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 25, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !42, line: 24, baseType: !43)
!42 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_wchar_t.h", directory: "", checksumkind: CSK_MD5, checksum: "1bf0c51e90dd5eb05cdcc01afdea587a")
!43 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!44 = !DILocation(line: 25, column: 15, scope: !35)
!45 = !DILocalVariable(name: "dataBadBuffer", scope: !35, file: !2, line: 26, type: !46)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 1600, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 50)
!49 = !DILocation(line: 26, column: 13, scope: !35)
!50 = !DILocalVariable(name: "dataGoodBuffer", scope: !35, file: !2, line: 27, type: !51)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 3200, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 100)
!54 = !DILocation(line: 27, column: 13, scope: !35)
!55 = !DILocation(line: 30, column: 12, scope: !35)
!56 = !DILocation(line: 30, column: 10, scope: !35)
!57 = !DILocation(line: 31, column: 5, scope: !35)
!58 = !DILocation(line: 31, column: 13, scope: !35)
!59 = !DILocalVariable(name: "i", scope: !60, file: !2, line: 33, type: !61)
!60 = distinct !DILexicalBlock(scope: !35, file: !2, line: 32, column: 5)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !62, line: 18, baseType: !63)
!62 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!63 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!64 = !DILocation(line: 33, column: 16, scope: !60)
!65 = !DILocalVariable(name: "source", scope: !60, file: !2, line: 34, type: !51)
!66 = !DILocation(line: 34, column: 17, scope: !60)
!67 = !DILocation(line: 35, column: 17, scope: !60)
!68 = !DILocation(line: 35, column: 9, scope: !60)
!69 = !DILocation(line: 36, column: 9, scope: !60)
!70 = !DILocation(line: 36, column: 23, scope: !60)
!71 = !DILocation(line: 38, column: 16, scope: !72)
!72 = distinct !DILexicalBlock(scope: !60, file: !2, line: 38, column: 9)
!73 = !DILocation(line: 38, column: 14, scope: !72)
!74 = !DILocation(line: 38, column: 21, scope: !75)
!75 = distinct !DILexicalBlock(scope: !72, file: !2, line: 38, column: 9)
!76 = !DILocation(line: 38, column: 23, scope: !75)
!77 = !DILocation(line: 38, column: 9, scope: !72)
!78 = !DILocation(line: 40, column: 30, scope: !79)
!79 = distinct !DILexicalBlock(scope: !75, file: !2, line: 39, column: 9)
!80 = !DILocation(line: 40, column: 23, scope: !79)
!81 = !DILocation(line: 40, column: 13, scope: !79)
!82 = !DILocation(line: 40, column: 18, scope: !79)
!83 = !DILocation(line: 40, column: 21, scope: !79)
!84 = !DILocation(line: 41, column: 9, scope: !79)
!85 = !DILocation(line: 38, column: 31, scope: !75)
!86 = !DILocation(line: 38, column: 9, scope: !75)
!87 = distinct !{!87, !77, !88, !89}
!88 = !DILocation(line: 41, column: 9, scope: !72)
!89 = !{!"llvm.loop.mustprogress"}
!90 = !DILocation(line: 42, column: 9, scope: !60)
!91 = !DILocation(line: 42, column: 21, scope: !60)
!92 = !DILocation(line: 43, column: 26, scope: !60)
!93 = !DILocation(line: 43, column: 9, scope: !60)
!94 = !DILocation(line: 44, column: 24, scope: !60)
!95 = !DILocation(line: 44, column: 9, scope: !60)
!96 = !DILocation(line: 45, column: 20, scope: !60)
!97 = !DILocation(line: 45, column: 9, scope: !60)
!98 = !DILocation(line: 47, column: 1, scope: !35)
!99 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01_good", scope: !2, file: !2, line: 79, type: !36, scopeLine: 80, spFlags: DISPFlagDefinition, unit: !22)
!100 = !DILocation(line: 81, column: 5, scope: !99)
!101 = !DILocation(line: 82, column: 1, scope: !99)
!102 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 94, type: !103, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!103 = !DISubroutineType(types: !104)
!104 = !{!43, !43, !105}
!105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !106, size: 64)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!107 = !DILocalVariable(name: "argc", arg: 1, scope: !102, file: !2, line: 94, type: !43)
!108 = !DILocation(line: 94, column: 14, scope: !102)
!109 = !DILocalVariable(name: "argv", arg: 2, scope: !102, file: !2, line: 94, type: !105)
!110 = !DILocation(line: 94, column: 27, scope: !102)
!111 = !DILocation(line: 97, column: 22, scope: !102)
!112 = !DILocation(line: 97, column: 12, scope: !102)
!113 = !DILocation(line: 97, column: 5, scope: !102)
!114 = !DILocation(line: 99, column: 5, scope: !102)
!115 = !DILocation(line: 100, column: 5, scope: !102)
!116 = !DILocation(line: 101, column: 5, scope: !102)
!117 = !DILocation(line: 104, column: 5, scope: !102)
!118 = !DILocation(line: 105, column: 5, scope: !102)
!119 = !DILocation(line: 106, column: 5, scope: !102)
!120 = !DILocation(line: 108, column: 5, scope: !102)
!121 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 54, type: !36, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!122 = !DILocalVariable(name: "data", scope: !121, file: !2, line: 56, type: !40)
!123 = !DILocation(line: 56, column: 15, scope: !121)
!124 = !DILocalVariable(name: "dataBadBuffer", scope: !121, file: !2, line: 57, type: !46)
!125 = !DILocation(line: 57, column: 13, scope: !121)
!126 = !DILocalVariable(name: "dataGoodBuffer", scope: !121, file: !2, line: 58, type: !51)
!127 = !DILocation(line: 58, column: 13, scope: !121)
!128 = !DILocation(line: 60, column: 12, scope: !121)
!129 = !DILocation(line: 60, column: 10, scope: !121)
!130 = !DILocation(line: 61, column: 5, scope: !121)
!131 = !DILocation(line: 61, column: 13, scope: !121)
!132 = !DILocalVariable(name: "i", scope: !133, file: !2, line: 63, type: !61)
!133 = distinct !DILexicalBlock(scope: !121, file: !2, line: 62, column: 5)
!134 = !DILocation(line: 63, column: 16, scope: !133)
!135 = !DILocalVariable(name: "source", scope: !133, file: !2, line: 64, type: !51)
!136 = !DILocation(line: 64, column: 17, scope: !133)
!137 = !DILocation(line: 65, column: 17, scope: !133)
!138 = !DILocation(line: 65, column: 9, scope: !133)
!139 = !DILocation(line: 66, column: 9, scope: !133)
!140 = !DILocation(line: 66, column: 23, scope: !133)
!141 = !DILocation(line: 68, column: 16, scope: !142)
!142 = distinct !DILexicalBlock(scope: !133, file: !2, line: 68, column: 9)
!143 = !DILocation(line: 68, column: 14, scope: !142)
!144 = !DILocation(line: 68, column: 21, scope: !145)
!145 = distinct !DILexicalBlock(scope: !142, file: !2, line: 68, column: 9)
!146 = !DILocation(line: 68, column: 23, scope: !145)
!147 = !DILocation(line: 68, column: 9, scope: !142)
!148 = !DILocation(line: 70, column: 30, scope: !149)
!149 = distinct !DILexicalBlock(scope: !145, file: !2, line: 69, column: 9)
!150 = !DILocation(line: 70, column: 23, scope: !149)
!151 = !DILocation(line: 70, column: 13, scope: !149)
!152 = !DILocation(line: 70, column: 18, scope: !149)
!153 = !DILocation(line: 70, column: 21, scope: !149)
!154 = !DILocation(line: 71, column: 9, scope: !149)
!155 = !DILocation(line: 68, column: 31, scope: !145)
!156 = !DILocation(line: 68, column: 9, scope: !145)
!157 = distinct !{!157, !147, !158, !89}
!158 = !DILocation(line: 71, column: 9, scope: !142)
!159 = !DILocation(line: 72, column: 9, scope: !133)
!160 = !DILocation(line: 72, column: 21, scope: !133)
!161 = !DILocation(line: 73, column: 24, scope: !133)
!162 = !DILocation(line: 73, column: 9, scope: !133)
!163 = !DILocation(line: 74, column: 24, scope: !133)
!164 = !DILocation(line: 74, column: 9, scope: !133)
!165 = !DILocation(line: 75, column: 20, scope: !133)
!166 = !DILocation(line: 75, column: 9, scope: !133)
!167 = !DILocation(line: 77, column: 1, scope: !121)
