; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i32] [i32 37, i32 115, i32 0], align 4, !dbg !0
@.str.1 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !13
@.str.3 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !18
@.str.4 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !23

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_bad() #0 !dbg !45 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [100 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !49, metadata !DIExpression()), !dbg !50
  store ptr null, ptr %data, align 8, !dbg !51
  %call = call noalias ptr @malloc(i64 noundef 200) #6, !dbg !52
  store ptr %call, ptr %data, align 8, !dbg !53
  %0 = load ptr, ptr %data, align 8, !dbg !54
  %cmp = icmp eq ptr %0, null, !dbg !56
  br i1 %cmp, label %if.then, label %if.end, !dbg !57

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #7, !dbg !58
  unreachable, !dbg !58

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !60
  %arrayidx = getelementptr inbounds i32, ptr %1, i64 0, !dbg !60
  store i32 0, ptr %arrayidx, align 4, !dbg !61
  call void @llvm.dbg.declare(metadata ptr %source, metadata !62, metadata !DIExpression()), !dbg !67
  %arraydecay = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !68
  %call1 = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 67, i64 noundef 99) #8, !dbg !69
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !70
  store i32 0, ptr %arrayidx2, align 4, !dbg !71
  %2 = load ptr, ptr %data, align 8, !dbg !72
  %arraydecay3 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !73
  %call4 = call i32 (ptr, i64, ptr, ...) @swprintf(ptr noundef %2, i64 noundef 100, ptr noundef @.str, ptr noundef %arraydecay3) #8, !dbg !74
  %3 = load ptr, ptr %data, align 8, !dbg !75
  %call5 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %3, i64 noundef 399), !dbg !76
  %arraydecay6 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !77
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay6, i64 noundef 399), !dbg !78
  %4 = load ptr, ptr %data, align 8, !dbg !79
  call void @printWLine(ptr noundef %4), !dbg !80
  %5 = load ptr, ptr %data, align 8, !dbg !81
  call void @free(ptr noundef %5) #8, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #3

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #4

; Function Attrs: nounwind
declare i32 @swprintf(ptr noundef, i64 noundef, ptr noundef, ...) #4

declare i32 @UNSAFE_BUFACCESS(...) #5

declare i32 @SAFE_BUFACCESS(...) #5

declare void @printWLine(ptr noundef) #5

; Function Attrs: nounwind
declare void @free(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_good() #0 !dbg !84 {
entry:
  call void @goodG2B(), !dbg !85
  ret void, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !87 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !92, metadata !DIExpression()), !dbg !93
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %call = call i64 @time(ptr noundef null) #8, !dbg !96
  %conv = trunc i64 %call to i32, !dbg !97
  call void @srand(i32 noundef %conv) #8, !dbg !98
  call void @printLine(ptr noundef @.str.1), !dbg !99
  call void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_good(), !dbg !100
  call void @printLine(ptr noundef @.str.2), !dbg !101
  call void @printLine(ptr noundef @.str.3), !dbg !102
  call void @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_bad(), !dbg !103
  call void @printLine(ptr noundef @.str.4), !dbg !104
  ret i32 0, !dbg !105
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !106 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [100 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !107, metadata !DIExpression()), !dbg !108
  store ptr null, ptr %data, align 8, !dbg !109
  %call = call noalias ptr @malloc(i64 noundef 400) #6, !dbg !110
  store ptr %call, ptr %data, align 8, !dbg !111
  %0 = load ptr, ptr %data, align 8, !dbg !112
  %cmp = icmp eq ptr %0, null, !dbg !114
  br i1 %cmp, label %if.then, label %if.end, !dbg !115

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #7, !dbg !116
  unreachable, !dbg !116

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !118
  %arrayidx = getelementptr inbounds i32, ptr %1, i64 0, !dbg !118
  store i32 0, ptr %arrayidx, align 4, !dbg !119
  call void @llvm.dbg.declare(metadata ptr %source, metadata !120, metadata !DIExpression()), !dbg !122
  %arraydecay = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !123
  %call1 = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 67, i64 noundef 99) #8, !dbg !124
  %arrayidx2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !125
  store i32 0, ptr %arrayidx2, align 4, !dbg !126
  %2 = load ptr, ptr %data, align 8, !dbg !127
  %arraydecay3 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !128
  %call4 = call i32 (ptr, i64, ptr, ...) @swprintf(ptr noundef %2, i64 noundef 100, ptr noundef @.str, ptr noundef %arraydecay3) #8, !dbg !129
  %3 = load ptr, ptr %data, align 8, !dbg !130
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %3, i64 noundef 399), !dbg !131
  %arraydecay6 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !132
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay6, i64 noundef 399), !dbg !133
  %4 = load ptr, ptr %data, align 8, !dbg !134
  call void @printWLine(ptr noundef %4), !dbg !135
  %5 = load ptr, ptr %data, align 8, !dbg !136
  call void @free(ptr noundef %5) #8, !dbg !137
  ret void, !dbg !138
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!28}
!llvm.module.flags = !{!37, !38, !39, !40, !41, !42, !43}
!llvm.ident = !{!44}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 42, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "b252cf95367f0737fffb4dad814851c1")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 96, elements: !5)
!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!5 = !{!6}
!6 = !DISubrange(count: 3)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 96, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 144, elements: !11)
!10 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!11 = !{!12}
!12 = !DISubrange(count: 18)
!13 = !DIGlobalVariableExpression(var: !14, expr: !DIExpression())
!14 = distinct !DIGlobalVariable(scope: null, file: !2, line: 98, type: !15, isLocal: true, isDefinition: true)
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 128, elements: !16)
!16 = !{!17}
!17 = !DISubrange(count: 16)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(scope: null, file: !2, line: 101, type: !20, isLocal: true, isDefinition: true)
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 136, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 17)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(scope: null, file: !2, line: 103, type: !25, isLocal: true, isDefinition: true)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 120, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 15)
!28 = distinct !DICompileUnit(language: DW_LANG_C11, file: !29, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !30, globals: !36, splitDebugInlining: false, nameTableKind: None)
!29 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "b252cf95367f0737fffb4dad814851c1")
!30 = !{!31, !34, !35}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !33, line: 74, baseType: !4)
!33 = !DIFile(filename: "/opt/llvm/lib/clang/16/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "f95079da609b0e8f201cb8136304bf3b")
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!35 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!36 = !{!0, !7, !13, !18, !23}
!37 = !{i32 7, !"Dwarf Version", i32 5}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{i32 1, !"wchar_size", i32 4}
!40 = !{i32 8, !"PIC Level", i32 2}
!41 = !{i32 7, !"PIE Level", i32 2}
!42 = !{i32 7, !"uwtable", i32 2}
!43 = !{i32 7, !"frame-pointer", i32 2}
!44 = !{!"clang version 16.0.0"}
!45 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_bad", scope: !2, file: !2, line: 29, type: !46, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !48)
!46 = !DISubroutineType(types: !47)
!47 = !{null}
!48 = !{}
!49 = !DILocalVariable(name: "data", scope: !45, file: !2, line: 31, type: !31)
!50 = !DILocation(line: 31, column: 15, scope: !45)
!51 = !DILocation(line: 32, column: 10, scope: !45)
!52 = !DILocation(line: 34, column: 23, scope: !45)
!53 = !DILocation(line: 34, column: 10, scope: !45)
!54 = !DILocation(line: 35, column: 9, scope: !55)
!55 = distinct !DILexicalBlock(scope: !45, file: !2, line: 35, column: 9)
!56 = !DILocation(line: 35, column: 14, scope: !55)
!57 = !DILocation(line: 35, column: 9, scope: !45)
!58 = !DILocation(line: 35, column: 24, scope: !59)
!59 = distinct !DILexicalBlock(scope: !55, file: !2, line: 35, column: 23)
!60 = !DILocation(line: 36, column: 5, scope: !45)
!61 = !DILocation(line: 36, column: 13, scope: !45)
!62 = !DILocalVariable(name: "source", scope: !63, file: !2, line: 38, type: !64)
!63 = distinct !DILexicalBlock(scope: !45, file: !2, line: 37, column: 5)
!64 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 3200, elements: !65)
!65 = !{!66}
!66 = !DISubrange(count: 100)
!67 = !DILocation(line: 38, column: 17, scope: !63)
!68 = !DILocation(line: 39, column: 17, scope: !63)
!69 = !DILocation(line: 39, column: 9, scope: !63)
!70 = !DILocation(line: 40, column: 9, scope: !63)
!71 = !DILocation(line: 40, column: 23, scope: !63)
!72 = !DILocation(line: 42, column: 18, scope: !63)
!73 = !DILocation(line: 42, column: 36, scope: !63)
!74 = !DILocation(line: 42, column: 9, scope: !63)
!75 = !DILocation(line: 43, column: 26, scope: !63)
!76 = !DILocation(line: 43, column: 9, scope: !63)
!77 = !DILocation(line: 44, column: 24, scope: !63)
!78 = !DILocation(line: 44, column: 9, scope: !63)
!79 = !DILocation(line: 45, column: 20, scope: !63)
!80 = !DILocation(line: 45, column: 9, scope: !63)
!81 = !DILocation(line: 46, column: 14, scope: !63)
!82 = !DILocation(line: 46, column: 9, scope: !63)
!83 = !DILocation(line: 48, column: 1, scope: !45)
!84 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01_good", scope: !2, file: !2, line: 76, type: !46, scopeLine: 77, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !48)
!85 = !DILocation(line: 78, column: 5, scope: !84)
!86 = !DILocation(line: 79, column: 1, scope: !84)
!87 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 91, type: !88, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !48)
!88 = !DISubroutineType(types: !89)
!89 = !{!4, !4, !90}
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64)
!91 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!92 = !DILocalVariable(name: "argc", arg: 1, scope: !87, file: !2, line: 91, type: !4)
!93 = !DILocation(line: 91, column: 14, scope: !87)
!94 = !DILocalVariable(name: "argv", arg: 2, scope: !87, file: !2, line: 91, type: !90)
!95 = !DILocation(line: 91, column: 27, scope: !87)
!96 = !DILocation(line: 94, column: 22, scope: !87)
!97 = !DILocation(line: 94, column: 12, scope: !87)
!98 = !DILocation(line: 94, column: 5, scope: !87)
!99 = !DILocation(line: 96, column: 5, scope: !87)
!100 = !DILocation(line: 97, column: 5, scope: !87)
!101 = !DILocation(line: 98, column: 5, scope: !87)
!102 = !DILocation(line: 101, column: 5, scope: !87)
!103 = !DILocation(line: 102, column: 5, scope: !87)
!104 = !DILocation(line: 103, column: 5, scope: !87)
!105 = !DILocation(line: 105, column: 5, scope: !87)
!106 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 55, type: !46, scopeLine: 56, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !28, retainedNodes: !48)
!107 = !DILocalVariable(name: "data", scope: !106, file: !2, line: 57, type: !31)
!108 = !DILocation(line: 57, column: 15, scope: !106)
!109 = !DILocation(line: 58, column: 10, scope: !106)
!110 = !DILocation(line: 60, column: 23, scope: !106)
!111 = !DILocation(line: 60, column: 10, scope: !106)
!112 = !DILocation(line: 61, column: 9, scope: !113)
!113 = distinct !DILexicalBlock(scope: !106, file: !2, line: 61, column: 9)
!114 = !DILocation(line: 61, column: 14, scope: !113)
!115 = !DILocation(line: 61, column: 9, scope: !106)
!116 = !DILocation(line: 61, column: 24, scope: !117)
!117 = distinct !DILexicalBlock(scope: !113, file: !2, line: 61, column: 23)
!118 = !DILocation(line: 62, column: 5, scope: !106)
!119 = !DILocation(line: 62, column: 13, scope: !106)
!120 = !DILocalVariable(name: "source", scope: !121, file: !2, line: 64, type: !64)
!121 = distinct !DILexicalBlock(scope: !106, file: !2, line: 63, column: 5)
!122 = !DILocation(line: 64, column: 17, scope: !121)
!123 = !DILocation(line: 65, column: 17, scope: !121)
!124 = !DILocation(line: 65, column: 9, scope: !121)
!125 = !DILocation(line: 66, column: 9, scope: !121)
!126 = !DILocation(line: 66, column: 23, scope: !121)
!127 = !DILocation(line: 68, column: 18, scope: !121)
!128 = !DILocation(line: 68, column: 36, scope: !121)
!129 = !DILocation(line: 68, column: 9, scope: !121)
!130 = !DILocation(line: 69, column: 24, scope: !121)
!131 = !DILocation(line: 69, column: 9, scope: !121)
!132 = !DILocation(line: 70, column: 24, scope: !121)
!133 = !DILocation(line: 70, column: 9, scope: !121)
!134 = !DILocation(line: 71, column: 20, scope: !121)
!135 = !DILocation(line: 71, column: 9, scope: !121)
!136 = !DILocation(line: 72, column: 14, scope: !121)
!137 = !DILocation(line: 72, column: 9, scope: !121)
!138 = !DILocation(line: 74, column: 1, scope: !106)
