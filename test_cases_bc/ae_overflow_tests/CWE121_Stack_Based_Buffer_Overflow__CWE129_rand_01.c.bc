; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [32 x i8] c"ERROR: Array index is negative.\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !22
@.str.5 = private unnamed_addr constant [36 x i8] c"ERROR: Array index is out-of-bounds\00", align 1, !dbg !27

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad() #0 !dbg !46 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !50, metadata !DIExpression()), !dbg !51
  store i32 -1, ptr %data, align 4, !dbg !52
  %call = call i32 @rand() #5, !dbg !53
  %and = and i32 %call, 1, !dbg !53
  %tobool = icmp ne i32 %and, 0, !dbg !53
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !53

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #5, !dbg !53
  %shl = shl i32 %call1, 30, !dbg !53
  %call2 = call i32 @rand() #5, !dbg !53
  %shl3 = shl i32 %call2, 15, !dbg !53
  %xor = xor i32 %shl, %shl3, !dbg !53
  %call4 = call i32 @rand() #5, !dbg !53
  %xor5 = xor i32 %xor, %call4, !dbg !53
  br label %cond.end, !dbg !53

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #5, !dbg !53
  %shl7 = shl i32 %call6, 30, !dbg !53
  %call8 = call i32 @rand() #5, !dbg !53
  %shl9 = shl i32 %call8, 15, !dbg !53
  %xor10 = xor i32 %shl7, %shl9, !dbg !53
  %call11 = call i32 @rand() #5, !dbg !53
  %xor12 = xor i32 %xor10, %call11, !dbg !53
  %sub = sub i32 0, %xor12, !dbg !53
  %sub13 = sub i32 %sub, 1, !dbg !53
  br label %cond.end, !dbg !53

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ], !dbg !53
  store i32 %cond, ptr %data, align 4, !dbg !54
  call void @llvm.dbg.declare(metadata ptr %i, metadata !55, metadata !DIExpression()), !dbg !57
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !58, metadata !DIExpression()), !dbg !62
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !62
  %0 = load i32, ptr %data, align 4, !dbg !63
  %cmp = icmp sge i32 %0, 0, !dbg !65
  br i1 %cmp, label %if.then, label %if.else, !dbg !66

if.then:                                          ; preds = %cond.end
  %1 = load i32, ptr %data, align 4, !dbg !67
  %idxprom = sext i32 %1 to i64, !dbg !69
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !69
  store i32 1, ptr %arrayidx, align 4, !dbg !70
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0, !dbg !71
  %2 = load i32, ptr %data, align 4, !dbg !72
  %conv = sext i32 %2 to i64, !dbg !72
  %mul = mul i64 %conv, 4, !dbg !73
  %sub14 = sub i64 %mul, 1, !dbg !74
  %call15 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub14), !dbg !75
  store i32 0, ptr %i, align 4, !dbg !76
  br label %for.cond, !dbg !78

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !79
  %cmp16 = icmp slt i32 %3, 10, !dbg !81
  br i1 %cmp16, label %for.body, label %for.end, !dbg !82

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !83
  %idxprom18 = sext i32 %4 to i64, !dbg !85
  %arrayidx19 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom18, !dbg !85
  %5 = load i32, ptr %arrayidx19, align 4, !dbg !85
  call void @printIntLine(i32 noundef %5), !dbg !86
  br label %for.inc, !dbg !87

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !88
  %inc = add nsw i32 %6, 1, !dbg !88
  store i32 %inc, ptr %i, align 4, !dbg !88
  br label %for.cond, !dbg !89, !llvm.loop !90

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !93

if.else:                                          ; preds = %cond.end
  call void @printLine(ptr noundef @.str), !dbg !94
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !96
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i32 @rand() #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

declare i32 @UNSAFE_BUFACCESS(...) #4

declare void @printIntLine(i32 noundef) #4

declare void @printLine(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good() #0 !dbg !97 {
entry:
  call void @goodG2B(), !dbg !98
  call void @goodB2G(), !dbg !99
  ret void, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !101 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !106, metadata !DIExpression()), !dbg !107
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %call = call i64 @time(ptr noundef null) #5, !dbg !110
  %conv = trunc i64 %call to i32, !dbg !111
  call void @srand(i32 noundef %conv) #5, !dbg !112
  call void @printLine(ptr noundef @.str.1), !dbg !113
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good(), !dbg !114
  call void @printLine(ptr noundef @.str.2), !dbg !115
  call void @printLine(ptr noundef @.str.3), !dbg !116
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad(), !dbg !117
  call void @printLine(ptr noundef @.str.4), !dbg !118
  ret i32 0, !dbg !119
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #2

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !120 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !121, metadata !DIExpression()), !dbg !122
  store i32 -1, ptr %data, align 4, !dbg !123
  store i32 7, ptr %data, align 4, !dbg !124
  call void @llvm.dbg.declare(metadata ptr %i, metadata !125, metadata !DIExpression()), !dbg !127
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !128, metadata !DIExpression()), !dbg !129
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !129
  %0 = load i32, ptr %data, align 4, !dbg !130
  %cmp = icmp sge i32 %0, 0, !dbg !132
  br i1 %cmp, label %if.then, label %if.else, !dbg !133

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %data, align 4, !dbg !134
  %idxprom = sext i32 %1 to i64, !dbg !136
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !136
  store i32 1, ptr %arrayidx, align 4, !dbg !137
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0, !dbg !138
  %2 = load i32, ptr %data, align 4, !dbg !139
  %conv = sext i32 %2 to i64, !dbg !139
  %mul = mul i64 %conv, 4, !dbg !140
  %sub = sub i64 %mul, 1, !dbg !141
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub), !dbg !142
  store i32 0, ptr %i, align 4, !dbg !143
  br label %for.cond, !dbg !145

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !146
  %cmp1 = icmp slt i32 %3, 10, !dbg !148
  br i1 %cmp1, label %for.body, label %for.end, !dbg !149

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !150
  %idxprom3 = sext i32 %4 to i64, !dbg !152
  %arrayidx4 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom3, !dbg !152
  %5 = load i32, ptr %arrayidx4, align 4, !dbg !152
  call void @printIntLine(i32 noundef %5), !dbg !153
  br label %for.inc, !dbg !154

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !155
  %inc = add nsw i32 %6, 1, !dbg !155
  store i32 %inc, ptr %i, align 4, !dbg !155
  br label %for.cond, !dbg !156, !llvm.loop !157

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !159

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str), !dbg !160
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !162
}

declare i32 @SAFE_BUFACCESS(...) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !163 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !164, metadata !DIExpression()), !dbg !165
  store i32 -1, ptr %data, align 4, !dbg !166
  %call = call i32 @rand() #5, !dbg !167
  %and = and i32 %call, 1, !dbg !167
  %tobool = icmp ne i32 %and, 0, !dbg !167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !167

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #5, !dbg !167
  %shl = shl i32 %call1, 30, !dbg !167
  %call2 = call i32 @rand() #5, !dbg !167
  %shl3 = shl i32 %call2, 15, !dbg !167
  %xor = xor i32 %shl, %shl3, !dbg !167
  %call4 = call i32 @rand() #5, !dbg !167
  %xor5 = xor i32 %xor, %call4, !dbg !167
  br label %cond.end, !dbg !167

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #5, !dbg !167
  %shl7 = shl i32 %call6, 30, !dbg !167
  %call8 = call i32 @rand() #5, !dbg !167
  %shl9 = shl i32 %call8, 15, !dbg !167
  %xor10 = xor i32 %shl7, %shl9, !dbg !167
  %call11 = call i32 @rand() #5, !dbg !167
  %xor12 = xor i32 %xor10, %call11, !dbg !167
  %sub = sub i32 0, %xor12, !dbg !167
  %sub13 = sub i32 %sub, 1, !dbg !167
  br label %cond.end, !dbg !167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ], !dbg !167
  store i32 %cond, ptr %data, align 4, !dbg !168
  call void @llvm.dbg.declare(metadata ptr %i, metadata !169, metadata !DIExpression()), !dbg !171
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !172, metadata !DIExpression()), !dbg !173
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !173
  %0 = load i32, ptr %data, align 4, !dbg !174
  %cmp = icmp sge i32 %0, 0, !dbg !176
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !177

land.lhs.true:                                    ; preds = %cond.end
  %1 = load i32, ptr %data, align 4, !dbg !178
  %cmp14 = icmp slt i32 %1, 10, !dbg !179
  br i1 %cmp14, label %if.then, label %if.else, !dbg !180

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, ptr %data, align 4, !dbg !181
  %idxprom = sext i32 %2 to i64, !dbg !183
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !183
  store i32 1, ptr %arrayidx, align 4, !dbg !184
  store i32 0, ptr %i, align 4, !dbg !185
  br label %for.cond, !dbg !187

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !188
  %cmp15 = icmp slt i32 %3, 10, !dbg !190
  br i1 %cmp15, label %for.body, label %for.end, !dbg !191

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !192
  %idxprom16 = sext i32 %4 to i64, !dbg !194
  %arrayidx17 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom16, !dbg !194
  %5 = load i32, ptr %arrayidx17, align 4, !dbg !194
  call void @printIntLine(i32 noundef %5), !dbg !195
  br label %for.inc, !dbg !196

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !197
  %inc = add nsw i32 %6, 1, !dbg !197
  store i32 %inc, ptr %i, align 4, !dbg !197
  br label %for.cond, !dbg !198, !llvm.loop !199

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !201

if.else:                                          ; preds = %land.lhs.true, %cond.end
  call void @printLine(ptr noundef @.str.5), !dbg !202
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !204
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!32}
!llvm.module.flags = !{!38, !39, !40, !41, !42, !43, !44}
!llvm.ident = !{!45}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 46, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e5852ff29d1c45739e0474f9559a77e5")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 256, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 32)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 134, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 18)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 136, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 16)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 139, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 17)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(scope: null, file: !2, line: 141, type: !24, isLocal: true, isDefinition: true)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 15)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !2, line: 109, type: !29, isLocal: true, isDefinition: true)
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 288, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 36)
!32 = distinct !DICompileUnit(language: DW_LANG_C11, file: !33, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !34, globals: !37, splitDebugInlining: false, nameTableKind: None)
!33 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "e5852ff29d1c45739e0474f9559a77e5")
!34 = !{!35, !36}
!35 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!36 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!37 = !{!0, !7, !12, !17, !22, !27}
!38 = !{i32 7, !"Dwarf Version", i32 5}
!39 = !{i32 2, !"Debug Info Version", i32 3}
!40 = !{i32 1, !"wchar_size", i32 4}
!41 = !{i32 8, !"PIC Level", i32 2}
!42 = !{i32 7, !"PIE Level", i32 2}
!43 = !{i32 7, !"uwtable", i32 2}
!44 = !{i32 7, !"frame-pointer", i32 2}
!45 = !{!"clang version 16.0.0"}
!46 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad", scope: !2, file: !2, line: 22, type: !47, scopeLine: 23, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !49)
!47 = !DISubroutineType(types: !48)
!48 = !{null}
!49 = !{}
!50 = !DILocalVariable(name: "data", scope: !46, file: !2, line: 24, type: !35)
!51 = !DILocation(line: 24, column: 9, scope: !46)
!52 = !DILocation(line: 26, column: 10, scope: !46)
!53 = !DILocation(line: 28, column: 12, scope: !46)
!54 = !DILocation(line: 28, column: 10, scope: !46)
!55 = !DILocalVariable(name: "i", scope: !56, file: !2, line: 30, type: !35)
!56 = distinct !DILexicalBlock(scope: !46, file: !2, line: 29, column: 5)
!57 = !DILocation(line: 30, column: 13, scope: !56)
!58 = !DILocalVariable(name: "buffer", scope: !56, file: !2, line: 31, type: !59)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !35, size: 320, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 10)
!62 = !DILocation(line: 31, column: 13, scope: !56)
!63 = !DILocation(line: 34, column: 13, scope: !64)
!64 = distinct !DILexicalBlock(scope: !56, file: !2, line: 34, column: 13)
!65 = !DILocation(line: 34, column: 18, scope: !64)
!66 = !DILocation(line: 34, column: 13, scope: !56)
!67 = !DILocation(line: 36, column: 20, scope: !68)
!68 = distinct !DILexicalBlock(scope: !64, file: !2, line: 35, column: 9)
!69 = !DILocation(line: 36, column: 13, scope: !68)
!70 = !DILocation(line: 36, column: 26, scope: !68)
!71 = !DILocation(line: 37, column: 30, scope: !68)
!72 = !DILocation(line: 37, column: 38, scope: !68)
!73 = !DILocation(line: 37, column: 43, scope: !68)
!74 = !DILocation(line: 37, column: 57, scope: !68)
!75 = !DILocation(line: 37, column: 13, scope: !68)
!76 = !DILocation(line: 39, column: 19, scope: !77)
!77 = distinct !DILexicalBlock(scope: !68, file: !2, line: 39, column: 13)
!78 = !DILocation(line: 39, column: 17, scope: !77)
!79 = !DILocation(line: 39, column: 24, scope: !80)
!80 = distinct !DILexicalBlock(scope: !77, file: !2, line: 39, column: 13)
!81 = !DILocation(line: 39, column: 26, scope: !80)
!82 = !DILocation(line: 39, column: 13, scope: !77)
!83 = !DILocation(line: 41, column: 37, scope: !84)
!84 = distinct !DILexicalBlock(scope: !80, file: !2, line: 40, column: 13)
!85 = !DILocation(line: 41, column: 30, scope: !84)
!86 = !DILocation(line: 41, column: 17, scope: !84)
!87 = !DILocation(line: 42, column: 13, scope: !84)
!88 = !DILocation(line: 39, column: 33, scope: !80)
!89 = !DILocation(line: 39, column: 13, scope: !80)
!90 = distinct !{!90, !82, !91, !92}
!91 = !DILocation(line: 42, column: 13, scope: !77)
!92 = !{!"llvm.loop.mustprogress"}
!93 = !DILocation(line: 43, column: 9, scope: !68)
!94 = !DILocation(line: 46, column: 13, scope: !95)
!95 = distinct !DILexicalBlock(scope: !64, file: !2, line: 45, column: 9)
!96 = !DILocation(line: 49, column: 1, scope: !46)
!97 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good", scope: !2, file: !2, line: 114, type: !47, scopeLine: 115, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !49)
!98 = !DILocation(line: 116, column: 5, scope: !97)
!99 = !DILocation(line: 117, column: 5, scope: !97)
!100 = !DILocation(line: 118, column: 1, scope: !97)
!101 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 129, type: !102, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !49)
!102 = !DISubroutineType(types: !103)
!103 = !{!35, !35, !104}
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64)
!105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!106 = !DILocalVariable(name: "argc", arg: 1, scope: !101, file: !2, line: 129, type: !35)
!107 = !DILocation(line: 129, column: 14, scope: !101)
!108 = !DILocalVariable(name: "argv", arg: 2, scope: !101, file: !2, line: 129, type: !104)
!109 = !DILocation(line: 129, column: 27, scope: !101)
!110 = !DILocation(line: 132, column: 22, scope: !101)
!111 = !DILocation(line: 132, column: 12, scope: !101)
!112 = !DILocation(line: 132, column: 5, scope: !101)
!113 = !DILocation(line: 134, column: 5, scope: !101)
!114 = !DILocation(line: 135, column: 5, scope: !101)
!115 = !DILocation(line: 136, column: 5, scope: !101)
!116 = !DILocation(line: 139, column: 5, scope: !101)
!117 = !DILocation(line: 140, column: 5, scope: !101)
!118 = !DILocation(line: 141, column: 5, scope: !101)
!119 = !DILocation(line: 143, column: 5, scope: !101)
!120 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 56, type: !47, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !32, retainedNodes: !49)
!121 = !DILocalVariable(name: "data", scope: !120, file: !2, line: 58, type: !35)
!122 = !DILocation(line: 58, column: 9, scope: !120)
!123 = !DILocation(line: 60, column: 10, scope: !120)
!124 = !DILocation(line: 63, column: 10, scope: !120)
!125 = !DILocalVariable(name: "i", scope: !126, file: !2, line: 65, type: !35)
!126 = distinct !DILexicalBlock(scope: !120, file: !2, line: 64, column: 5)
!127 = !DILocation(line: 65, column: 13, scope: !126)
!128 = !DILocalVariable(name: "buffer", scope: !126, file: !2, line: 66, type: !59)
!129 = !DILocation(line: 66, column: 13, scope: !126)
!130 = !DILocation(line: 69, column: 13, scope: !131)
!131 = distinct !DILexicalBlock(scope: !126, file: !2, line: 69, column: 13)
!132 = !DILocation(line: 69, column: 18, scope: !131)
!133 = !DILocation(line: 69, column: 13, scope: !126)
!134 = !DILocation(line: 71, column: 20, scope: !135)
!135 = distinct !DILexicalBlock(scope: !131, file: !2, line: 70, column: 9)
!136 = !DILocation(line: 71, column: 13, scope: !135)
!137 = !DILocation(line: 71, column: 26, scope: !135)
!138 = !DILocation(line: 72, column: 28, scope: !135)
!139 = !DILocation(line: 72, column: 36, scope: !135)
!140 = !DILocation(line: 72, column: 41, scope: !135)
!141 = !DILocation(line: 72, column: 55, scope: !135)
!142 = !DILocation(line: 72, column: 13, scope: !135)
!143 = !DILocation(line: 74, column: 19, scope: !144)
!144 = distinct !DILexicalBlock(scope: !135, file: !2, line: 74, column: 13)
!145 = !DILocation(line: 74, column: 17, scope: !144)
!146 = !DILocation(line: 74, column: 24, scope: !147)
!147 = distinct !DILexicalBlock(scope: !144, file: !2, line: 74, column: 13)
!148 = !DILocation(line: 74, column: 26, scope: !147)
!149 = !DILocation(line: 74, column: 13, scope: !144)
!150 = !DILocation(line: 76, column: 37, scope: !151)
!151 = distinct !DILexicalBlock(scope: !147, file: !2, line: 75, column: 13)
!152 = !DILocation(line: 76, column: 30, scope: !151)
!153 = !DILocation(line: 76, column: 17, scope: !151)
!154 = !DILocation(line: 77, column: 13, scope: !151)
!155 = !DILocation(line: 74, column: 33, scope: !147)
!156 = !DILocation(line: 74, column: 13, scope: !147)
!157 = distinct !{!157, !149, !158, !92}
!158 = !DILocation(line: 77, column: 13, scope: !144)
!159 = !DILocation(line: 78, column: 9, scope: !135)
!160 = !DILocation(line: 81, column: 13, scope: !161)
!161 = distinct !DILexicalBlock(scope: !131, file: !2, line: 80, column: 9)
!162 = !DILocation(line: 84, column: 1, scope: !120)
!163 = distinct !DISubprogram(name: "goodB2G", scope: !2, file: !2, line: 87, type: !47, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !32, retainedNodes: !49)
!164 = !DILocalVariable(name: "data", scope: !163, file: !2, line: 89, type: !35)
!165 = !DILocation(line: 89, column: 9, scope: !163)
!166 = !DILocation(line: 91, column: 10, scope: !163)
!167 = !DILocation(line: 93, column: 12, scope: !163)
!168 = !DILocation(line: 93, column: 10, scope: !163)
!169 = !DILocalVariable(name: "i", scope: !170, file: !2, line: 95, type: !35)
!170 = distinct !DILexicalBlock(scope: !163, file: !2, line: 94, column: 5)
!171 = !DILocation(line: 95, column: 13, scope: !170)
!172 = !DILocalVariable(name: "buffer", scope: !170, file: !2, line: 96, type: !59)
!173 = !DILocation(line: 96, column: 13, scope: !170)
!174 = !DILocation(line: 98, column: 13, scope: !175)
!175 = distinct !DILexicalBlock(scope: !170, file: !2, line: 98, column: 13)
!176 = !DILocation(line: 98, column: 18, scope: !175)
!177 = !DILocation(line: 98, column: 23, scope: !175)
!178 = !DILocation(line: 98, column: 26, scope: !175)
!179 = !DILocation(line: 98, column: 31, scope: !175)
!180 = !DILocation(line: 98, column: 13, scope: !170)
!181 = !DILocation(line: 100, column: 20, scope: !182)
!182 = distinct !DILexicalBlock(scope: !175, file: !2, line: 99, column: 9)
!183 = !DILocation(line: 100, column: 13, scope: !182)
!184 = !DILocation(line: 100, column: 26, scope: !182)
!185 = !DILocation(line: 102, column: 19, scope: !186)
!186 = distinct !DILexicalBlock(scope: !182, file: !2, line: 102, column: 13)
!187 = !DILocation(line: 102, column: 17, scope: !186)
!188 = !DILocation(line: 102, column: 24, scope: !189)
!189 = distinct !DILexicalBlock(scope: !186, file: !2, line: 102, column: 13)
!190 = !DILocation(line: 102, column: 26, scope: !189)
!191 = !DILocation(line: 102, column: 13, scope: !186)
!192 = !DILocation(line: 104, column: 37, scope: !193)
!193 = distinct !DILexicalBlock(scope: !189, file: !2, line: 103, column: 13)
!194 = !DILocation(line: 104, column: 30, scope: !193)
!195 = !DILocation(line: 104, column: 17, scope: !193)
!196 = !DILocation(line: 105, column: 13, scope: !193)
!197 = !DILocation(line: 102, column: 33, scope: !189)
!198 = !DILocation(line: 102, column: 13, scope: !189)
!199 = distinct !{!199, !191, !200, !92}
!200 = !DILocation(line: 105, column: 13, scope: !186)
!201 = !DILocation(line: 106, column: 9, scope: !182)
!202 = !DILocation(line: 109, column: 13, scope: !203)
!203 = distinct !DILexicalBlock(scope: !175, file: !2, line: 108, column: 9)
!204 = !DILocation(line: 112, column: 1, scope: !163)
