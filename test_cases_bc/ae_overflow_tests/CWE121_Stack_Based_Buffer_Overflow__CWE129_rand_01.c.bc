; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [32 x i8] c"ERROR: Array index is negative.\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"ERROR: Array index is out-of-bounds\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad() #0 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  %call = call i32 @rand() #4
  %and = and i32 %call, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #4
  %shl = shl i32 %call1, 30
  %call2 = call i32 @rand() #4
  %shl3 = shl i32 %call2, 15
  %xor = xor i32 %shl, %shl3
  %call4 = call i32 @rand() #4
  %xor5 = xor i32 %xor, %call4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #4
  %shl7 = shl i32 %call6, 30
  %call8 = call i32 @rand() #4
  %shl9 = shl i32 %call8, 15
  %xor10 = xor i32 %shl7, %shl9
  %call11 = call i32 @rand() #4
  %xor12 = xor i32 %xor10, %call11
  %sub = sub i32 0, %xor12
  %sub13 = sub i32 %sub, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ]
  store i32 %cond, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %0 = load i32, ptr %data, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %1 = load i32, ptr %data, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %2 = load i32, ptr %data, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 4
  %sub14 = sub i64 %mul, 1
  %call15 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub14)
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4
  %cmp16 = icmp slt i32 %3, 10
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4
  %idxprom18 = sext i32 %4 to i64
  %arrayidx19 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom18
  %5 = load i32, ptr %arrayidx19, align 4
  call void @printIntLine(i32 noundef %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %cond.end
  call void @printLine(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void
}

; Function Attrs: nounwind
declare i32 @rand() #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare void @printIntLine(i32 noundef) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good() #0 {
entry:
  call void @goodG2B()
  call void @goodB2G()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  store i32 7, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %0 = load i32, ptr %data, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %data, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %2 = load i32, ptr %data, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 4
  %sub = sub i64 %mul, 1
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub)
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4
  %cmp1 = icmp slt i32 %3, 10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom3
  %5 = load i32, ptr %arrayidx4, align 4
  call void @printIntLine(i32 noundef %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void
}

declare i32 @SAFE_BUFACCESS(...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  %call = call i32 @rand() #4
  %and = and i32 %call, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #4
  %shl = shl i32 %call1, 30
  %call2 = call i32 @rand() #4
  %shl3 = shl i32 %call2, 15
  %xor = xor i32 %shl, %shl3
  %call4 = call i32 @rand() #4
  %xor5 = xor i32 %xor, %call4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #4
  %shl7 = shl i32 %call6, 30
  %call8 = call i32 @rand() #4
  %shl9 = shl i32 %call8, 15
  %xor10 = xor i32 %shl7, %shl9
  %call11 = call i32 @rand() #4
  %xor12 = xor i32 %xor10, %call11
  %sub = sub i32 0, %xor12
  %sub13 = sub i32 %sub, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ]
  store i32 %cond, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %0 = load i32, ptr %data, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end
  %1 = load i32, ptr %data, align 4
  %cmp14 = icmp slt i32 %1, 10
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, ptr %data, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4
  %cmp15 = icmp slt i32 %3, 10
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4
  %idxprom16 = sext i32 %4 to i64
  %arrayidx17 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom16
  %5 = load i32, ptr %arrayidx17, align 4
  call void @printIntLine(i32 noundef %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !9

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %cond.end
  call void @printLine(ptr noundef @.str.1)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
