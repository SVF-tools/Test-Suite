; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [32 x i8] c"ERROR: Array index is negative.\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !17
@.str.4 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !22
@.str.5 = private unnamed_addr constant [36 x i8] c"ERROR: Array index is out-of-bounds\00", align 1, !dbg !27

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad() #0 !dbg !46 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
    #dbg_declare(ptr %data, !50, !DIExpression(), !51)
  store i32 -1, ptr %data, align 4, !dbg !52
  %call = call i32 @rand() #4, !dbg !53
  %and = and i32 %call, 1, !dbg !53
  %tobool = icmp ne i32 %and, 0, !dbg !53
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !53

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #4, !dbg !53
  %shl = shl i32 %call1, 30, !dbg !53
  %call2 = call i32 @rand() #4, !dbg !53
  %shl3 = shl i32 %call2, 15, !dbg !53
  %xor = xor i32 %shl, %shl3, !dbg !53
  %call4 = call i32 @rand() #4, !dbg !53
  %xor5 = xor i32 %xor, %call4, !dbg !53
  br label %cond.end, !dbg !53

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #4, !dbg !53
  %shl7 = shl i32 %call6, 30, !dbg !53
  %call8 = call i32 @rand() #4, !dbg !53
  %shl9 = shl i32 %call8, 15, !dbg !53
  %xor10 = xor i32 %shl7, %shl9, !dbg !53
  %call11 = call i32 @rand() #4, !dbg !53
  %xor12 = xor i32 %xor10, %call11, !dbg !53
  %sub = sub i32 0, %xor12, !dbg !53
  %sub13 = sub i32 %sub, 1, !dbg !53
  br label %cond.end, !dbg !53

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ], !dbg !53
  store i32 %cond, ptr %data, align 4, !dbg !54
    #dbg_declare(ptr %i, !55, !DIExpression(), !57)
    #dbg_declare(ptr %buffer, !58, !DIExpression(), !62)
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !62
  %0 = load i32, ptr %data, align 4, !dbg !63
  %cmp = icmp sge i32 %0, 0, !dbg !65
  br i1 %cmp, label %if.then, label %if.else, !dbg !65

if.then:                                          ; preds = %cond.end
  %1 = load i32, ptr %data, align 4, !dbg !66
  %idxprom = sext i32 %1 to i64, !dbg !68
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !68
  store i32 1, ptr %arrayidx, align 4, !dbg !69
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0, !dbg !70
  %2 = load i32, ptr %data, align 4, !dbg !71
  %conv = sext i32 %2 to i64, !dbg !71
  %mul = mul i64 %conv, 4, !dbg !72
  %sub14 = sub i64 %mul, 1, !dbg !73
  %call15 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub14), !dbg !74
  store i32 0, ptr %i, align 4, !dbg !75
  br label %for.cond, !dbg !77

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !78
  %cmp16 = icmp slt i32 %3, 10, !dbg !80
  br i1 %cmp16, label %for.body, label %for.end, !dbg !81

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !82
  %idxprom18 = sext i32 %4 to i64, !dbg !84
  %arrayidx19 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom18, !dbg !84
  %5 = load i32, ptr %arrayidx19, align 4, !dbg !84
  call void @printIntLine(i32 noundef %5), !dbg !85
  br label %for.inc, !dbg !86

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !87
  %inc = add nsw i32 %6, 1, !dbg !87
  store i32 %inc, ptr %i, align 4, !dbg !87
  br label %for.cond, !dbg !88, !llvm.loop !89

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !92

if.else:                                          ; preds = %cond.end
  call void @printLine(ptr noundef @.str), !dbg !93
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !95
}

; Function Attrs: nounwind
declare i32 @rand() #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare void @printIntLine(i32 noundef) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good() #0 !dbg !96 {
entry:
  call void @goodG2B(), !dbg !97
  call void @goodB2G(), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !100 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !105, !DIExpression(), !106)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !107, !DIExpression(), !108)
  %call = call i64 @time(ptr noundef null) #4, !dbg !109
  %conv = trunc i64 %call to i32, !dbg !110
  call void @srand(i32 noundef %conv) #4, !dbg !111
  call void @printLine(ptr noundef @.str.1), !dbg !112
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good(), !dbg !113
  call void @printLine(ptr noundef @.str.2), !dbg !114
  call void @printLine(ptr noundef @.str.3), !dbg !115
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad(), !dbg !116
  call void @printLine(ptr noundef @.str.4), !dbg !117
  ret i32 0, !dbg !118
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !119 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
    #dbg_declare(ptr %data, !120, !DIExpression(), !121)
  store i32 -1, ptr %data, align 4, !dbg !122
  store i32 7, ptr %data, align 4, !dbg !123
    #dbg_declare(ptr %i, !124, !DIExpression(), !126)
    #dbg_declare(ptr %buffer, !127, !DIExpression(), !128)
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !128
  %0 = load i32, ptr %data, align 4, !dbg !129
  %cmp = icmp sge i32 %0, 0, !dbg !131
  br i1 %cmp, label %if.then, label %if.else, !dbg !131

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %data, align 4, !dbg !132
  %idxprom = sext i32 %1 to i64, !dbg !134
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !134
  store i32 1, ptr %arrayidx, align 4, !dbg !135
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0, !dbg !136
  %2 = load i32, ptr %data, align 4, !dbg !137
  %conv = sext i32 %2 to i64, !dbg !137
  %mul = mul i64 %conv, 4, !dbg !138
  %sub = sub i64 %mul, 1, !dbg !139
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub), !dbg !140
  store i32 0, ptr %i, align 4, !dbg !141
  br label %for.cond, !dbg !143

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !144
  %cmp1 = icmp slt i32 %3, 10, !dbg !146
  br i1 %cmp1, label %for.body, label %for.end, !dbg !147

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !148
  %idxprom3 = sext i32 %4 to i64, !dbg !150
  %arrayidx4 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom3, !dbg !150
  %5 = load i32, ptr %arrayidx4, align 4, !dbg !150
  call void @printIntLine(i32 noundef %5), !dbg !151
  br label %for.inc, !dbg !152

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !153
  %inc = add nsw i32 %6, 1, !dbg !153
  store i32 %inc, ptr %i, align 4, !dbg !153
  br label %for.cond, !dbg !154, !llvm.loop !155

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !157

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str), !dbg !158
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !160
}

declare i32 @SAFE_BUFACCESS(...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 !dbg !161 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
    #dbg_declare(ptr %data, !162, !DIExpression(), !163)
  store i32 -1, ptr %data, align 4, !dbg !164
  %call = call i32 @rand() #4, !dbg !165
  %and = and i32 %call, 1, !dbg !165
  %tobool = icmp ne i32 %and, 0, !dbg !165
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !165

cond.true:                                        ; preds = %entry
  %call1 = call i32 @rand() #4, !dbg !165
  %shl = shl i32 %call1, 30, !dbg !165
  %call2 = call i32 @rand() #4, !dbg !165
  %shl3 = shl i32 %call2, 15, !dbg !165
  %xor = xor i32 %shl, %shl3, !dbg !165
  %call4 = call i32 @rand() #4, !dbg !165
  %xor5 = xor i32 %xor, %call4, !dbg !165
  br label %cond.end, !dbg !165

cond.false:                                       ; preds = %entry
  %call6 = call i32 @rand() #4, !dbg !165
  %shl7 = shl i32 %call6, 30, !dbg !165
  %call8 = call i32 @rand() #4, !dbg !165
  %shl9 = shl i32 %call8, 15, !dbg !165
  %xor10 = xor i32 %shl7, %shl9, !dbg !165
  %call11 = call i32 @rand() #4, !dbg !165
  %xor12 = xor i32 %xor10, %call11, !dbg !165
  %sub = sub i32 0, %xor12, !dbg !165
  %sub13 = sub i32 %sub, 1, !dbg !165
  br label %cond.end, !dbg !165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %xor5, %cond.true ], [ %sub13, %cond.false ], !dbg !165
  store i32 %cond, ptr %data, align 4, !dbg !166
    #dbg_declare(ptr %i, !167, !DIExpression(), !169)
    #dbg_declare(ptr %buffer, !170, !DIExpression(), !171)
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false), !dbg !171
  %0 = load i32, ptr %data, align 4, !dbg !172
  %cmp = icmp sge i32 %0, 0, !dbg !174
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !175

land.lhs.true:                                    ; preds = %cond.end
  %1 = load i32, ptr %data, align 4, !dbg !176
  %cmp14 = icmp slt i32 %1, 10, !dbg !177
  br i1 %cmp14, label %if.then, label %if.else, !dbg !175

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, ptr %data, align 4, !dbg !178
  %idxprom = sext i32 %2 to i64, !dbg !180
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom, !dbg !180
  store i32 1, ptr %arrayidx, align 4, !dbg !181
  store i32 0, ptr %i, align 4, !dbg !182
  br label %for.cond, !dbg !184

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4, !dbg !185
  %cmp15 = icmp slt i32 %3, 10, !dbg !187
  br i1 %cmp15, label %for.body, label %for.end, !dbg !188

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4, !dbg !189
  %idxprom16 = sext i32 %4 to i64, !dbg !191
  %arrayidx17 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom16, !dbg !191
  %5 = load i32, ptr %arrayidx17, align 4, !dbg !191
  call void @printIntLine(i32 noundef %5), !dbg !192
  br label %for.inc, !dbg !193

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4, !dbg !194
  %inc = add nsw i32 %6, 1, !dbg !194
  store i32 %inc, ptr %i, align 4, !dbg !194
  br label %for.cond, !dbg !195, !llvm.loop !196

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !198

if.else:                                          ; preds = %land.lhs.true, %cond.end
  call void @printLine(ptr noundef @.str.5), !dbg !199
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !201
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!32}
!llvm.module.flags = !{!38, !39, !40, !41, !42, !43, !44}
!llvm.ident = !{!45}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 46, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e5852ff29d1c45739e0474f9559a77e5")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 256, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 32)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 134, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 18)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 136, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 16)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 139, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 17)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(scope: null, file: !2, line: 141, type: !24, isLocal: true, isDefinition: true)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 15)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(scope: null, file: !2, line: 109, type: !29, isLocal: true, isDefinition: true)
!29 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 288, elements: !30)
!30 = !{!31}
!31 = !DISubrange(count: 36)
!32 = distinct !DICompileUnit(language: DW_LANG_C11, file: !33, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !34, globals: !37, splitDebugInlining: false, nameTableKind: None)
!33 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e5852ff29d1c45739e0474f9559a77e5")
!34 = !{!35, !36}
!35 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!36 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!37 = !{!0, !7, !12, !17, !22, !27}
!38 = !{i32 7, !"Dwarf Version", i32 5}
!39 = !{i32 2, !"Debug Info Version", i32 3}
!40 = !{i32 1, !"wchar_size", i32 4}
!41 = !{i32 8, !"PIC Level", i32 2}
!42 = !{i32 7, !"PIE Level", i32 2}
!43 = !{i32 7, !"uwtable", i32 2}
!44 = !{i32 7, !"frame-pointer", i32 2}
!45 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!46 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_bad", scope: !2, file: !2, line: 22, type: !47, scopeLine: 23, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !49)
!47 = !DISubroutineType(types: !48)
!48 = !{null}
!49 = !{}
!50 = !DILocalVariable(name: "data", scope: !46, file: !2, line: 24, type: !35)
!51 = !DILocation(line: 24, column: 9, scope: !46)
!52 = !DILocation(line: 26, column: 10, scope: !46)
!53 = !DILocation(line: 28, column: 12, scope: !46)
!54 = !DILocation(line: 28, column: 10, scope: !46)
!55 = !DILocalVariable(name: "i", scope: !56, file: !2, line: 30, type: !35)
!56 = distinct !DILexicalBlock(scope: !46, file: !2, line: 29, column: 5)
!57 = !DILocation(line: 30, column: 13, scope: !56)
!58 = !DILocalVariable(name: "buffer", scope: !56, file: !2, line: 31, type: !59)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !35, size: 320, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 10)
!62 = !DILocation(line: 31, column: 13, scope: !56)
!63 = !DILocation(line: 34, column: 13, scope: !64)
!64 = distinct !DILexicalBlock(scope: !56, file: !2, line: 34, column: 13)
!65 = !DILocation(line: 34, column: 18, scope: !64)
!66 = !DILocation(line: 36, column: 20, scope: !67)
!67 = distinct !DILexicalBlock(scope: !64, file: !2, line: 35, column: 9)
!68 = !DILocation(line: 36, column: 13, scope: !67)
!69 = !DILocation(line: 36, column: 26, scope: !67)
!70 = !DILocation(line: 37, column: 30, scope: !67)
!71 = !DILocation(line: 37, column: 38, scope: !67)
!72 = !DILocation(line: 37, column: 43, scope: !67)
!73 = !DILocation(line: 37, column: 57, scope: !67)
!74 = !DILocation(line: 37, column: 13, scope: !67)
!75 = !DILocation(line: 39, column: 19, scope: !76)
!76 = distinct !DILexicalBlock(scope: !67, file: !2, line: 39, column: 13)
!77 = !DILocation(line: 39, column: 17, scope: !76)
!78 = !DILocation(line: 39, column: 24, scope: !79)
!79 = distinct !DILexicalBlock(scope: !76, file: !2, line: 39, column: 13)
!80 = !DILocation(line: 39, column: 26, scope: !79)
!81 = !DILocation(line: 39, column: 13, scope: !76)
!82 = !DILocation(line: 41, column: 37, scope: !83)
!83 = distinct !DILexicalBlock(scope: !79, file: !2, line: 40, column: 13)
!84 = !DILocation(line: 41, column: 30, scope: !83)
!85 = !DILocation(line: 41, column: 17, scope: !83)
!86 = !DILocation(line: 42, column: 13, scope: !83)
!87 = !DILocation(line: 39, column: 33, scope: !79)
!88 = !DILocation(line: 39, column: 13, scope: !79)
!89 = distinct !{!89, !81, !90, !91}
!90 = !DILocation(line: 42, column: 13, scope: !76)
!91 = !{!"llvm.loop.mustprogress"}
!92 = !DILocation(line: 43, column: 9, scope: !67)
!93 = !DILocation(line: 46, column: 13, scope: !94)
!94 = distinct !DILexicalBlock(scope: !64, file: !2, line: 45, column: 9)
!95 = !DILocation(line: 49, column: 1, scope: !46)
!96 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01_good", scope: !2, file: !2, line: 114, type: !47, scopeLine: 115, spFlags: DISPFlagDefinition, unit: !32)
!97 = !DILocation(line: 116, column: 5, scope: !96)
!98 = !DILocation(line: 117, column: 5, scope: !96)
!99 = !DILocation(line: 118, column: 1, scope: !96)
!100 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 129, type: !101, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !49)
!101 = !DISubroutineType(types: !102)
!102 = !{!35, !35, !103}
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!105 = !DILocalVariable(name: "argc", arg: 1, scope: !100, file: !2, line: 129, type: !35)
!106 = !DILocation(line: 129, column: 14, scope: !100)
!107 = !DILocalVariable(name: "argv", arg: 2, scope: !100, file: !2, line: 129, type: !103)
!108 = !DILocation(line: 129, column: 27, scope: !100)
!109 = !DILocation(line: 132, column: 22, scope: !100)
!110 = !DILocation(line: 132, column: 12, scope: !100)
!111 = !DILocation(line: 132, column: 5, scope: !100)
!112 = !DILocation(line: 134, column: 5, scope: !100)
!113 = !DILocation(line: 135, column: 5, scope: !100)
!114 = !DILocation(line: 136, column: 5, scope: !100)
!115 = !DILocation(line: 139, column: 5, scope: !100)
!116 = !DILocation(line: 140, column: 5, scope: !100)
!117 = !DILocation(line: 141, column: 5, scope: !100)
!118 = !DILocation(line: 143, column: 5, scope: !100)
!119 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 56, type: !47, scopeLine: 57, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !32, retainedNodes: !49)
!120 = !DILocalVariable(name: "data", scope: !119, file: !2, line: 58, type: !35)
!121 = !DILocation(line: 58, column: 9, scope: !119)
!122 = !DILocation(line: 60, column: 10, scope: !119)
!123 = !DILocation(line: 63, column: 10, scope: !119)
!124 = !DILocalVariable(name: "i", scope: !125, file: !2, line: 65, type: !35)
!125 = distinct !DILexicalBlock(scope: !119, file: !2, line: 64, column: 5)
!126 = !DILocation(line: 65, column: 13, scope: !125)
!127 = !DILocalVariable(name: "buffer", scope: !125, file: !2, line: 66, type: !59)
!128 = !DILocation(line: 66, column: 13, scope: !125)
!129 = !DILocation(line: 69, column: 13, scope: !130)
!130 = distinct !DILexicalBlock(scope: !125, file: !2, line: 69, column: 13)
!131 = !DILocation(line: 69, column: 18, scope: !130)
!132 = !DILocation(line: 71, column: 20, scope: !133)
!133 = distinct !DILexicalBlock(scope: !130, file: !2, line: 70, column: 9)
!134 = !DILocation(line: 71, column: 13, scope: !133)
!135 = !DILocation(line: 71, column: 26, scope: !133)
!136 = !DILocation(line: 72, column: 28, scope: !133)
!137 = !DILocation(line: 72, column: 36, scope: !133)
!138 = !DILocation(line: 72, column: 41, scope: !133)
!139 = !DILocation(line: 72, column: 55, scope: !133)
!140 = !DILocation(line: 72, column: 13, scope: !133)
!141 = !DILocation(line: 74, column: 19, scope: !142)
!142 = distinct !DILexicalBlock(scope: !133, file: !2, line: 74, column: 13)
!143 = !DILocation(line: 74, column: 17, scope: !142)
!144 = !DILocation(line: 74, column: 24, scope: !145)
!145 = distinct !DILexicalBlock(scope: !142, file: !2, line: 74, column: 13)
!146 = !DILocation(line: 74, column: 26, scope: !145)
!147 = !DILocation(line: 74, column: 13, scope: !142)
!148 = !DILocation(line: 76, column: 37, scope: !149)
!149 = distinct !DILexicalBlock(scope: !145, file: !2, line: 75, column: 13)
!150 = !DILocation(line: 76, column: 30, scope: !149)
!151 = !DILocation(line: 76, column: 17, scope: !149)
!152 = !DILocation(line: 77, column: 13, scope: !149)
!153 = !DILocation(line: 74, column: 33, scope: !145)
!154 = !DILocation(line: 74, column: 13, scope: !145)
!155 = distinct !{!155, !147, !156, !91}
!156 = !DILocation(line: 77, column: 13, scope: !142)
!157 = !DILocation(line: 78, column: 9, scope: !133)
!158 = !DILocation(line: 81, column: 13, scope: !159)
!159 = distinct !DILexicalBlock(scope: !130, file: !2, line: 80, column: 9)
!160 = !DILocation(line: 84, column: 1, scope: !119)
!161 = distinct !DISubprogram(name: "goodB2G", scope: !2, file: !2, line: 87, type: !47, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !32, retainedNodes: !49)
!162 = !DILocalVariable(name: "data", scope: !161, file: !2, line: 89, type: !35)
!163 = !DILocation(line: 89, column: 9, scope: !161)
!164 = !DILocation(line: 91, column: 10, scope: !161)
!165 = !DILocation(line: 93, column: 12, scope: !161)
!166 = !DILocation(line: 93, column: 10, scope: !161)
!167 = !DILocalVariable(name: "i", scope: !168, file: !2, line: 95, type: !35)
!168 = distinct !DILexicalBlock(scope: !161, file: !2, line: 94, column: 5)
!169 = !DILocation(line: 95, column: 13, scope: !168)
!170 = !DILocalVariable(name: "buffer", scope: !168, file: !2, line: 96, type: !59)
!171 = !DILocation(line: 96, column: 13, scope: !168)
!172 = !DILocation(line: 98, column: 13, scope: !173)
!173 = distinct !DILexicalBlock(scope: !168, file: !2, line: 98, column: 13)
!174 = !DILocation(line: 98, column: 18, scope: !173)
!175 = !DILocation(line: 98, column: 23, scope: !173)
!176 = !DILocation(line: 98, column: 26, scope: !173)
!177 = !DILocation(line: 98, column: 31, scope: !173)
!178 = !DILocation(line: 100, column: 20, scope: !179)
!179 = distinct !DILexicalBlock(scope: !173, file: !2, line: 99, column: 9)
!180 = !DILocation(line: 100, column: 13, scope: !179)
!181 = !DILocation(line: 100, column: 26, scope: !179)
!182 = !DILocation(line: 102, column: 19, scope: !183)
!183 = distinct !DILexicalBlock(scope: !179, file: !2, line: 102, column: 13)
!184 = !DILocation(line: 102, column: 17, scope: !183)
!185 = !DILocation(line: 102, column: 24, scope: !186)
!186 = distinct !DILexicalBlock(scope: !183, file: !2, line: 102, column: 13)
!187 = !DILocation(line: 102, column: 26, scope: !186)
!188 = !DILocation(line: 102, column: 13, scope: !183)
!189 = !DILocation(line: 104, column: 37, scope: !190)
!190 = distinct !DILexicalBlock(scope: !186, file: !2, line: 103, column: 13)
!191 = !DILocation(line: 104, column: 30, scope: !190)
!192 = !DILocation(line: 104, column: 17, scope: !190)
!193 = !DILocation(line: 105, column: 13, scope: !190)
!194 = !DILocation(line: 102, column: 33, scope: !186)
!195 = !DILocation(line: 102, column: 13, scope: !186)
!196 = distinct !{!196, !188, !197, !91}
!197 = !DILocation(line: 105, column: 13, scope: !183)
!198 = !DILocation(line: 106, column: 9, scope: !179)
!199 = !DILocation(line: 109, column: 13, scope: !200)
!200 = distinct !DILexicalBlock(scope: !173, file: !2, line: 108, column: 9)
!201 = !DILocation(line: 112, column: 1, scope: !161)
