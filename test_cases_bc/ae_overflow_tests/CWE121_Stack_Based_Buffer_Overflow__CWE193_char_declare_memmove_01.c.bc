; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_bad.source = private unnamed_addr constant [11 x i8] c"AAAAAAAAAA\00", align 1
@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17
@__const.goodG2B.source = private unnamed_addr constant [11 x i8] c"AAAAAAAAAA\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [10 x i8], align 1
  %dataGoodBuffer = alloca [11 x i8], align 1
  %source = alloca [11 x i8], align 1
    #dbg_declare(ptr %data, !39, !DIExpression(), !41)
    #dbg_declare(ptr %dataBadBuffer, !42, !DIExpression(), !46)
    #dbg_declare(ptr %dataGoodBuffer, !47, !DIExpression(), !51)
  %arraydecay = getelementptr inbounds [10 x i8], ptr %dataBadBuffer, i64 0, i64 0, !dbg !52
  store ptr %arraydecay, ptr %data, align 8, !dbg !53
  %0 = load ptr, ptr %data, align 8, !dbg !54
  %arrayidx = getelementptr inbounds i8, ptr %0, i64 0, !dbg !54
  store i8 0, ptr %arrayidx, align 1, !dbg !55
    #dbg_declare(ptr %source, !56, !DIExpression(), !58)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %source, ptr align 1 @__const.CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_bad.source, i64 11, i1 false), !dbg !58
  %1 = load ptr, ptr %data, align 8, !dbg !59
  %arraydecay1 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !60
  %arraydecay2 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !61
  %call = call i64 @strlen(ptr noundef %arraydecay2) #5, !dbg !62
  %add = add i64 %call, 1, !dbg !63
  %mul = mul i64 %add, 1, !dbg !64
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %1, ptr align 1 %arraydecay1, i64 %mul, i1 false), !dbg !60
  %2 = load ptr, ptr %data, align 8, !dbg !65
  %arraydecay3 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !66
  %call4 = call i64 @strlen(ptr noundef %arraydecay3) #5, !dbg !67
  %add5 = add i64 %call4, 1, !dbg !68
  %mul6 = mul i64 %add5, 1, !dbg !69
  %sub = sub i64 %mul6, 1, !dbg !70
  %call7 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %2, i64 noundef %sub), !dbg !71
  %arraydecay8 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !72
  %arraydecay9 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !73
  %call10 = call i64 @strlen(ptr noundef %arraydecay9) #5, !dbg !74
  %add11 = add i64 %call10, 1, !dbg !75
  %mul12 = mul i64 %add11, 1, !dbg !76
  %sub13 = sub i64 %mul12, 1, !dbg !77
  %call14 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay8, i64 noundef %sub13), !dbg !78
  %3 = load ptr, ptr %data, align 8, !dbg !79
  call void @printLine(ptr noundef %3), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #1

declare i32 @UNSAFE_BUFACCESS(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_good() #0 !dbg !82 {
entry:
  call void @goodG2B(), !dbg !83
  ret void, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !85 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !90, !DIExpression(), !91)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !92, !DIExpression(), !93)
  %call = call i64 @time(ptr noundef null) #6, !dbg !94
  %conv = trunc i64 %call to i32, !dbg !95
  call void @srand(i32 noundef %conv) #6, !dbg !96
  call void @printLine(ptr noundef @.str), !dbg !97
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_good(), !dbg !98
  call void @printLine(ptr noundef @.str.1), !dbg !99
  call void @printLine(ptr noundef @.str.2), !dbg !100
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_bad(), !dbg !101
  call void @printLine(ptr noundef @.str.3), !dbg !102
  ret i32 0, !dbg !103
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !104 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [10 x i8], align 1
  %dataGoodBuffer = alloca [11 x i8], align 1
  %source = alloca [11 x i8], align 1
    #dbg_declare(ptr %data, !105, !DIExpression(), !106)
    #dbg_declare(ptr %dataBadBuffer, !107, !DIExpression(), !108)
    #dbg_declare(ptr %dataGoodBuffer, !109, !DIExpression(), !110)
  %arraydecay = getelementptr inbounds [11 x i8], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !111
  store ptr %arraydecay, ptr %data, align 8, !dbg !112
  %0 = load ptr, ptr %data, align 8, !dbg !113
  %arrayidx = getelementptr inbounds i8, ptr %0, i64 0, !dbg !113
  store i8 0, ptr %arrayidx, align 1, !dbg !114
    #dbg_declare(ptr %source, !115, !DIExpression(), !117)
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %source, ptr align 1 @__const.goodG2B.source, i64 11, i1 false), !dbg !117
  %1 = load ptr, ptr %data, align 8, !dbg !118
  %arraydecay1 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !119
  %arraydecay2 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !120
  %call = call i64 @strlen(ptr noundef %arraydecay2) #5, !dbg !121
  %add = add i64 %call, 1, !dbg !122
  %mul = mul i64 %add, 1, !dbg !123
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %1, ptr align 1 %arraydecay1, i64 %mul, i1 false), !dbg !119
  %2 = load ptr, ptr %data, align 8, !dbg !124
  %arraydecay3 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !125
  %call4 = call i64 @strlen(ptr noundef %arraydecay3) #5, !dbg !126
  %add5 = add i64 %call4, 1, !dbg !127
  %mul6 = mul i64 %add5, 1, !dbg !128
  %sub = sub i64 %mul6, 1, !dbg !129
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %2, i64 noundef %sub), !dbg !130
  %arraydecay8 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !131
  %arraydecay9 = getelementptr inbounds [11 x i8], ptr %source, i64 0, i64 0, !dbg !132
  %call10 = call i64 @strlen(ptr noundef %arraydecay9) #5, !dbg !133
  %add11 = add i64 %call10, 1, !dbg !134
  %mul12 = mul i64 %add11, 1, !dbg !135
  %sub13 = sub i64 %mul12, 1, !dbg !136
  %call14 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay8, i64 noundef %sub13), !dbg !137
  %3 = load ptr, ptr %data, align 8, !dbg !138
  call void @printLine(ptr noundef %3), !dbg !139
  ret void, !dbg !140
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 93, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "eef10df1dfff5fcb933543e5d3138b00")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 95, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 98, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 100, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "eef10df1dfff5fcb933543e5d3138b00")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!35 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_bad", scope: !2, file: !2, line: 28, type: !36, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 30, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!41 = !DILocation(line: 30, column: 12, scope: !35)
!42 = !DILocalVariable(name: "dataBadBuffer", scope: !35, file: !2, line: 31, type: !43)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 80, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 10)
!46 = !DILocation(line: 31, column: 10, scope: !35)
!47 = !DILocalVariable(name: "dataGoodBuffer", scope: !35, file: !2, line: 32, type: !48)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 88, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 11)
!51 = !DILocation(line: 32, column: 10, scope: !35)
!52 = !DILocation(line: 35, column: 12, scope: !35)
!53 = !DILocation(line: 35, column: 10, scope: !35)
!54 = !DILocation(line: 36, column: 5, scope: !35)
!55 = !DILocation(line: 36, column: 13, scope: !35)
!56 = !DILocalVariable(name: "source", scope: !57, file: !2, line: 38, type: !48)
!57 = distinct !DILexicalBlock(scope: !35, file: !2, line: 37, column: 5)
!58 = !DILocation(line: 38, column: 14, scope: !57)
!59 = !DILocation(line: 41, column: 17, scope: !57)
!60 = !DILocation(line: 41, column: 9, scope: !57)
!61 = !DILocation(line: 41, column: 39, scope: !57)
!62 = !DILocation(line: 41, column: 32, scope: !57)
!63 = !DILocation(line: 41, column: 47, scope: !57)
!64 = !DILocation(line: 41, column: 52, scope: !57)
!65 = !DILocation(line: 42, column: 26, scope: !57)
!66 = !DILocation(line: 42, column: 40, scope: !57)
!67 = !DILocation(line: 42, column: 33, scope: !57)
!68 = !DILocation(line: 42, column: 48, scope: !57)
!69 = !DILocation(line: 42, column: 53, scope: !57)
!70 = !DILocation(line: 42, column: 68, scope: !57)
!71 = !DILocation(line: 42, column: 9, scope: !57)
!72 = !DILocation(line: 43, column: 24, scope: !57)
!73 = !DILocation(line: 43, column: 40, scope: !57)
!74 = !DILocation(line: 43, column: 33, scope: !57)
!75 = !DILocation(line: 43, column: 48, scope: !57)
!76 = !DILocation(line: 43, column: 53, scope: !57)
!77 = !DILocation(line: 43, column: 68, scope: !57)
!78 = !DILocation(line: 43, column: 9, scope: !57)
!79 = !DILocation(line: 44, column: 19, scope: !57)
!80 = !DILocation(line: 44, column: 9, scope: !57)
!81 = !DILocation(line: 46, column: 1, scope: !35)
!82 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01_good", scope: !2, file: !2, line: 73, type: !36, scopeLine: 74, spFlags: DISPFlagDefinition, unit: !22)
!83 = !DILocation(line: 75, column: 5, scope: !82)
!84 = !DILocation(line: 76, column: 1, scope: !82)
!85 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 88, type: !86, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!86 = !DISubroutineType(types: !87)
!87 = !{!88, !88, !89}
!88 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!89 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!90 = !DILocalVariable(name: "argc", arg: 1, scope: !85, file: !2, line: 88, type: !88)
!91 = !DILocation(line: 88, column: 14, scope: !85)
!92 = !DILocalVariable(name: "argv", arg: 2, scope: !85, file: !2, line: 88, type: !89)
!93 = !DILocation(line: 88, column: 27, scope: !85)
!94 = !DILocation(line: 91, column: 22, scope: !85)
!95 = !DILocation(line: 91, column: 12, scope: !85)
!96 = !DILocation(line: 91, column: 5, scope: !85)
!97 = !DILocation(line: 93, column: 5, scope: !85)
!98 = !DILocation(line: 94, column: 5, scope: !85)
!99 = !DILocation(line: 95, column: 5, scope: !85)
!100 = !DILocation(line: 98, column: 5, scope: !85)
!101 = !DILocation(line: 99, column: 5, scope: !85)
!102 = !DILocation(line: 100, column: 5, scope: !85)
!103 = !DILocation(line: 102, column: 5, scope: !85)
!104 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 53, type: !36, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!105 = !DILocalVariable(name: "data", scope: !104, file: !2, line: 55, type: !40)
!106 = !DILocation(line: 55, column: 12, scope: !104)
!107 = !DILocalVariable(name: "dataBadBuffer", scope: !104, file: !2, line: 56, type: !43)
!108 = !DILocation(line: 56, column: 10, scope: !104)
!109 = !DILocalVariable(name: "dataGoodBuffer", scope: !104, file: !2, line: 57, type: !48)
!110 = !DILocation(line: 57, column: 10, scope: !104)
!111 = !DILocation(line: 60, column: 12, scope: !104)
!112 = !DILocation(line: 60, column: 10, scope: !104)
!113 = !DILocation(line: 61, column: 5, scope: !104)
!114 = !DILocation(line: 61, column: 13, scope: !104)
!115 = !DILocalVariable(name: "source", scope: !116, file: !2, line: 63, type: !48)
!116 = distinct !DILexicalBlock(scope: !104, file: !2, line: 62, column: 5)
!117 = !DILocation(line: 63, column: 14, scope: !116)
!118 = !DILocation(line: 66, column: 17, scope: !116)
!119 = !DILocation(line: 66, column: 9, scope: !116)
!120 = !DILocation(line: 66, column: 39, scope: !116)
!121 = !DILocation(line: 66, column: 32, scope: !116)
!122 = !DILocation(line: 66, column: 47, scope: !116)
!123 = !DILocation(line: 66, column: 52, scope: !116)
!124 = !DILocation(line: 67, column: 24, scope: !116)
!125 = !DILocation(line: 67, column: 38, scope: !116)
!126 = !DILocation(line: 67, column: 31, scope: !116)
!127 = !DILocation(line: 67, column: 46, scope: !116)
!128 = !DILocation(line: 67, column: 51, scope: !116)
!129 = !DILocation(line: 67, column: 66, scope: !116)
!130 = !DILocation(line: 67, column: 9, scope: !116)
!131 = !DILocation(line: 68, column: 24, scope: !116)
!132 = !DILocation(line: 68, column: 40, scope: !116)
!133 = !DILocation(line: 68, column: 33, scope: !116)
!134 = !DILocation(line: 68, column: 48, scope: !116)
!135 = !DILocation(line: 68, column: 53, scope: !116)
!136 = !DILocation(line: 68, column: 68, scope: !116)
!137 = !DILocation(line: 68, column: 9, scope: !116)
!138 = !DILocation(line: 69, column: 19, scope: !116)
!139 = !DILocation(line: 69, column: 9, scope: !116)
!140 = !DILocation(line: 71, column: 1, scope: !104)
