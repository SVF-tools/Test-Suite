; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad() #0 !dbg !37 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [10 x i32], align 16
  %i = alloca i64, align 8
    #dbg_declare(ptr %data, !41, !DIExpression(), !42)
  store ptr null, ptr %data, align 8, !dbg !43
  %0 = alloca i8, i64 10, align 16, !dbg !44
  store ptr %0, ptr %data, align 8, !dbg !45
    #dbg_declare(ptr %source, !46, !DIExpression(), !51)
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 40, i1 false), !dbg !51
    #dbg_declare(ptr %i, !52, !DIExpression(), !56)
  store i64 0, ptr %i, align 8, !dbg !57
  br label %for.cond, !dbg !59

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8, !dbg !60
  %cmp = icmp ult i64 %1, 10, !dbg !62
  br i1 %cmp, label %for.body, label %for.end, !dbg !63

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !64
  %arrayidx = getelementptr inbounds nuw [10 x i32], ptr %source, i64 0, i64 %2, !dbg !66
  %3 = load i32, ptr %arrayidx, align 4, !dbg !66
  %4 = load ptr, ptr %data, align 8, !dbg !67
  %5 = load i64, ptr %i, align 8, !dbg !68
  %arrayidx1 = getelementptr inbounds nuw i32, ptr %4, i64 %5, !dbg !67
  store i32 %3, ptr %arrayidx1, align 4, !dbg !69
  br label %for.inc, !dbg !70

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !71
  %inc = add i64 %6, 1, !dbg !71
  store i64 %inc, ptr %i, align 8, !dbg !71
  br label %for.cond, !dbg !72, !llvm.loop !73

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !76
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef 39), !dbg !77
  %7 = load ptr, ptr %data, align 8, !dbg !78
  %call2 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %7, i64 noundef 39), !dbg !79
  %8 = load ptr, ptr %data, align 8, !dbg !80
  %arrayidx3 = getelementptr inbounds i32, ptr %8, i64 0, !dbg !80
  %9 = load i32, ptr %arrayidx3, align 4, !dbg !80
  call void @printIntLine(i32 noundef %9), !dbg !81
  ret void, !dbg !82
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @SAFE_BUFACCESS(...) #2

declare i32 @UNSAFE_BUFACCESS(...) #2

declare void @printIntLine(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good() #0 !dbg !83 {
entry:
  call void @goodG2B(), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !86 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !91, !DIExpression(), !92)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !93, !DIExpression(), !94)
  %call = call i64 @time(ptr noundef null) #4, !dbg !95
  %conv = trunc i64 %call to i32, !dbg !96
  call void @srand(i32 noundef %conv) #4, !dbg !97
  call void @printLine(ptr noundef @.str), !dbg !98
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good(), !dbg !99
  call void @printLine(ptr noundef @.str.1), !dbg !100
  call void @printLine(ptr noundef @.str.2), !dbg !101
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad(), !dbg !102
  call void @printLine(ptr noundef @.str.3), !dbg !103
  ret i32 0, !dbg !104
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #3

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #3

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !105 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [10 x i32], align 16
  %i = alloca i64, align 8
    #dbg_declare(ptr %data, !106, !DIExpression(), !107)
  store ptr null, ptr %data, align 8, !dbg !108
  %0 = alloca i8, i64 40, align 16, !dbg !109
  store ptr %0, ptr %data, align 8, !dbg !110
    #dbg_declare(ptr %source, !111, !DIExpression(), !113)
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 40, i1 false), !dbg !113
    #dbg_declare(ptr %i, !114, !DIExpression(), !115)
  store i64 0, ptr %i, align 8, !dbg !116
  br label %for.cond, !dbg !118

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8, !dbg !119
  %cmp = icmp ult i64 %1, 10, !dbg !121
  br i1 %cmp, label %for.body, label %for.end, !dbg !122

for.body:                                         ; preds = %for.cond
  %2 = load i64, ptr %i, align 8, !dbg !123
  %arrayidx = getelementptr inbounds nuw [10 x i32], ptr %source, i64 0, i64 %2, !dbg !125
  %3 = load i32, ptr %arrayidx, align 4, !dbg !125
  %4 = load ptr, ptr %data, align 8, !dbg !126
  %5 = load i64, ptr %i, align 8, !dbg !127
  %arrayidx1 = getelementptr inbounds nuw i32, ptr %4, i64 %5, !dbg !126
  store i32 %3, ptr %arrayidx1, align 4, !dbg !128
  %6 = load ptr, ptr %data, align 8, !dbg !129
  %7 = load i64, ptr %i, align 8, !dbg !130
  %add = add i64 %7, 1, !dbg !131
  %mul = mul i64 %add, 4, !dbg !132
  %sub = sub i64 %mul, 1, !dbg !133
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %6, i64 noundef %sub), !dbg !134
  %arraydecay = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !135
  %8 = load i64, ptr %i, align 8, !dbg !136
  %add2 = add i64 %8, 1, !dbg !137
  %mul3 = mul i64 %add2, 4, !dbg !138
  %sub4 = sub i64 %mul3, 1, !dbg !139
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub4), !dbg !140
  br label %for.inc, !dbg !141

for.inc:                                          ; preds = %for.body
  %9 = load i64, ptr %i, align 8, !dbg !142
  %inc = add i64 %9, 1, !dbg !142
  store i64 %inc, ptr %i, align 8, !dbg !142
  br label %for.cond, !dbg !143, !llvm.loop !144

for.end:                                          ; preds = %for.cond
  %arraydecay6 = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !146
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay6, i64 noundef 39), !dbg !147
  %10 = load ptr, ptr %data, align 8, !dbg !148
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %10, i64 noundef 39), !dbg !149
  %11 = load ptr, ptr %data, align 8, !dbg !150
  %arrayidx9 = getelementptr inbounds i32, ptr %11, i64 0, !dbg !150
  %12 = load i32, ptr %arrayidx9, align 4, !dbg !150
  call void @printIntLine(i32 noundef %12), !dbg !151
  ret void, !dbg !152
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!29, !30, !31, !32, !33, !34, !35}
!llvm.ident = !{!36}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 89, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e233c99398d70ef42275982975277534")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 91, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 96, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !28, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "e233c99398d70ef42275982975277534")
!24 = !{!25, !27}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !{!0, !7, !12, !17}
!29 = !{i32 7, !"Dwarf Version", i32 5}
!30 = !{i32 2, !"Debug Info Version", i32 3}
!31 = !{i32 1, !"wchar_size", i32 4}
!32 = !{i32 8, !"PIC Level", i32 2}
!33 = !{i32 7, !"PIE Level", i32 2}
!34 = !{i32 7, !"uwtable", i32 2}
!35 = !{i32 7, !"frame-pointer", i32 2}
!36 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!37 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_bad", scope: !2, file: !2, line: 21, type: !38, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!38 = !DISubroutineType(types: !39)
!39 = !{null}
!40 = !{}
!41 = !DILocalVariable(name: "data", scope: !37, file: !2, line: 23, type: !25)
!42 = !DILocation(line: 23, column: 11, scope: !37)
!43 = !DILocation(line: 24, column: 10, scope: !37)
!44 = !DILocation(line: 26, column: 19, scope: !37)
!45 = !DILocation(line: 26, column: 10, scope: !37)
!46 = !DILocalVariable(name: "source", scope: !47, file: !2, line: 28, type: !48)
!47 = distinct !DILexicalBlock(scope: !37, file: !2, line: 27, column: 5)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 320, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 10)
!51 = !DILocation(line: 28, column: 13, scope: !47)
!52 = !DILocalVariable(name: "i", scope: !47, file: !2, line: 29, type: !53)
!53 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !54, line: 18, baseType: !55)
!54 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!55 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!56 = !DILocation(line: 29, column: 16, scope: !47)
!57 = !DILocation(line: 31, column: 16, scope: !58)
!58 = distinct !DILexicalBlock(scope: !47, file: !2, line: 31, column: 9)
!59 = !DILocation(line: 31, column: 14, scope: !58)
!60 = !DILocation(line: 31, column: 21, scope: !61)
!61 = distinct !DILexicalBlock(scope: !58, file: !2, line: 31, column: 9)
!62 = !DILocation(line: 31, column: 23, scope: !61)
!63 = !DILocation(line: 31, column: 9, scope: !58)
!64 = !DILocation(line: 33, column: 30, scope: !65)
!65 = distinct !DILexicalBlock(scope: !61, file: !2, line: 32, column: 9)
!66 = !DILocation(line: 33, column: 23, scope: !65)
!67 = !DILocation(line: 33, column: 13, scope: !65)
!68 = !DILocation(line: 33, column: 18, scope: !65)
!69 = !DILocation(line: 33, column: 21, scope: !65)
!70 = !DILocation(line: 34, column: 9, scope: !65)
!71 = !DILocation(line: 31, column: 30, scope: !61)
!72 = !DILocation(line: 31, column: 9, scope: !61)
!73 = distinct !{!73, !63, !74, !75}
!74 = !DILocation(line: 34, column: 9, scope: !58)
!75 = !{!"llvm.loop.mustprogress"}
!76 = !DILocation(line: 35, column: 24, scope: !47)
!77 = !DILocation(line: 35, column: 9, scope: !47)
!78 = !DILocation(line: 36, column: 26, scope: !47)
!79 = !DILocation(line: 36, column: 9, scope: !47)
!80 = !DILocation(line: 37, column: 22, scope: !47)
!81 = !DILocation(line: 37, column: 9, scope: !47)
!82 = !DILocation(line: 39, column: 1, scope: !37)
!83 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01_good", scope: !2, file: !2, line: 69, type: !38, scopeLine: 70, spFlags: DISPFlagDefinition, unit: !22)
!84 = !DILocation(line: 71, column: 5, scope: !83)
!85 = !DILocation(line: 72, column: 1, scope: !83)
!86 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 84, type: !87, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!87 = !DISubroutineType(types: !88)
!88 = !{!26, !26, !89}
!89 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64)
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!91 = !DILocalVariable(name: "argc", arg: 1, scope: !86, file: !2, line: 84, type: !26)
!92 = !DILocation(line: 84, column: 14, scope: !86)
!93 = !DILocalVariable(name: "argv", arg: 2, scope: !86, file: !2, line: 84, type: !89)
!94 = !DILocation(line: 84, column: 27, scope: !86)
!95 = !DILocation(line: 87, column: 22, scope: !86)
!96 = !DILocation(line: 87, column: 12, scope: !86)
!97 = !DILocation(line: 87, column: 5, scope: !86)
!98 = !DILocation(line: 89, column: 5, scope: !86)
!99 = !DILocation(line: 90, column: 5, scope: !86)
!100 = !DILocation(line: 91, column: 5, scope: !86)
!101 = !DILocation(line: 94, column: 5, scope: !86)
!102 = !DILocation(line: 95, column: 5, scope: !86)
!103 = !DILocation(line: 96, column: 5, scope: !86)
!104 = !DILocation(line: 98, column: 5, scope: !86)
!105 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 46, type: !38, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !40)
!106 = !DILocalVariable(name: "data", scope: !105, file: !2, line: 48, type: !25)
!107 = !DILocation(line: 48, column: 11, scope: !105)
!108 = !DILocation(line: 49, column: 10, scope: !105)
!109 = !DILocation(line: 51, column: 19, scope: !105)
!110 = !DILocation(line: 51, column: 10, scope: !105)
!111 = !DILocalVariable(name: "source", scope: !112, file: !2, line: 53, type: !48)
!112 = distinct !DILexicalBlock(scope: !105, file: !2, line: 52, column: 5)
!113 = !DILocation(line: 53, column: 13, scope: !112)
!114 = !DILocalVariable(name: "i", scope: !112, file: !2, line: 54, type: !53)
!115 = !DILocation(line: 54, column: 16, scope: !112)
!116 = !DILocation(line: 56, column: 16, scope: !117)
!117 = distinct !DILexicalBlock(scope: !112, file: !2, line: 56, column: 9)
!118 = !DILocation(line: 56, column: 14, scope: !117)
!119 = !DILocation(line: 56, column: 21, scope: !120)
!120 = distinct !DILexicalBlock(scope: !117, file: !2, line: 56, column: 9)
!121 = !DILocation(line: 56, column: 23, scope: !120)
!122 = !DILocation(line: 56, column: 9, scope: !117)
!123 = !DILocation(line: 58, column: 30, scope: !124)
!124 = distinct !DILexicalBlock(scope: !120, file: !2, line: 57, column: 9)
!125 = !DILocation(line: 58, column: 23, scope: !124)
!126 = !DILocation(line: 58, column: 13, scope: !124)
!127 = !DILocation(line: 58, column: 18, scope: !124)
!128 = !DILocation(line: 58, column: 21, scope: !124)
!129 = !DILocation(line: 59, column: 28, scope: !124)
!130 = !DILocation(line: 59, column: 35, scope: !124)
!131 = !DILocation(line: 59, column: 36, scope: !124)
!132 = !DILocation(line: 59, column: 40, scope: !124)
!133 = !DILocation(line: 59, column: 54, scope: !124)
!134 = !DILocation(line: 59, column: 13, scope: !124)
!135 = !DILocation(line: 60, column: 28, scope: !124)
!136 = !DILocation(line: 60, column: 37, scope: !124)
!137 = !DILocation(line: 60, column: 38, scope: !124)
!138 = !DILocation(line: 60, column: 42, scope: !124)
!139 = !DILocation(line: 60, column: 56, scope: !124)
!140 = !DILocation(line: 60, column: 13, scope: !124)
!141 = !DILocation(line: 61, column: 9, scope: !124)
!142 = !DILocation(line: 56, column: 30, scope: !120)
!143 = !DILocation(line: 56, column: 9, scope: !120)
!144 = distinct !{!144, !122, !145, !75}
!145 = !DILocation(line: 61, column: 9, scope: !117)
!146 = !DILocation(line: 62, column: 24, scope: !112)
!147 = !DILocation(line: 62, column: 9, scope: !112)
!148 = !DILocation(line: 63, column: 24, scope: !112)
!149 = !DILocation(line: 63, column: 9, scope: !112)
!150 = !DILocation(line: 65, column: 22, scope: !112)
!151 = !DILocation(line: 65, column: 9, scope: !112)
!152 = !DILocation(line: 67, column: 1, scope: !105)
