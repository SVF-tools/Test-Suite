; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdin = external global ptr, align 8
@.str = private unnamed_addr constant [16 x i8] c"fgets() failed.\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"ERROR: Array index is negative.\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"ERROR: Array index is out-of-bounds\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_bad() #0 {
entry:
  %data = alloca i32, align 4
  %inputBuffer = alloca [14 x i8], align 1
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 1 %inputBuffer, i8 0, i64 14, i1 false)
  %arraydecay = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %0 = load ptr, ptr @stdin, align 8
  %call = call ptr @fgets(ptr noundef %arraydecay, i32 noundef 14, ptr noundef %0)
  %cmp = icmp ne ptr %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call2 = call i32 @atoi(ptr noundef %arraydecay1) #4
  store i32 %call2, ptr %data, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %1 = load i32, ptr %data, align 4
  %cmp3 = icmp sge i32 %1, 0
  br i1 %cmp3, label %if.then4, label %if.else11

if.then4:                                         ; preds = %if.end
  %2 = load i32, ptr %data, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  %arraydecay5 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %3 = load i32, ptr %data, align 4
  %conv = sext i32 %3 to i64
  %mul = mul i64 %conv, 4
  %sub = sub i64 %mul, 1
  %call6 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay5, i64 noundef %sub)
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %4 = load i32, ptr %i, align 4
  %cmp7 = icmp slt i32 %4, 10
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, ptr %i, align 4
  %idxprom9 = sext i32 %5 to i64
  %arrayidx10 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom9
  %6 = load i32, ptr %arrayidx10, align 4
  call void @printIntLine(i32 noundef %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, ptr %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  br label %if.end12

if.else11:                                        ; preds = %if.end
  call void @printLine(ptr noundef @.str.1)
  br label %if.end12

if.end12:                                         ; preds = %if.else11, %for.end
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

declare ptr @fgets(ptr noundef, i32 noundef, ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @atoi(ptr noundef) #3

declare void @printLine(ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #2

declare void @printIntLine(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01_good() #0 {
entry:
  call void @goodG2B()
  call void @goodB2G()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca i32, align 4
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  store i32 7, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %0 = load i32, ptr %data, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %data, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %2 = load i32, ptr %data, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 4
  %sub = sub i64 %mul, 1
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %sub)
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, ptr %i, align 4
  %cmp1 = icmp slt i32 %3, 10
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, ptr %i, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom3
  %5 = load i32, ptr %arrayidx4, align 4
  call void @printIntLine(i32 noundef %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str.1)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void
}

declare i32 @SAFE_BUFACCESS(...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 {
entry:
  %data = alloca i32, align 4
  %inputBuffer = alloca [14 x i8], align 1
  %i = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 1 %inputBuffer, i8 0, i64 14, i1 false)
  %arraydecay = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %0 = load ptr, ptr @stdin, align 8
  %call = call ptr @fgets(ptr noundef %arraydecay, i32 noundef 14, ptr noundef %0)
  %cmp = icmp ne ptr %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call2 = call i32 @atoi(ptr noundef %arraydecay1) #4
  store i32 %call2, ptr %data, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %1 = load i32, ptr %data, align 4
  %cmp3 = icmp sge i32 %1, 0
  br i1 %cmp3, label %land.lhs.true, label %if.else12

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, ptr %data, align 4
  %cmp4 = icmp slt i32 %2, 10
  br i1 %cmp4, label %if.then5, label %if.else12

if.then5:                                         ; preds = %land.lhs.true
  %3 = load i32, ptr %data, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  store i32 1, ptr %arrayidx, align 4
  %arraydecay6 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %4 = load i32, ptr %data, align 4
  %conv = sext i32 %4 to i64
  %mul = mul i64 %conv, 4
  %sub = sub i64 %mul, 1
  %call7 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay6, i64 noundef %sub)
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then5
  %5 = load i32, ptr %i, align 4
  %cmp8 = icmp slt i32 %5, 10
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, ptr %i, align 4
  %idxprom10 = sext i32 %6 to i64
  %arrayidx11 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom10
  %7 = load i32, ptr %arrayidx11, align 4
  call void @printIntLine(i32 noundef %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, ptr %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !9

for.end:                                          ; preds = %for.cond
  br label %if.end13

if.else12:                                        ; preds = %land.lhs.true, %if.end
  call void @printLine(ptr noundef @.str.2)
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %for.end
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
