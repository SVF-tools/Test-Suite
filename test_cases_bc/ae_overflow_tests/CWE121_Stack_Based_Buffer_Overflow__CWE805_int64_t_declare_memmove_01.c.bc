; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_bad() #0 !dbg !35 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i64], align 16
  %dataGoodBuffer = alloca [100 x i64], align 16
  %source = alloca [100 x i64], align 16
    #dbg_declare(ptr %data, !39, !DIExpression(), !46)
    #dbg_declare(ptr %dataBadBuffer, !47, !DIExpression(), !51)
    #dbg_declare(ptr %dataGoodBuffer, !52, !DIExpression(), !56)
  %arraydecay = getelementptr inbounds [50 x i64], ptr %dataBadBuffer, i64 0, i64 0, !dbg !57
  store ptr %arraydecay, ptr %data, align 8, !dbg !58
    #dbg_declare(ptr %source, !59, !DIExpression(), !61)
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 800, i1 false), !dbg !61
  %0 = load ptr, ptr %data, align 8, !dbg !62
  %arraydecay1 = getelementptr inbounds [100 x i64], ptr %source, i64 0, i64 0, !dbg !63
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %0, ptr align 16 %arraydecay1, i64 800, i1 false), !dbg !63
  %1 = load ptr, ptr %data, align 8, !dbg !64
  %call = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %1, i64 noundef 799), !dbg !65
  %arraydecay2 = getelementptr inbounds [100 x i64], ptr %source, i64 0, i64 0, !dbg !66
  %call3 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef 799), !dbg !67
  %2 = load ptr, ptr %data, align 8, !dbg !68
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 0, !dbg !68
  %3 = load i64, ptr %arrayidx, align 8, !dbg !68
  call void @printLongLongLine(i64 noundef %3), !dbg !69
  ret void, !dbg !70
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

declare void @printLongLongLine(i64 noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_good() #0 !dbg !71 {
entry:
  call void @goodG2B(), !dbg !72
  ret void, !dbg !73
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !74 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !80, !DIExpression(), !81)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !82, !DIExpression(), !83)
  %call = call i64 @time(ptr noundef null) #5, !dbg !84
  %conv = trunc i64 %call to i32, !dbg !85
  call void @srand(i32 noundef %conv) #5, !dbg !86
  call void @printLine(ptr noundef @.str), !dbg !87
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_good(), !dbg !88
  call void @printLine(ptr noundef @.str.1), !dbg !89
  call void @printLine(ptr noundef @.str.2), !dbg !90
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_bad(), !dbg !91
  call void @printLine(ptr noundef @.str.3), !dbg !92
  ret i32 0, !dbg !93
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #4

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #4

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !94 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca [50 x i64], align 16
  %dataGoodBuffer = alloca [100 x i64], align 16
  %source = alloca [100 x i64], align 16
    #dbg_declare(ptr %data, !95, !DIExpression(), !96)
    #dbg_declare(ptr %dataBadBuffer, !97, !DIExpression(), !98)
    #dbg_declare(ptr %dataGoodBuffer, !99, !DIExpression(), !100)
  %arraydecay = getelementptr inbounds [100 x i64], ptr %dataGoodBuffer, i64 0, i64 0, !dbg !101
  store ptr %arraydecay, ptr %data, align 8, !dbg !102
    #dbg_declare(ptr %source, !103, !DIExpression(), !105)
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 800, i1 false), !dbg !105
  %0 = load ptr, ptr %data, align 8, !dbg !106
  %arraydecay1 = getelementptr inbounds [100 x i64], ptr %source, i64 0, i64 0, !dbg !107
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %0, ptr align 16 %arraydecay1, i64 800, i1 false), !dbg !107
  %1 = load ptr, ptr %data, align 8, !dbg !108
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %1, i64 noundef 799), !dbg !109
  %arraydecay2 = getelementptr inbounds [100 x i64], ptr %source, i64 0, i64 0, !dbg !110
  %call3 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef 799), !dbg !111
  %2 = load ptr, ptr %data, align 8, !dbg !112
  %arrayidx = getelementptr inbounds i64, ptr %2, i64 0, !dbg !112
  %3 = load i64, ptr %arrayidx, align 8, !dbg !112
  call void @printLongLongLine(i64 noundef %3), !dbg !113
  ret void, !dbg !114
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!27, !28, !29, !30, !31, !32, !33}
!llvm.ident = !{!34}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 81, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "d3831a96a72c461970e78a9e15ca6322")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 83, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 86, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 88, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !26, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "d3831a96a72c461970e78a9e15ca6322")
!24 = !{!25}
!25 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!26 = !{!0, !7, !12, !17}
!27 = !{i32 7, !"Dwarf Version", i32 5}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 8, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 2}
!33 = !{i32 7, !"frame-pointer", i32 2}
!34 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!35 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_bad", scope: !2, file: !2, line: 21, type: !36, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !{}
!39 = !DILocalVariable(name: "data", scope: !35, file: !2, line: 23, type: !40)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !42, line: 27, baseType: !43)
!42 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "", checksumkind: CSK_MD5, checksum: "649b383a60bfa3eb90e85840b2b0be20")
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !44, line: 44, baseType: !45)
!44 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "", checksumkind: CSK_MD5, checksum: "e1865d9fe29fe1b5ced550b7ba458f9e")
!45 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!46 = !DILocation(line: 23, column: 15, scope: !35)
!47 = !DILocalVariable(name: "dataBadBuffer", scope: !35, file: !2, line: 24, type: !48)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 3200, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 50)
!51 = !DILocation(line: 24, column: 13, scope: !35)
!52 = !DILocalVariable(name: "dataGoodBuffer", scope: !35, file: !2, line: 25, type: !53)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 6400, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 100)
!56 = !DILocation(line: 25, column: 13, scope: !35)
!57 = !DILocation(line: 28, column: 12, scope: !35)
!58 = !DILocation(line: 28, column: 10, scope: !35)
!59 = !DILocalVariable(name: "source", scope: !60, file: !2, line: 30, type: !53)
!60 = distinct !DILexicalBlock(scope: !35, file: !2, line: 29, column: 5)
!61 = !DILocation(line: 30, column: 17, scope: !60)
!62 = !DILocation(line: 32, column: 17, scope: !60)
!63 = !DILocation(line: 32, column: 9, scope: !60)
!64 = !DILocation(line: 33, column: 26, scope: !60)
!65 = !DILocation(line: 33, column: 9, scope: !60)
!66 = !DILocation(line: 34, column: 24, scope: !60)
!67 = !DILocation(line: 34, column: 9, scope: !60)
!68 = !DILocation(line: 35, column: 27, scope: !60)
!69 = !DILocation(line: 35, column: 9, scope: !60)
!70 = !DILocation(line: 37, column: 1, scope: !35)
!71 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01_good", scope: !2, file: !2, line: 61, type: !36, scopeLine: 62, spFlags: DISPFlagDefinition, unit: !22)
!72 = !DILocation(line: 63, column: 5, scope: !71)
!73 = !DILocation(line: 64, column: 1, scope: !71)
!74 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 76, type: !75, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !38)
!75 = !DISubroutineType(types: !76)
!76 = !{!77, !77, !78}
!77 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!78 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !79, size: 64)
!79 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!80 = !DILocalVariable(name: "argc", arg: 1, scope: !74, file: !2, line: 76, type: !77)
!81 = !DILocation(line: 76, column: 14, scope: !74)
!82 = !DILocalVariable(name: "argv", arg: 2, scope: !74, file: !2, line: 76, type: !78)
!83 = !DILocation(line: 76, column: 27, scope: !74)
!84 = !DILocation(line: 79, column: 22, scope: !74)
!85 = !DILocation(line: 79, column: 12, scope: !74)
!86 = !DILocation(line: 79, column: 5, scope: !74)
!87 = !DILocation(line: 81, column: 5, scope: !74)
!88 = !DILocation(line: 82, column: 5, scope: !74)
!89 = !DILocation(line: 83, column: 5, scope: !74)
!90 = !DILocation(line: 86, column: 5, scope: !74)
!91 = !DILocation(line: 87, column: 5, scope: !74)
!92 = !DILocation(line: 88, column: 5, scope: !74)
!93 = !DILocation(line: 90, column: 5, scope: !74)
!94 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 44, type: !36, scopeLine: 45, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !38)
!95 = !DILocalVariable(name: "data", scope: !94, file: !2, line: 46, type: !40)
!96 = !DILocation(line: 46, column: 15, scope: !94)
!97 = !DILocalVariable(name: "dataBadBuffer", scope: !94, file: !2, line: 47, type: !48)
!98 = !DILocation(line: 47, column: 13, scope: !94)
!99 = !DILocalVariable(name: "dataGoodBuffer", scope: !94, file: !2, line: 48, type: !53)
!100 = !DILocation(line: 48, column: 13, scope: !94)
!101 = !DILocation(line: 50, column: 12, scope: !94)
!102 = !DILocation(line: 50, column: 10, scope: !94)
!103 = !DILocalVariable(name: "source", scope: !104, file: !2, line: 52, type: !53)
!104 = distinct !DILexicalBlock(scope: !94, file: !2, line: 51, column: 5)
!105 = !DILocation(line: 52, column: 17, scope: !104)
!106 = !DILocation(line: 54, column: 17, scope: !104)
!107 = !DILocation(line: 54, column: 9, scope: !104)
!108 = !DILocation(line: 55, column: 24, scope: !104)
!109 = !DILocation(line: 55, column: 9, scope: !104)
!110 = !DILocation(line: 56, column: 24, scope: !104)
!111 = !DILocation(line: 56, column: 9, scope: !104)
!112 = !DILocation(line: 57, column: 27, scope: !104)
!113 = !DILocation(line: 57, column: 9, scope: !104)
!114 = !DILocation(line: 59, column: 1, scope: !94)
