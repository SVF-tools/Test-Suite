; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__CWE129_listen_socket_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__CWE129_listen_socket_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }

@.str = private unnamed_addr constant [31 x i8] c"ERROR: Array index is negative\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"ERROR: Array index is out-of-bounds\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__CWE129_listen_socket_01_bad() #0 {
entry:
  %data = alloca i32, align 4
  %recvResult = alloca i32, align 4
  %service = alloca %struct.sockaddr_in, align 4
  %listenSocket = alloca i32, align 4
  %acceptSocket = alloca i32, align 4
  %inputBuffer = alloca [14 x i8], align 1
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  store i32 -1, ptr %listenSocket, align 4
  store i32 -1, ptr %acceptSocket, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @socket(i32 noundef 2, i32 noundef 1, i32 noundef 6) #6
  store i32 %call, ptr %listenSocket, align 4
  %0 = load i32, ptr %listenSocket, align 4
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %do.end

if.end:                                           ; preds = %do.body
  call void @llvm.memset.p0.i64(ptr align 4 %service, i8 0, i64 16, i1 false)
  %sin_family = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 0
  store i16 2, ptr %sin_family, align 4
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 2
  %s_addr = getelementptr inbounds %struct.in_addr, ptr %sin_addr, i32 0, i32 0
  store i32 0, ptr %s_addr, align 4
  %call1 = call zeroext i16 @htons(i16 noundef zeroext 27015) #7
  %sin_port = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 1
  store i16 %call1, ptr %sin_port, align 2
  %1 = load i32, ptr %listenSocket, align 4
  %call2 = call i32 @bind(i32 noundef %1, ptr noundef %service, i32 noundef 16) #6
  %cmp3 = icmp eq i32 %call2, -1
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %do.end

if.end5:                                          ; preds = %if.end
  %2 = load i32, ptr %listenSocket, align 4
  %call6 = call i32 @listen(i32 noundef %2, i32 noundef 5) #6
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  br label %do.end

if.end9:                                          ; preds = %if.end5
  %3 = load i32, ptr %listenSocket, align 4
  %call10 = call i32 @accept(i32 noundef %3, ptr noundef null, ptr noundef null)
  store i32 %call10, ptr %acceptSocket, align 4
  %4 = load i32, ptr %acceptSocket, align 4
  %cmp11 = icmp eq i32 %4, -1
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %do.end

if.end13:                                         ; preds = %if.end9
  %5 = load i32, ptr %acceptSocket, align 4
  %arraydecay = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call14 = call i64 @recv(i32 noundef %5, ptr noundef %arraydecay, i64 noundef 13, i32 noundef 0)
  %conv = trunc i64 %call14 to i32
  store i32 %conv, ptr %recvResult, align 4
  %6 = load i32, ptr %recvResult, align 4
  %cmp15 = icmp eq i32 %6, -1
  br i1 %cmp15, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end13
  %7 = load i32, ptr %recvResult, align 4
  %cmp17 = icmp eq i32 %7, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %lor.lhs.false, %if.end13
  br label %do.end

if.end20:                                         ; preds = %lor.lhs.false
  %8 = load i32, ptr %recvResult, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 %idxprom
  store i8 0, ptr %arrayidx, align 1
  %arraydecay21 = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call22 = call i32 @atoi(ptr noundef %arraydecay21) #8
  store i32 %call22, ptr %data, align 4
  br label %do.end

do.end:                                           ; preds = %if.end20, %if.then19, %if.then12, %if.then8, %if.then4, %if.then
  %9 = load i32, ptr %listenSocket, align 4
  %cmp23 = icmp ne i32 %9, -1
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %do.end
  %10 = load i32, ptr %listenSocket, align 4
  %call26 = call i32 @close(i32 noundef %10)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %do.end
  %11 = load i32, ptr %acceptSocket, align 4
  %cmp28 = icmp ne i32 %11, -1
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end27
  %12 = load i32, ptr %acceptSocket, align 4
  %call31 = call i32 @close(i32 noundef %12)
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end27
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %13 = load i32, ptr %data, align 4
  %cmp33 = icmp sge i32 %13, 0
  br i1 %cmp33, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.end32
  %14 = load i32, ptr %data, align 4
  %idxprom36 = sext i32 %14 to i64
  %arrayidx37 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom36
  %15 = load i32, ptr %arrayidx37, align 4
  call void @printIntLine(i32 noundef %15)
  %arraydecay38 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %16 = load i32, ptr %data, align 4
  %conv39 = sext i32 %16 to i64
  %mul = mul i64 %conv39, 4
  %call40 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay38, i64 noundef %mul)
  br label %if.end41

if.else:                                          ; preds = %if.end32
  call void @printLine(ptr noundef @.str)
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.then35
  ret void
}

; Function Attrs: nounwind
declare i32 @socket(i32 noundef, i32 noundef, i32 noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind willreturn memory(none)
declare zeroext i16 @htons(i16 noundef zeroext) #3

; Function Attrs: nounwind
declare i32 @bind(i32 noundef, ptr noundef, i32 noundef) #1

; Function Attrs: nounwind
declare i32 @listen(i32 noundef, i32 noundef) #1

declare i32 @accept(i32 noundef, ptr noundef, ptr noundef) #4

declare i64 @recv(i32 noundef, ptr noundef, i64 noundef, i32 noundef) #4

; Function Attrs: nounwind willreturn memory(read)
declare i32 @atoi(ptr noundef) #5

declare i32 @close(i32 noundef) #4

declare void @printIntLine(i32 noundef) #4

declare i32 @UNSAFE_BUFACCESS(...) #4

declare void @printLine(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__CWE129_listen_socket_01_good() #0 {
entry:
  call void @goodG2B()
  call void @goodB2G()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca i32, align 4
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  store i32 7, ptr %data, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %0 = load i32, ptr %data, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %data, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom
  %2 = load i32, ptr %arrayidx, align 4
  call void @printIntLine(i32 noundef %2)
  %arraydecay = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 0
  %3 = load i32, ptr %data, align 4
  %conv = sext i32 %3 to i64
  %mul = mul i64 %conv, 4
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay, i64 noundef %mul)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @printLine(ptr noundef @.str)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @SAFE_BUFACCESS(...) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodB2G() #0 {
entry:
  %data = alloca i32, align 4
  %recvResult = alloca i32, align 4
  %service = alloca %struct.sockaddr_in, align 4
  %listenSocket = alloca i32, align 4
  %acceptSocket = alloca i32, align 4
  %inputBuffer = alloca [14 x i8], align 1
  %buffer = alloca [10 x i32], align 16
  store i32 -1, ptr %data, align 4
  store i32 -1, ptr %listenSocket, align 4
  store i32 -1, ptr %acceptSocket, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @socket(i32 noundef 2, i32 noundef 1, i32 noundef 6) #6
  store i32 %call, ptr %listenSocket, align 4
  %0 = load i32, ptr %listenSocket, align 4
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %do.end

if.end:                                           ; preds = %do.body
  call void @llvm.memset.p0.i64(ptr align 4 %service, i8 0, i64 16, i1 false)
  %sin_family = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 0
  store i16 2, ptr %sin_family, align 4
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 2
  %s_addr = getelementptr inbounds %struct.in_addr, ptr %sin_addr, i32 0, i32 0
  store i32 0, ptr %s_addr, align 4
  %call1 = call zeroext i16 @htons(i16 noundef zeroext 27015) #7
  %sin_port = getelementptr inbounds %struct.sockaddr_in, ptr %service, i32 0, i32 1
  store i16 %call1, ptr %sin_port, align 2
  %1 = load i32, ptr %listenSocket, align 4
  %call2 = call i32 @bind(i32 noundef %1, ptr noundef %service, i32 noundef 16) #6
  %cmp3 = icmp eq i32 %call2, -1
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %do.end

if.end5:                                          ; preds = %if.end
  %2 = load i32, ptr %listenSocket, align 4
  %call6 = call i32 @listen(i32 noundef %2, i32 noundef 5) #6
  %cmp7 = icmp eq i32 %call6, -1
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  br label %do.end

if.end9:                                          ; preds = %if.end5
  %3 = load i32, ptr %listenSocket, align 4
  %call10 = call i32 @accept(i32 noundef %3, ptr noundef null, ptr noundef null)
  store i32 %call10, ptr %acceptSocket, align 4
  %4 = load i32, ptr %acceptSocket, align 4
  %cmp11 = icmp eq i32 %4, -1
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %do.end

if.end13:                                         ; preds = %if.end9
  %5 = load i32, ptr %acceptSocket, align 4
  %arraydecay = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call14 = call i64 @recv(i32 noundef %5, ptr noundef %arraydecay, i64 noundef 13, i32 noundef 0)
  %conv = trunc i64 %call14 to i32
  store i32 %conv, ptr %recvResult, align 4
  %6 = load i32, ptr %recvResult, align 4
  %cmp15 = icmp eq i32 %6, -1
  br i1 %cmp15, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end13
  %7 = load i32, ptr %recvResult, align 4
  %cmp17 = icmp eq i32 %7, 0
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %lor.lhs.false, %if.end13
  br label %do.end

if.end20:                                         ; preds = %lor.lhs.false
  %8 = load i32, ptr %recvResult, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 %idxprom
  store i8 0, ptr %arrayidx, align 1
  %arraydecay21 = getelementptr inbounds [14 x i8], ptr %inputBuffer, i64 0, i64 0
  %call22 = call i32 @atoi(ptr noundef %arraydecay21) #8
  store i32 %call22, ptr %data, align 4
  br label %do.end

do.end:                                           ; preds = %if.end20, %if.then19, %if.then12, %if.then8, %if.then4, %if.then
  %9 = load i32, ptr %listenSocket, align 4
  %cmp23 = icmp ne i32 %9, -1
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %do.end
  %10 = load i32, ptr %listenSocket, align 4
  %call26 = call i32 @close(i32 noundef %10)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %do.end
  %11 = load i32, ptr %acceptSocket, align 4
  %cmp28 = icmp ne i32 %11, -1
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end27
  %12 = load i32, ptr %acceptSocket, align 4
  %call31 = call i32 @close(i32 noundef %12)
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end27
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 40, i1 false)
  %13 = load i32, ptr %data, align 4
  %cmp33 = icmp sge i32 %13, 0
  br i1 %cmp33, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end32
  %14 = load i32, ptr %data, align 4
  %cmp35 = icmp slt i32 %14, 10
  br i1 %cmp35, label %if.then37, label %if.else

if.then37:                                        ; preds = %land.lhs.true
  %15 = load i32, ptr %data, align 4
  %idxprom38 = sext i32 %15 to i64
  %arrayidx39 = getelementptr inbounds [10 x i32], ptr %buffer, i64 0, i64 %idxprom38
  %16 = load i32, ptr %arrayidx39, align 4
  call void @printIntLine(i32 noundef %16)
  br label %if.end40

if.else:                                          ; preds = %land.lhs.true, %if.end32
  call void @printLine(ptr noundef @.str.1)
  br label %if.end40

if.end40:                                         ; preds = %if.else, %if.then37
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind }
attributes #7 = { nounwind willreturn memory(none) }
attributes #8 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
