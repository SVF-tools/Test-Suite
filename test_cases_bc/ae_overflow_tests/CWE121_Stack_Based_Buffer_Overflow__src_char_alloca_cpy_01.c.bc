; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_bad() #0 !dbg !36 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca ptr, align 8
  %dest = alloca [50 x i8], align 16
    #dbg_declare(ptr %data, !40, !DIExpression(), !41)
    #dbg_declare(ptr %dataBuffer, !42, !DIExpression(), !43)
  %0 = alloca i8, i64 100, align 16, !dbg !44
  store ptr %0, ptr %dataBuffer, align 8, !dbg !43
  %1 = load ptr, ptr %dataBuffer, align 8, !dbg !45
  store ptr %1, ptr %data, align 8, !dbg !46
  %2 = load ptr, ptr %data, align 8, !dbg !47
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 99, i1 false), !dbg !48
  %3 = load ptr, ptr %data, align 8, !dbg !49
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 99, !dbg !49
  store i8 0, ptr %arrayidx, align 1, !dbg !50
    #dbg_declare(ptr %dest, !51, !DIExpression(), !56)
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !56
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !57
  %4 = load ptr, ptr %data, align 8, !dbg !58
  %call = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %4) #4, !dbg !59
  %arraydecay1 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !60
  %call2 = call i32 (ptr, i32, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay1, i32 noundef 99), !dbg !61
  %5 = load ptr, ptr %data, align 8, !dbg !62
  %call3 = call i32 (ptr, i32, ...) @SAFE_BUFACCESS(ptr noundef %5, i32 noundef 99), !dbg !63
  %6 = load ptr, ptr %data, align 8, !dbg !64
  call void @printLine(ptr noundef %6), !dbg !65
  ret void, !dbg !66
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #2

declare i32 @UNSAFE_BUFACCESS(...) #3

declare i32 @SAFE_BUFACCESS(...) #3

declare void @printLine(ptr noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_good() #0 !dbg !67 {
entry:
  call void @goodG2B(), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !70 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !75, !DIExpression(), !76)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !77, !DIExpression(), !78)
  %call = call i64 @time(ptr noundef null) #4, !dbg !79
  %conv = trunc i64 %call to i32, !dbg !80
  call void @srand(i32 noundef %conv) #4, !dbg !81
  call void @printLine(ptr noundef @.str), !dbg !82
  call void @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_good(), !dbg !83
  call void @printLine(ptr noundef @.str.1), !dbg !84
  call void @printLine(ptr noundef @.str.2), !dbg !85
  call void @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_bad(), !dbg !86
  call void @printLine(ptr noundef @.str.3), !dbg !87
  ret i32 0, !dbg !88
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #2

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !89 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca ptr, align 8
  %dest = alloca [50 x i8], align 16
    #dbg_declare(ptr %data, !90, !DIExpression(), !91)
    #dbg_declare(ptr %dataBuffer, !92, !DIExpression(), !93)
  %0 = alloca i8, i64 100, align 16, !dbg !94
  store ptr %0, ptr %dataBuffer, align 8, !dbg !93
  %1 = load ptr, ptr %dataBuffer, align 8, !dbg !95
  store ptr %1, ptr %data, align 8, !dbg !96
  %2 = load ptr, ptr %data, align 8, !dbg !97
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 49, i1 false), !dbg !98
  %3 = load ptr, ptr %data, align 8, !dbg !99
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 49, !dbg !99
  store i8 0, ptr %arrayidx, align 1, !dbg !100
    #dbg_declare(ptr %dest, !101, !DIExpression(), !103)
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !103
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !104
  %4 = load ptr, ptr %data, align 8, !dbg !105
  %call = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %4) #4, !dbg !106
  %arraydecay1 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !107
  %call2 = call i32 (ptr, i32, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay1, i32 noundef 49), !dbg !108
  %5 = load ptr, ptr %data, align 8, !dbg !109
  %call3 = call i32 (ptr, i32, ...) @SAFE_BUFACCESS(ptr noundef %5, i32 noundef 49), !dbg !110
  %6 = load ptr, ptr %data, align 8, !dbg !111
  call void @printLine(ptr noundef %6), !dbg !112
  ret void, !dbg !113
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!28, !29, !30, !31, !32, !33, !34}
!llvm.ident = !{!35}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 84, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "6250ce27cfca7df136b644e63083b2d9")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 86, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 89, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 91, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !27, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "6250ce27cfca7df136b644e63083b2d9")
!24 = !{!25, !26}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!26 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!27 = !{!0, !7, !12, !17}
!28 = !{i32 7, !"Dwarf Version", i32 5}
!29 = !{i32 2, !"Debug Info Version", i32 3}
!30 = !{i32 1, !"wchar_size", i32 4}
!31 = !{i32 8, !"PIC Level", i32 2}
!32 = !{i32 7, !"PIE Level", i32 2}
!33 = !{i32 7, !"uwtable", i32 2}
!34 = !{i32 7, !"frame-pointer", i32 2}
!35 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!36 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_bad", scope: !2, file: !2, line: 23, type: !37, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !39)
!37 = !DISubroutineType(types: !38)
!38 = !{null}
!39 = !{}
!40 = !DILocalVariable(name: "data", scope: !36, file: !2, line: 25, type: !25)
!41 = !DILocation(line: 25, column: 12, scope: !36)
!42 = !DILocalVariable(name: "dataBuffer", scope: !36, file: !2, line: 26, type: !25)
!43 = !DILocation(line: 26, column: 12, scope: !36)
!44 = !DILocation(line: 26, column: 33, scope: !36)
!45 = !DILocation(line: 27, column: 12, scope: !36)
!46 = !DILocation(line: 27, column: 10, scope: !36)
!47 = !DILocation(line: 29, column: 12, scope: !36)
!48 = !DILocation(line: 29, column: 5, scope: !36)
!49 = !DILocation(line: 30, column: 5, scope: !36)
!50 = !DILocation(line: 30, column: 17, scope: !36)
!51 = !DILocalVariable(name: "dest", scope: !52, file: !2, line: 32, type: !53)
!52 = distinct !DILexicalBlock(scope: !36, file: !2, line: 31, column: 5)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 400, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 50)
!56 = !DILocation(line: 32, column: 14, scope: !52)
!57 = !DILocation(line: 34, column: 16, scope: !52)
!58 = !DILocation(line: 34, column: 22, scope: !52)
!59 = !DILocation(line: 34, column: 9, scope: !52)
!60 = !DILocation(line: 35, column: 26, scope: !52)
!61 = !DILocation(line: 35, column: 9, scope: !52)
!62 = !DILocation(line: 36, column: 24, scope: !52)
!63 = !DILocation(line: 36, column: 9, scope: !52)
!64 = !DILocation(line: 37, column: 19, scope: !52)
!65 = !DILocation(line: 37, column: 9, scope: !52)
!66 = !DILocation(line: 39, column: 1, scope: !36)
!67 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01_good", scope: !2, file: !2, line: 64, type: !37, scopeLine: 65, spFlags: DISPFlagDefinition, unit: !22)
!68 = !DILocation(line: 66, column: 5, scope: !67)
!69 = !DILocation(line: 67, column: 1, scope: !67)
!70 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 79, type: !71, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !39)
!71 = !DISubroutineType(types: !72)
!72 = !{!73, !73, !74}
!73 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!75 = !DILocalVariable(name: "argc", arg: 1, scope: !70, file: !2, line: 79, type: !73)
!76 = !DILocation(line: 79, column: 14, scope: !70)
!77 = !DILocalVariable(name: "argv", arg: 2, scope: !70, file: !2, line: 79, type: !74)
!78 = !DILocation(line: 79, column: 27, scope: !70)
!79 = !DILocation(line: 82, column: 22, scope: !70)
!80 = !DILocation(line: 82, column: 12, scope: !70)
!81 = !DILocation(line: 82, column: 5, scope: !70)
!82 = !DILocation(line: 84, column: 5, scope: !70)
!83 = !DILocation(line: 85, column: 5, scope: !70)
!84 = !DILocation(line: 86, column: 5, scope: !70)
!85 = !DILocation(line: 89, column: 5, scope: !70)
!86 = !DILocation(line: 90, column: 5, scope: !70)
!87 = !DILocation(line: 91, column: 5, scope: !70)
!88 = !DILocation(line: 93, column: 5, scope: !70)
!89 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 46, type: !37, scopeLine: 47, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !39)
!90 = !DILocalVariable(name: "data", scope: !89, file: !2, line: 48, type: !25)
!91 = !DILocation(line: 48, column: 12, scope: !89)
!92 = !DILocalVariable(name: "dataBuffer", scope: !89, file: !2, line: 49, type: !25)
!93 = !DILocation(line: 49, column: 12, scope: !89)
!94 = !DILocation(line: 49, column: 33, scope: !89)
!95 = !DILocation(line: 50, column: 12, scope: !89)
!96 = !DILocation(line: 50, column: 10, scope: !89)
!97 = !DILocation(line: 52, column: 12, scope: !89)
!98 = !DILocation(line: 52, column: 5, scope: !89)
!99 = !DILocation(line: 53, column: 5, scope: !89)
!100 = !DILocation(line: 53, column: 16, scope: !89)
!101 = !DILocalVariable(name: "dest", scope: !102, file: !2, line: 55, type: !53)
!102 = distinct !DILexicalBlock(scope: !89, file: !2, line: 54, column: 5)
!103 = !DILocation(line: 55, column: 14, scope: !102)
!104 = !DILocation(line: 57, column: 16, scope: !102)
!105 = !DILocation(line: 57, column: 22, scope: !102)
!106 = !DILocation(line: 57, column: 9, scope: !102)
!107 = !DILocation(line: 58, column: 24, scope: !102)
!108 = !DILocation(line: 58, column: 9, scope: !102)
!109 = !DILocation(line: 59, column: 24, scope: !102)
!110 = !DILocation(line: 59, column: 9, scope: !102)
!111 = !DILocation(line: 60, column: 19, scope: !102)
!112 = !DILocation(line: 60, column: 9, scope: !102)
!113 = !DILocation(line: 62, column: 1, scope: !89)
