; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__malloc_char_loop_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__malloc_char_loop_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__malloc_char_loop_01_bad() #0 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i8], align 16
  store ptr null, ptr %data, align 8
  %call = call noalias ptr @malloc(i64 noundef 50) #7
  store ptr %call, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8
  unreachable

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 65, i64 49, i1 false)
  %2 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 49
  store i8 0, ptr %arrayidx, align 1
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 67, i64 99, i1 false)
  %arrayidx1 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx1, align 1
  %arraydecay2 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call3 = call i64 @strlen(ptr noundef %arraydecay2) #9
  store i64 %call3, ptr %destLen, align 8
  %3 = load ptr, ptr %data, align 8
  %4 = load i64, ptr %destLen, align 8
  %sub = sub i64 %4, 1
  %call4 = call i32 (ptr, i64, i32, ...) @BOF_CHECK_GEP(ptr noundef %3, i64 noundef %sub, i32 noundef 1)
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %i, align 8
  %6 = load i64, ptr %destLen, align 8
  %cmp5 = icmp ult i64 %5, %6
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8
  %8 = load i64, ptr %i, align 8
  %arrayidx6 = getelementptr inbounds i8, ptr %7, i64 %8
  %9 = load i8, ptr %arrayidx6, align 1
  %10 = load i64, ptr %i, align 8
  %arrayidx7 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 %10
  store i8 %9, ptr %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, ptr %i, align 8
  %inc = add i64 %11, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %12 = load ptr, ptr %data, align 8
  %13 = load i64, ptr %destLen, align 8
  %mul = mul i64 %13, 1
  %sub8 = sub i64 %mul, 1
  %call9 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %12, i64 noundef %sub8)
  %arrayidx10 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx10, align 1
  %arraydecay11 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @printLine(ptr noundef %arraydecay11)
  %14 = load ptr, ptr %data, align 8
  call void @free(ptr noundef %14) #10
  ret void
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #4

declare i32 @BOF_CHECK_GEP(...) #5

declare i32 @UNSAFE_BUFACCESS(...) #5

declare void @printLine(ptr noundef) #5

; Function Attrs: nounwind
declare void @free(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__malloc_char_loop_01_good() #0 {
entry:
  call void @goodG2B()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca ptr, align 8
  %i = alloca i64, align 8
  %destLen = alloca i64, align 8
  %dest = alloca [100 x i8], align 16
  store ptr null, ptr %data, align 8
  %call = call noalias ptr @malloc(i64 noundef 100) #7
  store ptr %call, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #8
  unreachable

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 65, i64 99, i1 false)
  %2 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 99
  store i8 0, ptr %arrayidx, align 1
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 67, i64 99, i1 false)
  %arrayidx1 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx1, align 1
  %arraydecay2 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call3 = call i64 @strlen(ptr noundef %arraydecay2) #9
  store i64 %call3, ptr %destLen, align 8
  %3 = load ptr, ptr %data, align 8
  %4 = load i64, ptr %destLen, align 8
  %sub = sub i64 %4, 1
  %call4 = call i32 (ptr, i64, i32, ...) @BOF_CHECK_GEP(ptr noundef %3, i64 noundef %sub, i32 noundef 0)
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, ptr %i, align 8
  %6 = load i64, ptr %destLen, align 8
  %cmp5 = icmp ult i64 %5, %6
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8
  %8 = load i64, ptr %i, align 8
  %arrayidx6 = getelementptr inbounds i8, ptr %7, i64 %8
  %9 = load i8, ptr %arrayidx6, align 1
  %10 = load i64, ptr %i, align 8
  %arrayidx7 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 %10
  store i8 %9, ptr %arrayidx7, align 1
  %11 = load ptr, ptr %data, align 8
  %12 = load i64, ptr %i, align 8
  %add = add i64 %12, 1
  %mul = mul i64 %add, 1
  %sub8 = sub i64 %mul, 1
  %call9 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %11, i64 noundef %sub8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i64, ptr %i, align 8
  %inc = add i64 %13, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr %data, align 8
  %15 = load i64, ptr %destLen, align 8
  %mul10 = mul i64 %15, 1
  %sub11 = sub i64 %mul10, 1
  %call12 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %14, i64 noundef %sub11)
  %arrayidx13 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx13, align 1
  %arraydecay14 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @printLine(ptr noundef %arraydecay14)
  %16 = load ptr, ptr %data, align 8
  call void @free(ptr noundef %16) #10
  ret void
}

declare i32 @SAFE_BUFACCESS(...) #5

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind allocsize(0) }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind willreturn memory(read) }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
