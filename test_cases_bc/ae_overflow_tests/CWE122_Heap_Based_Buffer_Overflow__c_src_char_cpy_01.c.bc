; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad() #0 !dbg !37 {
entry:
  %data = alloca ptr, align 8
  %dest = alloca [50 x i8], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !41, metadata !DIExpression()), !dbg !42
  %call = call noalias ptr @malloc(i64 noundef 100) #8, !dbg !43
  store ptr %call, ptr %data, align 8, !dbg !44
  %0 = load ptr, ptr %data, align 8, !dbg !45
  %cmp = icmp eq ptr %0, null, !dbg !47
  br i1 %cmp, label %if.then, label %if.end, !dbg !48

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #9, !dbg !49
  unreachable, !dbg !49

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !51
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 65, i64 99, i1 false), !dbg !52
  %2 = load ptr, ptr %data, align 8, !dbg !53
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 99, !dbg !53
  store i8 0, ptr %arrayidx, align 1, !dbg !54
  call void @llvm.dbg.declare(metadata ptr %dest, metadata !55, metadata !DIExpression()), !dbg !60
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !60
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !61
  %3 = load ptr, ptr %data, align 8, !dbg !62
  %call1 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %3) #10, !dbg !63
  %arraydecay2 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !64
  %4 = load ptr, ptr %data, align 8, !dbg !65
  %call3 = call i64 @strlen(ptr noundef %4) #11, !dbg !66
  %mul = mul i64 %call3, 1, !dbg !67
  %sub = sub i64 %mul, 1, !dbg !68
  %call4 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef %sub), !dbg !69
  %5 = load ptr, ptr %data, align 8, !dbg !70
  %6 = load ptr, ptr %data, align 8, !dbg !71
  %call5 = call i64 @strlen(ptr noundef %6) #11, !dbg !72
  %mul6 = mul i64 %call5, 1, !dbg !73
  %sub7 = sub i64 %mul6, 1, !dbg !74
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %5, i64 noundef %sub7), !dbg !75
  %7 = load ptr, ptr %data, align 8, !dbg !76
  call void @printLine(ptr noundef %7), !dbg !77
  %8 = load ptr, ptr %data, align 8, !dbg !78
  call void @free(ptr noundef %8) #10, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #5

declare i32 @UNSAFE_BUFACCESS(...) #6

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #7

declare i32 @SAFE_BUFACCESS(...) #6

declare void @printLine(ptr noundef) #6

; Function Attrs: nounwind
declare void @free(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_good() #0 !dbg !81 {
entry:
  call void @goodG2B(), !dbg !82
  ret void, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !84 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !89, metadata !DIExpression()), !dbg !90
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %call = call i64 @time(ptr noundef null) #10, !dbg !93
  %conv = trunc i64 %call to i32, !dbg !94
  call void @srand(i32 noundef %conv) #10, !dbg !95
  call void @printLine(ptr noundef @.str), !dbg !96
  call void @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_good(), !dbg !97
  call void @printLine(ptr noundef @.str.1), !dbg !98
  call void @printLine(ptr noundef @.str.2), !dbg !99
  call void @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad(), !dbg !100
  call void @printLine(ptr noundef @.str.3), !dbg !101
  ret i32 0, !dbg !102
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #5

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !103 {
entry:
  %data = alloca ptr, align 8
  %dest = alloca [50 x i8], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !104, metadata !DIExpression()), !dbg !105
  %call = call noalias ptr @malloc(i64 noundef 100) #8, !dbg !106
  store ptr %call, ptr %data, align 8, !dbg !107
  %0 = load ptr, ptr %data, align 8, !dbg !108
  %cmp = icmp eq ptr %0, null, !dbg !110
  br i1 %cmp, label %if.then, label %if.end, !dbg !111

if.then:                                          ; preds = %entry
  call void @exit(i32 noundef -1) #9, !dbg !112
  unreachable, !dbg !112

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %data, align 8, !dbg !114
  call void @llvm.memset.p0.i64(ptr align 1 %1, i8 65, i64 49, i1 false), !dbg !115
  %2 = load ptr, ptr %data, align 8, !dbg !116
  %arrayidx = getelementptr inbounds i8, ptr %2, i64 49, !dbg !116
  store i8 0, ptr %arrayidx, align 1, !dbg !117
  call void @llvm.dbg.declare(metadata ptr %dest, metadata !118, metadata !DIExpression()), !dbg !120
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 50, i1 false), !dbg !120
  %arraydecay = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !121
  %3 = load ptr, ptr %data, align 8, !dbg !122
  %call1 = call ptr @strcpy(ptr noundef %arraydecay, ptr noundef %3) #10, !dbg !123
  %arraydecay2 = getelementptr inbounds [50 x i8], ptr %dest, i64 0, i64 0, !dbg !124
  %4 = load ptr, ptr %data, align 8, !dbg !125
  %call3 = call i64 @strlen(ptr noundef %4) #11, !dbg !126
  %mul = mul i64 %call3, 1, !dbg !127
  %sub = sub i64 %mul, 1, !dbg !128
  %call4 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef %sub), !dbg !129
  %5 = load ptr, ptr %data, align 8, !dbg !130
  %6 = load ptr, ptr %data, align 8, !dbg !131
  %call5 = call i64 @strlen(ptr noundef %6) #11, !dbg !132
  %mul6 = mul i64 %call5, 1, !dbg !133
  %sub7 = sub i64 %mul6, 1, !dbg !134
  %call8 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %5, i64 noundef %sub7), !dbg !135
  %7 = load ptr, ptr %data, align 8, !dbg !136
  call void @printLine(ptr noundef %7), !dbg !137
  %8 = load ptr, ptr %data, align 8, !dbg !138
  call void @free(ptr noundef %8) #10, !dbg !139
  ret void, !dbg !140
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind allocsize(0) }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { nounwind willreturn memory(read) }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!29, !30, !31, !32, !33, !34, !35}
!llvm.ident = !{!36}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 87, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "d03af0e7cb441c17db09625ca9fdec46")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 89, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 92, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !28, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "d03af0e7cb441c17db09625ca9fdec46")
!24 = !{!25, !26, !27}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !{!0, !7, !12, !17}
!29 = !{i32 7, !"Dwarf Version", i32 5}
!30 = !{i32 2, !"Debug Info Version", i32 3}
!31 = !{i32 1, !"wchar_size", i32 4}
!32 = !{i32 8, !"PIC Level", i32 2}
!33 = !{i32 7, !"PIE Level", i32 2}
!34 = !{i32 7, !"uwtable", i32 2}
!35 = !{i32 7, !"frame-pointer", i32 2}
!36 = !{!"clang version 16.0.0"}
!37 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_bad", scope: !2, file: !2, line: 23, type: !38, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!38 = !DISubroutineType(types: !39)
!39 = !{null}
!40 = !{}
!41 = !DILocalVariable(name: "data", scope: !37, file: !2, line: 25, type: !25)
!42 = !DILocation(line: 25, column: 12, scope: !37)
!43 = !DILocation(line: 26, column: 20, scope: !37)
!44 = !DILocation(line: 26, column: 10, scope: !37)
!45 = !DILocation(line: 27, column: 9, scope: !46)
!46 = distinct !DILexicalBlock(scope: !37, file: !2, line: 27, column: 9)
!47 = !DILocation(line: 27, column: 14, scope: !46)
!48 = !DILocation(line: 27, column: 9, scope: !37)
!49 = !DILocation(line: 27, column: 24, scope: !50)
!50 = distinct !DILexicalBlock(scope: !46, file: !2, line: 27, column: 23)
!51 = !DILocation(line: 29, column: 12, scope: !37)
!52 = !DILocation(line: 29, column: 5, scope: !37)
!53 = !DILocation(line: 30, column: 5, scope: !37)
!54 = !DILocation(line: 30, column: 17, scope: !37)
!55 = !DILocalVariable(name: "dest", scope: !56, file: !2, line: 32, type: !57)
!56 = distinct !DILexicalBlock(scope: !37, file: !2, line: 31, column: 5)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 400, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 50)
!60 = !DILocation(line: 32, column: 14, scope: !56)
!61 = !DILocation(line: 34, column: 16, scope: !56)
!62 = !DILocation(line: 34, column: 22, scope: !56)
!63 = !DILocation(line: 34, column: 9, scope: !56)
!64 = !DILocation(line: 35, column: 26, scope: !56)
!65 = !DILocation(line: 35, column: 39, scope: !56)
!66 = !DILocation(line: 35, column: 32, scope: !56)
!67 = !DILocation(line: 35, column: 44, scope: !56)
!68 = !DILocation(line: 35, column: 58, scope: !56)
!69 = !DILocation(line: 35, column: 9, scope: !56)
!70 = !DILocation(line: 36, column: 24, scope: !56)
!71 = !DILocation(line: 36, column: 37, scope: !56)
!72 = !DILocation(line: 36, column: 30, scope: !56)
!73 = !DILocation(line: 36, column: 42, scope: !56)
!74 = !DILocation(line: 36, column: 56, scope: !56)
!75 = !DILocation(line: 36, column: 9, scope: !56)
!76 = !DILocation(line: 38, column: 19, scope: !56)
!77 = !DILocation(line: 38, column: 9, scope: !56)
!78 = !DILocation(line: 39, column: 14, scope: !56)
!79 = !DILocation(line: 39, column: 9, scope: !56)
!80 = !DILocation(line: 41, column: 1, scope: !37)
!81 = distinct !DISubprogram(name: "CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01_good", scope: !2, file: !2, line: 67, type: !38, scopeLine: 68, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!82 = !DILocation(line: 69, column: 5, scope: !81)
!83 = !DILocation(line: 70, column: 1, scope: !81)
!84 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 82, type: !85, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!85 = !DISubroutineType(types: !86)
!86 = !{!87, !87, !88}
!87 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!89 = !DILocalVariable(name: "argc", arg: 1, scope: !84, file: !2, line: 82, type: !87)
!90 = !DILocation(line: 82, column: 14, scope: !84)
!91 = !DILocalVariable(name: "argv", arg: 2, scope: !84, file: !2, line: 82, type: !88)
!92 = !DILocation(line: 82, column: 27, scope: !84)
!93 = !DILocation(line: 85, column: 22, scope: !84)
!94 = !DILocation(line: 85, column: 12, scope: !84)
!95 = !DILocation(line: 85, column: 5, scope: !84)
!96 = !DILocation(line: 87, column: 5, scope: !84)
!97 = !DILocation(line: 88, column: 5, scope: !84)
!98 = !DILocation(line: 89, column: 5, scope: !84)
!99 = !DILocation(line: 92, column: 5, scope: !84)
!100 = !DILocation(line: 93, column: 5, scope: !84)
!101 = !DILocation(line: 94, column: 5, scope: !84)
!102 = !DILocation(line: 96, column: 5, scope: !84)
!103 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 48, type: !38, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !40)
!104 = !DILocalVariable(name: "data", scope: !103, file: !2, line: 50, type: !25)
!105 = !DILocation(line: 50, column: 12, scope: !103)
!106 = !DILocation(line: 51, column: 20, scope: !103)
!107 = !DILocation(line: 51, column: 10, scope: !103)
!108 = !DILocation(line: 52, column: 9, scope: !109)
!109 = distinct !DILexicalBlock(scope: !103, file: !2, line: 52, column: 9)
!110 = !DILocation(line: 52, column: 14, scope: !109)
!111 = !DILocation(line: 52, column: 9, scope: !103)
!112 = !DILocation(line: 52, column: 24, scope: !113)
!113 = distinct !DILexicalBlock(scope: !109, file: !2, line: 52, column: 23)
!114 = !DILocation(line: 54, column: 12, scope: !103)
!115 = !DILocation(line: 54, column: 5, scope: !103)
!116 = !DILocation(line: 55, column: 5, scope: !103)
!117 = !DILocation(line: 55, column: 16, scope: !103)
!118 = !DILocalVariable(name: "dest", scope: !119, file: !2, line: 57, type: !57)
!119 = distinct !DILexicalBlock(scope: !103, file: !2, line: 56, column: 5)
!120 = !DILocation(line: 57, column: 14, scope: !119)
!121 = !DILocation(line: 59, column: 16, scope: !119)
!122 = !DILocation(line: 59, column: 22, scope: !119)
!123 = !DILocation(line: 59, column: 9, scope: !119)
!124 = !DILocation(line: 60, column: 24, scope: !119)
!125 = !DILocation(line: 60, column: 37, scope: !119)
!126 = !DILocation(line: 60, column: 30, scope: !119)
!127 = !DILocation(line: 60, column: 42, scope: !119)
!128 = !DILocation(line: 60, column: 56, scope: !119)
!129 = !DILocation(line: 60, column: 9, scope: !119)
!130 = !DILocation(line: 61, column: 24, scope: !119)
!131 = !DILocation(line: 61, column: 37, scope: !119)
!132 = !DILocation(line: 61, column: 30, scope: !119)
!133 = !DILocation(line: 61, column: 42, scope: !119)
!134 = !DILocation(line: 61, column: 56, scope: !119)
!135 = !DILocation(line: 61, column: 9, scope: !119)
!136 = !DILocation(line: 62, column: 19, scope: !119)
!137 = !DILocation(line: 62, column: 9, scope: !119)
!138 = !DILocation(line: 63, column: 14, scope: !119)
!139 = !DILocation(line: 63, column: 9, scope: !119)
!140 = !DILocation(line: 65, column: 1, scope: !103)
