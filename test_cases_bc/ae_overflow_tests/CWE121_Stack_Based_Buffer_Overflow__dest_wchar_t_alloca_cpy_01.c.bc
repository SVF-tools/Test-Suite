; ModuleID = '/root/test/once_more/SVF/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.c.bc'
source_filename = "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_bad() #0 !dbg !39 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %source = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !43, !DIExpression(), !44)
    #dbg_declare(ptr %dataBadBuffer, !45, !DIExpression(), !46)
  %0 = alloca i8, i64 200, align 16, !dbg !47
  store ptr %0, ptr %dataBadBuffer, align 8, !dbg !46
    #dbg_declare(ptr %dataGoodBuffer, !48, !DIExpression(), !49)
  %1 = alloca i8, i64 400, align 16, !dbg !50
  store ptr %1, ptr %dataGoodBuffer, align 8, !dbg !49
  %2 = load ptr, ptr %dataBadBuffer, align 8, !dbg !51
  store ptr %2, ptr %data, align 8, !dbg !52
  %3 = load ptr, ptr %data, align 8, !dbg !53
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 0, !dbg !53
  store i32 0, ptr %arrayidx, align 4, !dbg !54
    #dbg_declare(ptr %source, !55, !DIExpression(), !60)
  %arraydecay = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !61
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 67, i64 noundef 99) #3, !dbg !62
  %arrayidx1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !63
  store i32 0, ptr %arrayidx1, align 4, !dbg !64
  %4 = load ptr, ptr %data, align 8, !dbg !65
  %arraydecay2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !66
  %call3 = call ptr @wcscpy(ptr noundef %4, ptr noundef %arraydecay2) #3, !dbg !67
  %5 = load ptr, ptr %data, align 8, !dbg !68
  %call4 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %5, i64 noundef 399), !dbg !69
  %arraydecay5 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !70
  %call6 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay5, i64 noundef 399), !dbg !71
  %6 = load ptr, ptr %data, align 8, !dbg !72
  call void @printWLine(ptr noundef %6), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

; Function Attrs: nounwind
declare ptr @wcscpy(ptr noundef, ptr noundef) #1

declare i32 @UNSAFE_BUFACCESS(...) #2

declare i32 @SAFE_BUFACCESS(...) #2

declare void @printWLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_good() #0 !dbg !75 {
entry:
  call void @goodG2B(), !dbg !76
  ret void, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !78 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !83, !DIExpression(), !84)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !85, !DIExpression(), !86)
  %call = call i64 @time(ptr noundef null) #3, !dbg !87
  %conv = trunc i64 %call to i32, !dbg !88
  call void @srand(i32 noundef %conv) #3, !dbg !89
  call void @printLine(ptr noundef @.str), !dbg !90
  call void @CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_good(), !dbg !91
  call void @printLine(ptr noundef @.str.1), !dbg !92
  call void @printLine(ptr noundef @.str.2), !dbg !93
  call void @CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_bad(), !dbg !94
  call void @printLine(ptr noundef @.str.3), !dbg !95
  ret i32 0, !dbg !96
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #1

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #1

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !97 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %source = alloca [100 x i32], align 16
    #dbg_declare(ptr %data, !98, !DIExpression(), !99)
    #dbg_declare(ptr %dataBadBuffer, !100, !DIExpression(), !101)
  %0 = alloca i8, i64 200, align 16, !dbg !102
  store ptr %0, ptr %dataBadBuffer, align 8, !dbg !101
    #dbg_declare(ptr %dataGoodBuffer, !103, !DIExpression(), !104)
  %1 = alloca i8, i64 400, align 16, !dbg !105
  store ptr %1, ptr %dataGoodBuffer, align 8, !dbg !104
  %2 = load ptr, ptr %dataGoodBuffer, align 8, !dbg !106
  store ptr %2, ptr %data, align 8, !dbg !107
  %3 = load ptr, ptr %data, align 8, !dbg !108
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 0, !dbg !108
  store i32 0, ptr %arrayidx, align 4, !dbg !109
    #dbg_declare(ptr %source, !110, !DIExpression(), !112)
  %arraydecay = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !113
  %call = call ptr @wmemset(ptr noundef %arraydecay, i32 noundef 67, i64 noundef 99) #3, !dbg !114
  %arrayidx1 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 99, !dbg !115
  store i32 0, ptr %arrayidx1, align 4, !dbg !116
  %4 = load ptr, ptr %data, align 8, !dbg !117
  %arraydecay2 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !118
  %call3 = call ptr @wcscpy(ptr noundef %4, ptr noundef %arraydecay2) #3, !dbg !119
  %arraydecay4 = getelementptr inbounds [100 x i32], ptr %source, i64 0, i64 0, !dbg !120
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay4, i64 noundef 399), !dbg !121
  %5 = load ptr, ptr %data, align 8, !dbg !122
  %call6 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %5, i64 noundef 399), !dbg !123
  %6 = load ptr, ptr %data, align 8, !dbg !124
  call void @printWLine(ptr noundef %6), !dbg !125
  ret void, !dbg !126
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!31, !32, !33, !34, !35, !36, !37}
!llvm.ident = !{!38}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 89, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "c50fce4e894376470592c42a4aed7ec6")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 91, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 94, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 96, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !30, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/test/once_more/SVF/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.c", directory: "/root/test/once_more/SVF/Test-Suite", checksumkind: CSK_MD5, checksum: "c50fce4e894376470592c42a4aed7ec6")
!24 = !{!25, !29}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !27, line: 24, baseType: !28)
!27 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_wchar_t.h", directory: "", checksumkind: CSK_MD5, checksum: "1bf0c51e90dd5eb05cdcc01afdea587a")
!28 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!29 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!30 = !{!0, !7, !12, !17}
!31 = !{i32 7, !"Dwarf Version", i32 5}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{i32 1, !"wchar_size", i32 4}
!34 = !{i32 8, !"PIC Level", i32 2}
!35 = !{i32 7, !"PIE Level", i32 2}
!36 = !{i32 7, !"uwtable", i32 2}
!37 = !{i32 7, !"frame-pointer", i32 2}
!38 = !{!"Ubuntu clang version 20.1.3 (++20250415115034+9420327ad768-1~exp1~20250415235124.105)"}
!39 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_bad", scope: !2, file: !2, line: 23, type: !40, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !42)
!40 = !DISubroutineType(types: !41)
!41 = !{null}
!42 = !{}
!43 = !DILocalVariable(name: "data", scope: !39, file: !2, line: 25, type: !25)
!44 = !DILocation(line: 25, column: 15, scope: !39)
!45 = !DILocalVariable(name: "dataBadBuffer", scope: !39, file: !2, line: 26, type: !25)
!46 = !DILocation(line: 26, column: 15, scope: !39)
!47 = !DILocation(line: 26, column: 42, scope: !39)
!48 = !DILocalVariable(name: "dataGoodBuffer", scope: !39, file: !2, line: 27, type: !25)
!49 = !DILocation(line: 27, column: 15, scope: !39)
!50 = !DILocation(line: 27, column: 43, scope: !39)
!51 = !DILocation(line: 30, column: 12, scope: !39)
!52 = !DILocation(line: 30, column: 10, scope: !39)
!53 = !DILocation(line: 31, column: 5, scope: !39)
!54 = !DILocation(line: 31, column: 13, scope: !39)
!55 = !DILocalVariable(name: "source", scope: !56, file: !2, line: 33, type: !57)
!56 = distinct !DILexicalBlock(scope: !39, file: !2, line: 32, column: 5)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 3200, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 100)
!60 = !DILocation(line: 33, column: 17, scope: !56)
!61 = !DILocation(line: 34, column: 17, scope: !56)
!62 = !DILocation(line: 34, column: 9, scope: !56)
!63 = !DILocation(line: 35, column: 9, scope: !56)
!64 = !DILocation(line: 35, column: 23, scope: !56)
!65 = !DILocation(line: 37, column: 16, scope: !56)
!66 = !DILocation(line: 37, column: 22, scope: !56)
!67 = !DILocation(line: 37, column: 9, scope: !56)
!68 = !DILocation(line: 38, column: 26, scope: !56)
!69 = !DILocation(line: 38, column: 9, scope: !56)
!70 = !DILocation(line: 39, column: 24, scope: !56)
!71 = !DILocation(line: 39, column: 9, scope: !56)
!72 = !DILocation(line: 40, column: 20, scope: !56)
!73 = !DILocation(line: 40, column: 9, scope: !56)
!74 = !DILocation(line: 42, column: 1, scope: !39)
!75 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01_good", scope: !2, file: !2, line: 69, type: !40, scopeLine: 70, spFlags: DISPFlagDefinition, unit: !22)
!76 = !DILocation(line: 71, column: 5, scope: !75)
!77 = !DILocation(line: 72, column: 1, scope: !75)
!78 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 84, type: !79, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !42)
!79 = !DISubroutineType(types: !80)
!80 = !{!28, !28, !81}
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!83 = !DILocalVariable(name: "argc", arg: 1, scope: !78, file: !2, line: 84, type: !28)
!84 = !DILocation(line: 84, column: 14, scope: !78)
!85 = !DILocalVariable(name: "argv", arg: 2, scope: !78, file: !2, line: 84, type: !81)
!86 = !DILocation(line: 84, column: 27, scope: !78)
!87 = !DILocation(line: 87, column: 22, scope: !78)
!88 = !DILocation(line: 87, column: 12, scope: !78)
!89 = !DILocation(line: 87, column: 5, scope: !78)
!90 = !DILocation(line: 89, column: 5, scope: !78)
!91 = !DILocation(line: 90, column: 5, scope: !78)
!92 = !DILocation(line: 91, column: 5, scope: !78)
!93 = !DILocation(line: 94, column: 5, scope: !78)
!94 = !DILocation(line: 95, column: 5, scope: !78)
!95 = !DILocation(line: 96, column: 5, scope: !78)
!96 = !DILocation(line: 98, column: 5, scope: !78)
!97 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 49, type: !40, scopeLine: 50, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !42)
!98 = !DILocalVariable(name: "data", scope: !97, file: !2, line: 51, type: !25)
!99 = !DILocation(line: 51, column: 15, scope: !97)
!100 = !DILocalVariable(name: "dataBadBuffer", scope: !97, file: !2, line: 52, type: !25)
!101 = !DILocation(line: 52, column: 15, scope: !97)
!102 = !DILocation(line: 52, column: 42, scope: !97)
!103 = !DILocalVariable(name: "dataGoodBuffer", scope: !97, file: !2, line: 53, type: !25)
!104 = !DILocation(line: 53, column: 15, scope: !97)
!105 = !DILocation(line: 53, column: 43, scope: !97)
!106 = !DILocation(line: 55, column: 12, scope: !97)
!107 = !DILocation(line: 55, column: 10, scope: !97)
!108 = !DILocation(line: 56, column: 5, scope: !97)
!109 = !DILocation(line: 56, column: 13, scope: !97)
!110 = !DILocalVariable(name: "source", scope: !111, file: !2, line: 58, type: !57)
!111 = distinct !DILexicalBlock(scope: !97, file: !2, line: 57, column: 5)
!112 = !DILocation(line: 58, column: 17, scope: !111)
!113 = !DILocation(line: 59, column: 17, scope: !111)
!114 = !DILocation(line: 59, column: 9, scope: !111)
!115 = !DILocation(line: 60, column: 9, scope: !111)
!116 = !DILocation(line: 60, column: 23, scope: !111)
!117 = !DILocation(line: 62, column: 16, scope: !111)
!118 = !DILocation(line: 62, column: 22, scope: !111)
!119 = !DILocation(line: 62, column: 9, scope: !111)
!120 = !DILocation(line: 63, column: 24, scope: !111)
!121 = !DILocation(line: 63, column: 9, scope: !111)
!122 = !DILocation(line: 64, column: 24, scope: !111)
!123 = !DILocation(line: 64, column: 9, scope: !111)
!124 = !DILocation(line: 65, column: 20, scope: !111)
!125 = !DILocation(line: 65, column: 9, scope: !111)
!126 = !DILocation(line: 67, column: 1, scope: !97)
