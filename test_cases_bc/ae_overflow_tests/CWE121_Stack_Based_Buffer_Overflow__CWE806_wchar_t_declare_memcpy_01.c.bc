; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_01_bad() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca [100 x i32], align 16
  %dest = alloca [50 x i32], align 16
  %arraydecay = getelementptr inbounds [100 x i32], ptr %dataBuffer, i64 0, i64 0
  store ptr %arraydecay, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %call = call ptr @wmemset(ptr noundef %0, i32 noundef 65, i64 noundef 99) #6
  %1 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i32, ptr %1, i64 99
  store i32 0, ptr %arrayidx, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 200, i1 false)
  %arraydecay1 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 0
  %2 = load ptr, ptr %data, align 8
  %3 = load ptr, ptr %data, align 8
  %call2 = call i64 @wcslen(ptr noundef %3) #7
  %mul = mul i64 %call2, 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %arraydecay1, ptr align 4 %2, i64 %mul, i1 false)
  %arraydecay3 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 0
  %4 = load ptr, ptr %data, align 8
  %call4 = call i64 @wcslen(ptr noundef %4) #7
  %mul5 = mul i64 %call4, 4
  %sub = sub i64 %mul5, 1
  %call6 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %arraydecay3, i64 noundef %sub)
  %5 = load ptr, ptr %data, align 8
  %6 = load ptr, ptr %data, align 8
  %call7 = call i64 @wcslen(ptr noundef %6) #7
  %mul8 = mul i64 %call7, 4
  %sub9 = sub i64 %mul8, 1
  %call10 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %5, i64 noundef %sub9)
  %arrayidx11 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 49
  store i32 0, ptr %arrayidx11, align 4
  %7 = load ptr, ptr %data, align 8
  call void @printWLine(ptr noundef %7)
  ret void
}

; Function Attrs: nounwind
declare ptr @wmemset(ptr noundef, i32 noundef, i64 noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @wcslen(ptr noundef) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

declare i32 @UNSAFE_BUFACCESS(...) #5

declare i32 @SAFE_BUFACCESS(...) #5

declare void @printWLine(ptr noundef) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_01_good() #0 {
entry:
  call void @goodG2B()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBuffer = alloca [100 x i32], align 16
  %dest = alloca [50 x i32], align 16
  %arraydecay = getelementptr inbounds [100 x i32], ptr %dataBuffer, i64 0, i64 0
  store ptr %arraydecay, ptr %data, align 8
  %0 = load ptr, ptr %data, align 8
  %call = call ptr @wmemset(ptr noundef %0, i32 noundef 65, i64 noundef 49) #6
  %1 = load ptr, ptr %data, align 8
  %arrayidx = getelementptr inbounds i32, ptr %1, i64 49
  store i32 0, ptr %arrayidx, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %dest, i8 0, i64 200, i1 false)
  %arraydecay1 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 0
  %2 = load ptr, ptr %data, align 8
  %3 = load ptr, ptr %data, align 8
  %call2 = call i64 @wcslen(ptr noundef %3) #7
  %mul = mul i64 %call2, 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %arraydecay1, ptr align 4 %2, i64 %mul, i1 false)
  %arraydecay3 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 0
  %4 = load ptr, ptr %data, align 8
  %call4 = call i64 @wcslen(ptr noundef %4) #7
  %mul5 = mul i64 %call4, 4
  %sub = sub i64 %mul5, 1
  %call6 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay3, i64 noundef %sub)
  %5 = load ptr, ptr %data, align 8
  %6 = load ptr, ptr %data, align 8
  %call7 = call i64 @wcslen(ptr noundef %6) #7
  %mul8 = mul i64 %call7, 4
  %sub9 = sub i64 %mul8, 1
  %call10 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %5, i64 noundef %sub9)
  %arrayidx11 = getelementptr inbounds [50 x i32], ptr %dest, i64 0, i64 49
  store i32 0, ptr %arrayidx11, align 4
  %7 = load ptr, ptr %data, align 8
  call void @printWLine(ptr noundef %7)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind }
attributes #7 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
