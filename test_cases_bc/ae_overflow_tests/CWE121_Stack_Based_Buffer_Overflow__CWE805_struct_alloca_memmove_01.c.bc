; ModuleID = '/root/testsss/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01.c.bc'
source_filename = "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_bad() #0 !dbg !43 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %source = alloca [100 x %struct._twoIntsStruct], align 16
  %i = alloca i64, align 8
    #dbg_declare(ptr %data, !47, !DIExpression(), !48)
    #dbg_declare(ptr %dataBadBuffer, !49, !DIExpression(), !50)
  %0 = alloca i8, i64 400, align 16, !dbg !51
  store ptr %0, ptr %dataBadBuffer, align 8, !dbg !50
    #dbg_declare(ptr %dataGoodBuffer, !52, !DIExpression(), !53)
  %1 = alloca i8, i64 800, align 16, !dbg !54
  store ptr %1, ptr %dataGoodBuffer, align 8, !dbg !53
  %2 = load ptr, ptr %dataBadBuffer, align 8, !dbg !55
  store ptr %2, ptr %data, align 8, !dbg !56
    #dbg_declare(ptr %source, !57, !DIExpression(), !62)
    #dbg_declare(ptr %i, !63, !DIExpression(), !68)
  store i64 0, ptr %i, align 8, !dbg !69
  br label %for.cond, !dbg !71

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, ptr %i, align 8, !dbg !72
  %cmp = icmp ult i64 %3, 100, !dbg !74
  br i1 %cmp, label %for.body, label %for.end, !dbg !75

for.body:                                         ; preds = %for.cond
  %4 = load i64, ptr %i, align 8, !dbg !76
  %arrayidx = getelementptr inbounds nuw [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %4, !dbg !78
  %intOne = getelementptr inbounds nuw %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !79
  store i32 0, ptr %intOne, align 8, !dbg !80
  %5 = load i64, ptr %i, align 8, !dbg !81
  %arrayidx1 = getelementptr inbounds nuw [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %5, !dbg !82
  %intTwo = getelementptr inbounds nuw %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !83
  store i32 0, ptr %intTwo, align 4, !dbg !84
  br label %for.inc, !dbg !85

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !86
  %inc = add i64 %6, 1, !dbg !86
  store i64 %inc, ptr %i, align 8, !dbg !86
  br label %for.cond, !dbg !87, !llvm.loop !88

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !91
  %arraydecay = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !92
  call void @llvm.memmove.p0.p0.i64(ptr align 4 %7, ptr align 16 %arraydecay, i64 800, i1 false), !dbg !92
  %8 = load ptr, ptr %data, align 8, !dbg !93
  %call = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %8, i64 noundef 799), !dbg !94
  %arraydecay2 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !95
  %call3 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef 799), !dbg !96
  %9 = load ptr, ptr %data, align 8, !dbg !97
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %9, i64 0, !dbg !97
  call void @printStructLine(ptr noundef %arrayidx4), !dbg !98
  ret void, !dbg !99
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #1

declare i32 @UNSAFE_BUFACCESS(...) #2

declare i32 @SAFE_BUFACCESS(...) #2

declare void @printStructLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_good() #0 !dbg !100 {
entry:
  call void @goodG2B(), !dbg !101
  ret void, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !103 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
    #dbg_declare(ptr %argc.addr, !108, !DIExpression(), !109)
  store ptr %argv, ptr %argv.addr, align 8
    #dbg_declare(ptr %argv.addr, !110, !DIExpression(), !111)
  %call = call i64 @time(ptr noundef null) #4, !dbg !112
  %conv = trunc i64 %call to i32, !dbg !113
  call void @srand(i32 noundef %conv) #4, !dbg !114
  call void @printLine(ptr noundef @.str), !dbg !115
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_good(), !dbg !116
  call void @printLine(ptr noundef @.str.1), !dbg !117
  call void @printLine(ptr noundef @.str.2), !dbg !118
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_bad(), !dbg !119
  call void @printLine(ptr noundef @.str.3), !dbg !120
  ret i32 0, !dbg !121
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #3

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #3

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !122 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %source = alloca [100 x %struct._twoIntsStruct], align 16
  %i = alloca i64, align 8
    #dbg_declare(ptr %data, !123, !DIExpression(), !124)
    #dbg_declare(ptr %dataBadBuffer, !125, !DIExpression(), !126)
  %0 = alloca i8, i64 400, align 16, !dbg !127
  store ptr %0, ptr %dataBadBuffer, align 8, !dbg !126
    #dbg_declare(ptr %dataGoodBuffer, !128, !DIExpression(), !129)
  %1 = alloca i8, i64 800, align 16, !dbg !130
  store ptr %1, ptr %dataGoodBuffer, align 8, !dbg !129
  %2 = load ptr, ptr %dataGoodBuffer, align 8, !dbg !131
  store ptr %2, ptr %data, align 8, !dbg !132
    #dbg_declare(ptr %source, !133, !DIExpression(), !135)
    #dbg_declare(ptr %i, !136, !DIExpression(), !138)
  store i64 0, ptr %i, align 8, !dbg !139
  br label %for.cond, !dbg !141

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, ptr %i, align 8, !dbg !142
  %cmp = icmp ult i64 %3, 100, !dbg !144
  br i1 %cmp, label %for.body, label %for.end, !dbg !145

for.body:                                         ; preds = %for.cond
  %4 = load i64, ptr %i, align 8, !dbg !146
  %arrayidx = getelementptr inbounds nuw [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %4, !dbg !148
  %intOne = getelementptr inbounds nuw %struct._twoIntsStruct, ptr %arrayidx, i32 0, i32 0, !dbg !149
  store i32 0, ptr %intOne, align 8, !dbg !150
  %5 = load i64, ptr %i, align 8, !dbg !151
  %arrayidx1 = getelementptr inbounds nuw [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 %5, !dbg !152
  %intTwo = getelementptr inbounds nuw %struct._twoIntsStruct, ptr %arrayidx1, i32 0, i32 1, !dbg !153
  store i32 0, ptr %intTwo, align 4, !dbg !154
  br label %for.inc, !dbg !155

for.inc:                                          ; preds = %for.body
  %6 = load i64, ptr %i, align 8, !dbg !156
  %inc = add i64 %6, 1, !dbg !156
  store i64 %inc, ptr %i, align 8, !dbg !156
  br label %for.cond, !dbg !157, !llvm.loop !158

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %data, align 8, !dbg !160
  %arraydecay = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !161
  call void @llvm.memmove.p0.p0.i64(ptr align 4 %7, ptr align 16 %arraydecay, i64 800, i1 false), !dbg !161
  %8 = load ptr, ptr %data, align 8, !dbg !162
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %8, i64 noundef 799), !dbg !163
  %arraydecay2 = getelementptr inbounds [100 x %struct._twoIntsStruct], ptr %source, i64 0, i64 0, !dbg !164
  %call3 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay2, i64 noundef 799), !dbg !165
  %9 = load ptr, ptr %data, align 8, !dbg !166
  %arrayidx4 = getelementptr inbounds %struct._twoIntsStruct, ptr %9, i64 0, !dbg !166
  call void @printStructLine(ptr noundef %arrayidx4), !dbg !167
  ret void, !dbg !168
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!35, !36, !37, !38, !39, !40, !41}
!llvm.ident = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 99, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "d96d6fc73d13446b91e59ea7fe29488f")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 101, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 104, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 106, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !34, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/root/testsss/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01.c", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "d96d6fc73d13446b91e59ea7fe29488f")
!24 = !{!25, !33}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !27, line: 103, baseType: !28)
!27 = !DIFile(filename: "src/ae_overflow_tests/std_testcase.h", directory: "/root/testsss/Test-Suite", checksumkind: CSK_MD5, checksum: "88a24111f8dafef29ef3f03c1f00803c")
!28 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !27, line: 99, size: 64, elements: !29)
!29 = !{!30, !32}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !28, file: !27, line: 101, baseType: !31, size: 32)
!31 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !28, file: !27, line: 102, baseType: !31, size: 32, offset: 32)
!33 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!34 = !{!0, !7, !12, !17}
!35 = !{i32 7, !"Dwarf Version", i32 5}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{i32 1, !"wchar_size", i32 4}
!38 = !{i32 8, !"PIC Level", i32 2}
!39 = !{i32 7, !"PIE Level", i32 2}
!40 = !{i32 7, !"uwtable", i32 2}
!41 = !{i32 7, !"frame-pointer", i32 2}
!42 = !{!"Ubuntu clang version 20.1.2 (++20250402124932+58df0ef89dd6-1~exp1~20250402004952.98)"}
!43 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_bad", scope: !2, file: !2, line: 21, type: !44, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !46)
!44 = !DISubroutineType(types: !45)
!45 = !{null}
!46 = !{}
!47 = !DILocalVariable(name: "data", scope: !43, file: !2, line: 23, type: !25)
!48 = !DILocation(line: 23, column: 21, scope: !43)
!49 = !DILocalVariable(name: "dataBadBuffer", scope: !43, file: !2, line: 24, type: !25)
!50 = !DILocation(line: 24, column: 21, scope: !43)
!51 = !DILocation(line: 24, column: 54, scope: !43)
!52 = !DILocalVariable(name: "dataGoodBuffer", scope: !43, file: !2, line: 25, type: !25)
!53 = !DILocation(line: 25, column: 21, scope: !43)
!54 = !DILocation(line: 25, column: 55, scope: !43)
!55 = !DILocation(line: 28, column: 12, scope: !43)
!56 = !DILocation(line: 28, column: 10, scope: !43)
!57 = !DILocalVariable(name: "source", scope: !58, file: !2, line: 30, type: !59)
!58 = distinct !DILexicalBlock(scope: !43, file: !2, line: 29, column: 5)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 6400, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 100)
!62 = !DILocation(line: 30, column: 23, scope: !58)
!63 = !DILocalVariable(name: "i", scope: !64, file: !2, line: 32, type: !65)
!64 = distinct !DILexicalBlock(scope: !58, file: !2, line: 31, column: 9)
!65 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !66, line: 18, baseType: !67)
!66 = !DIFile(filename: "/usr/lib/llvm-20/lib/clang/20/include/__stddef_size_t.h", directory: "", checksumkind: CSK_MD5, checksum: "2c44e821a2b1951cde2eb0fb2e656867")
!67 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!68 = !DILocation(line: 32, column: 20, scope: !64)
!69 = !DILocation(line: 34, column: 20, scope: !70)
!70 = distinct !DILexicalBlock(scope: !64, file: !2, line: 34, column: 13)
!71 = !DILocation(line: 34, column: 18, scope: !70)
!72 = !DILocation(line: 34, column: 25, scope: !73)
!73 = distinct !DILexicalBlock(scope: !70, file: !2, line: 34, column: 13)
!74 = !DILocation(line: 34, column: 27, scope: !73)
!75 = !DILocation(line: 34, column: 13, scope: !70)
!76 = !DILocation(line: 36, column: 24, scope: !77)
!77 = distinct !DILexicalBlock(scope: !73, file: !2, line: 35, column: 13)
!78 = !DILocation(line: 36, column: 17, scope: !77)
!79 = !DILocation(line: 36, column: 27, scope: !77)
!80 = !DILocation(line: 36, column: 34, scope: !77)
!81 = !DILocation(line: 37, column: 24, scope: !77)
!82 = !DILocation(line: 37, column: 17, scope: !77)
!83 = !DILocation(line: 37, column: 27, scope: !77)
!84 = !DILocation(line: 37, column: 34, scope: !77)
!85 = !DILocation(line: 38, column: 13, scope: !77)
!86 = !DILocation(line: 34, column: 35, scope: !73)
!87 = !DILocation(line: 34, column: 13, scope: !73)
!88 = distinct !{!88, !75, !89, !90}
!89 = !DILocation(line: 38, column: 13, scope: !70)
!90 = !{!"llvm.loop.mustprogress"}
!91 = !DILocation(line: 41, column: 17, scope: !58)
!92 = !DILocation(line: 41, column: 9, scope: !58)
!93 = !DILocation(line: 42, column: 26, scope: !58)
!94 = !DILocation(line: 42, column: 9, scope: !58)
!95 = !DILocation(line: 43, column: 24, scope: !58)
!96 = !DILocation(line: 43, column: 9, scope: !58)
!97 = !DILocation(line: 44, column: 26, scope: !58)
!98 = !DILocation(line: 44, column: 9, scope: !58)
!99 = !DILocation(line: 46, column: 1, scope: !43)
!100 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01_good", scope: !2, file: !2, line: 79, type: !44, scopeLine: 80, spFlags: DISPFlagDefinition, unit: !22)
!101 = !DILocation(line: 81, column: 5, scope: !100)
!102 = !DILocation(line: 82, column: 1, scope: !100)
!103 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 94, type: !104, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !46)
!104 = !DISubroutineType(types: !105)
!105 = !{!31, !31, !106}
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!108 = !DILocalVariable(name: "argc", arg: 1, scope: !103, file: !2, line: 94, type: !31)
!109 = !DILocation(line: 94, column: 14, scope: !103)
!110 = !DILocalVariable(name: "argv", arg: 2, scope: !103, file: !2, line: 94, type: !106)
!111 = !DILocation(line: 94, column: 27, scope: !103)
!112 = !DILocation(line: 97, column: 22, scope: !103)
!113 = !DILocation(line: 97, column: 12, scope: !103)
!114 = !DILocation(line: 97, column: 5, scope: !103)
!115 = !DILocation(line: 99, column: 5, scope: !103)
!116 = !DILocation(line: 100, column: 5, scope: !103)
!117 = !DILocation(line: 101, column: 5, scope: !103)
!118 = !DILocation(line: 104, column: 5, scope: !103)
!119 = !DILocation(line: 105, column: 5, scope: !103)
!120 = !DILocation(line: 106, column: 5, scope: !103)
!121 = !DILocation(line: 108, column: 5, scope: !103)
!122 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 53, type: !44, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !46)
!123 = !DILocalVariable(name: "data", scope: !122, file: !2, line: 55, type: !25)
!124 = !DILocation(line: 55, column: 21, scope: !122)
!125 = !DILocalVariable(name: "dataBadBuffer", scope: !122, file: !2, line: 56, type: !25)
!126 = !DILocation(line: 56, column: 21, scope: !122)
!127 = !DILocation(line: 56, column: 54, scope: !122)
!128 = !DILocalVariable(name: "dataGoodBuffer", scope: !122, file: !2, line: 57, type: !25)
!129 = !DILocation(line: 57, column: 21, scope: !122)
!130 = !DILocation(line: 57, column: 55, scope: !122)
!131 = !DILocation(line: 59, column: 12, scope: !122)
!132 = !DILocation(line: 59, column: 10, scope: !122)
!133 = !DILocalVariable(name: "source", scope: !134, file: !2, line: 61, type: !59)
!134 = distinct !DILexicalBlock(scope: !122, file: !2, line: 60, column: 5)
!135 = !DILocation(line: 61, column: 23, scope: !134)
!136 = !DILocalVariable(name: "i", scope: !137, file: !2, line: 63, type: !65)
!137 = distinct !DILexicalBlock(scope: !134, file: !2, line: 62, column: 9)
!138 = !DILocation(line: 63, column: 20, scope: !137)
!139 = !DILocation(line: 65, column: 20, scope: !140)
!140 = distinct !DILexicalBlock(scope: !137, file: !2, line: 65, column: 13)
!141 = !DILocation(line: 65, column: 18, scope: !140)
!142 = !DILocation(line: 65, column: 25, scope: !143)
!143 = distinct !DILexicalBlock(scope: !140, file: !2, line: 65, column: 13)
!144 = !DILocation(line: 65, column: 27, scope: !143)
!145 = !DILocation(line: 65, column: 13, scope: !140)
!146 = !DILocation(line: 67, column: 24, scope: !147)
!147 = distinct !DILexicalBlock(scope: !143, file: !2, line: 66, column: 13)
!148 = !DILocation(line: 67, column: 17, scope: !147)
!149 = !DILocation(line: 67, column: 27, scope: !147)
!150 = !DILocation(line: 67, column: 34, scope: !147)
!151 = !DILocation(line: 68, column: 24, scope: !147)
!152 = !DILocation(line: 68, column: 17, scope: !147)
!153 = !DILocation(line: 68, column: 27, scope: !147)
!154 = !DILocation(line: 68, column: 34, scope: !147)
!155 = !DILocation(line: 69, column: 13, scope: !147)
!156 = !DILocation(line: 65, column: 35, scope: !143)
!157 = !DILocation(line: 65, column: 13, scope: !143)
!158 = distinct !{!158, !145, !159, !90}
!159 = !DILocation(line: 69, column: 13, scope: !140)
!160 = !DILocation(line: 72, column: 17, scope: !134)
!161 = !DILocation(line: 72, column: 9, scope: !134)
!162 = !DILocation(line: 73, column: 24, scope: !134)
!163 = !DILocation(line: 73, column: 9, scope: !134)
!164 = !DILocation(line: 74, column: 24, scope: !134)
!165 = !DILocation(line: 74, column: 9, scope: !134)
!166 = !DILocation(line: 75, column: 26, scope: !134)
!167 = !DILocation(line: 75, column: 9, scope: !134)
!168 = !DILocation(line: 77, column: 1, scope: !122)
