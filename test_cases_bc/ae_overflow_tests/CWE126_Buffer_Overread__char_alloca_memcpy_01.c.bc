; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE126_Buffer_Overread__char_alloca_memcpy_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE126_Buffer_Overread__char_alloca_memcpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__char_alloca_memcpy_01_bad() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %dest = alloca [100 x i8], align 16
  %0 = alloca i8, i64 50, align 16
  store ptr %0, ptr %dataBadBuffer, align 8
  %1 = alloca i8, i64 100, align 16
  store ptr %1, ptr %dataGoodBuffer, align 8
  %2 = load ptr, ptr %dataBadBuffer, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 49, i1 false)
  %3 = load ptr, ptr %dataBadBuffer, align 8
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 49
  store i8 0, ptr %arrayidx, align 1
  %4 = load ptr, ptr %dataGoodBuffer, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %4, i8 65, i64 99, i1 false)
  %5 = load ptr, ptr %dataGoodBuffer, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %5, i64 99
  store i8 0, ptr %arrayidx1, align 1
  %6 = load ptr, ptr %dataBadBuffer, align 8
  store ptr %6, ptr %data, align 8
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 67, i64 99, i1 false)
  %arrayidx2 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx2, align 1
  %arraydecay3 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %arraydecay4 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call = call i64 @strlen(ptr noundef %arraydecay4) #5
  %mul = mul i64 %call, 1
  %sub = sub i64 %mul, 1
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay3, i64 noundef %sub)
  %7 = load ptr, ptr %data, align 8
  %arraydecay6 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call7 = call i64 @strlen(ptr noundef %arraydecay6) #5
  %mul8 = mul i64 %call7, 1
  %sub9 = sub i64 %mul8, 1
  %call10 = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %7, i64 noundef %sub9)
  %arraydecay11 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %8 = load ptr, ptr %data, align 8
  %arraydecay12 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call13 = call i64 @strlen(ptr noundef %arraydecay12) #5
  %mul14 = mul i64 %call13, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %arraydecay11, ptr align 1 %8, i64 %mul14, i1 false)
  %arrayidx15 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx15, align 1
  %arraydecay16 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @printLine(ptr noundef %arraydecay16)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @SAFE_BUFACCESS(...) #2

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #3

declare i32 @UNSAFE_BUFACCESS(...) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

declare void @printLine(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE126_Buffer_Overread__char_alloca_memcpy_01_good() #0 {
entry:
  call void @goodG2B()
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 {
entry:
  %data = alloca ptr, align 8
  %dataBadBuffer = alloca ptr, align 8
  %dataGoodBuffer = alloca ptr, align 8
  %dest = alloca [100 x i8], align 16
  %0 = alloca i8, i64 50, align 16
  store ptr %0, ptr %dataBadBuffer, align 8
  %1 = alloca i8, i64 100, align 16
  store ptr %1, ptr %dataGoodBuffer, align 8
  %2 = load ptr, ptr %dataBadBuffer, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %2, i8 65, i64 49, i1 false)
  %3 = load ptr, ptr %dataBadBuffer, align 8
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 49
  store i8 0, ptr %arrayidx, align 1
  %4 = load ptr, ptr %dataGoodBuffer, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %4, i8 65, i64 99, i1 false)
  %5 = load ptr, ptr %dataGoodBuffer, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %5, i64 99
  store i8 0, ptr %arrayidx1, align 1
  %6 = load ptr, ptr %dataGoodBuffer, align 8
  store ptr %6, ptr %data, align 8
  %arraydecay = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @llvm.memset.p0.i64(ptr align 16 %arraydecay, i8 67, i64 99, i1 false)
  %arrayidx2 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx2, align 1
  %arraydecay3 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %arraydecay4 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call = call i64 @strlen(ptr noundef %arraydecay4) #5
  %mul = mul i64 %call, 1
  %sub = sub i64 %mul, 1
  %call5 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay3, i64 noundef %sub)
  %7 = load ptr, ptr %data, align 8
  %arraydecay6 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call7 = call i64 @strlen(ptr noundef %arraydecay6) #5
  %mul8 = mul i64 %call7, 1
  %sub9 = sub i64 %mul8, 1
  %call10 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %7, i64 noundef %sub9)
  %arraydecay11 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %8 = load ptr, ptr %data, align 8
  %arraydecay12 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  %call13 = call i64 @strlen(ptr noundef %arraydecay12) #5
  %mul14 = mul i64 %call13, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %arraydecay11, ptr align 1 %8, i64 %mul14, i1 false)
  %arrayidx15 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 99
  store i8 0, ptr %arrayidx15, align 1
  %arraydecay16 = getelementptr inbounds [100 x i8], ptr %dest, i64 0, i64 0
  call void @printLine(ptr noundef %arraydecay16)
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
