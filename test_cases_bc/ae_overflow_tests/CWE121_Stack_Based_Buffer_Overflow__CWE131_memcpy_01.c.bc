; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !dbg !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !dbg !7
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !dbg !12
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !dbg !17

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad() #0 !dbg !37 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [10 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !41, metadata !DIExpression()), !dbg !42
  store ptr null, ptr %data, align 8, !dbg !43
  %0 = alloca i8, i64 10, align 16, !dbg !44
  store ptr %0, ptr %data, align 8, !dbg !45
  call void @llvm.dbg.declare(metadata ptr %source, metadata !46, metadata !DIExpression()), !dbg !51
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 40, i1 false), !dbg !51
  %1 = load ptr, ptr %data, align 8, !dbg !52
  %arraydecay = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !53
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 16 %arraydecay, i64 40, i1 false), !dbg !53
  %2 = load ptr, ptr %data, align 8, !dbg !54
  %call = call i32 (ptr, i64, ...) @UNSAFE_BUFACCESS(ptr noundef %2, i64 noundef 39), !dbg !55
  %arraydecay1 = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !56
  %call2 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay1, i64 noundef 39), !dbg !57
  %3 = load ptr, ptr %data, align 8, !dbg !58
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 0, !dbg !58
  %4 = load i32, ptr %arrayidx, align 4, !dbg !58
  call void @printIntLine(i32 noundef %4), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

declare i32 @UNSAFE_BUFACCESS(...) #4

declare i32 @SAFE_BUFACCESS(...) #4

declare void @printIntLine(i32 noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good() #0 !dbg !61 {
entry:
  call void @goodG2B(), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #0 !dbg !64 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %argv, ptr %argv.addr, align 8
  call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i64 @time(ptr noundef null) #6, !dbg !73
  %conv = trunc i64 %call to i32, !dbg !74
  call void @srand(i32 noundef %conv) #6, !dbg !75
  call void @printLine(ptr noundef @.str), !dbg !76
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good(), !dbg !77
  call void @printLine(ptr noundef @.str.1), !dbg !78
  call void @printLine(ptr noundef @.str.2), !dbg !79
  call void @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad(), !dbg !80
  call void @printLine(ptr noundef @.str.3), !dbg !81
  ret i32 0, !dbg !82
}

; Function Attrs: nounwind
declare void @srand(i32 noundef) #5

; Function Attrs: nounwind
declare i64 @time(ptr noundef) #5

declare void @printLine(ptr noundef) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goodG2B() #0 !dbg !83 {
entry:
  %data = alloca ptr, align 8
  %source = alloca [10 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %data, metadata !84, metadata !DIExpression()), !dbg !85
  store ptr null, ptr %data, align 8, !dbg !86
  %0 = alloca i8, i64 40, align 16, !dbg !87
  store ptr %0, ptr %data, align 8, !dbg !88
  call void @llvm.dbg.declare(metadata ptr %source, metadata !89, metadata !DIExpression()), !dbg !91
  call void @llvm.memset.p0.i64(ptr align 16 %source, i8 0, i64 40, i1 false), !dbg !91
  %1 = load ptr, ptr %data, align 8, !dbg !92
  %arraydecay = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !93
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 16 %arraydecay, i64 40, i1 false), !dbg !93
  %2 = load ptr, ptr %data, align 8, !dbg !94
  %call = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %2, i64 noundef 39), !dbg !95
  %arraydecay1 = getelementptr inbounds [10 x i32], ptr %source, i64 0, i64 0, !dbg !96
  %call2 = call i32 (ptr, i64, ...) @SAFE_BUFACCESS(ptr noundef %arraydecay1, i64 noundef 39), !dbg !97
  %3 = load ptr, ptr %data, align 8, !dbg !98
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 0, !dbg !98
  %4 = load i32, ptr %arrayidx, align 4, !dbg !98
  call void @printIntLine(i32 noundef %4), !dbg !99
  ret void, !dbg !100
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!22}
!llvm.module.flags = !{!29, !30, !31, !32, !33, !34, !35}
!llvm.ident = !{!36}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 80, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "216ce47c26f3879f4108172e433c08aa")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 144, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 18)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(scope: null, file: !2, line: 82, type: !9, isLocal: true, isDefinition: true)
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !10)
!10 = !{!11}
!11 = !DISubrange(count: 16)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(scope: null, file: !2, line: 85, type: !14, isLocal: true, isDefinition: true)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 136, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 17)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(scope: null, file: !2, line: 87, type: !19, isLocal: true, isDefinition: true)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 120, elements: !20)
!20 = !{!21}
!21 = !DISubrange(count: 15)
!22 = distinct !DICompileUnit(language: DW_LANG_C11, file: !23, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !24, globals: !28, splitDebugInlining: false, nameTableKind: None)
!23 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_overflow_tests/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "216ce47c26f3879f4108172e433c08aa")
!24 = !{!25, !27}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!26 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !{!0, !7, !12, !17}
!29 = !{i32 7, !"Dwarf Version", i32 5}
!30 = !{i32 2, !"Debug Info Version", i32 3}
!31 = !{i32 1, !"wchar_size", i32 4}
!32 = !{i32 8, !"PIC Level", i32 2}
!33 = !{i32 7, !"PIE Level", i32 2}
!34 = !{i32 7, !"uwtable", i32 2}
!35 = !{i32 7, !"frame-pointer", i32 2}
!36 = !{!"clang version 16.0.0"}
!37 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_bad", scope: !2, file: !2, line: 21, type: !38, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!38 = !DISubroutineType(types: !39)
!39 = !{null}
!40 = !{}
!41 = !DILocalVariable(name: "data", scope: !37, file: !2, line: 23, type: !25)
!42 = !DILocation(line: 23, column: 11, scope: !37)
!43 = !DILocation(line: 24, column: 10, scope: !37)
!44 = !DILocation(line: 26, column: 19, scope: !37)
!45 = !DILocation(line: 26, column: 10, scope: !37)
!46 = !DILocalVariable(name: "source", scope: !47, file: !2, line: 28, type: !48)
!47 = distinct !DILexicalBlock(scope: !37, file: !2, line: 27, column: 5)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 320, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 10)
!51 = !DILocation(line: 28, column: 13, scope: !47)
!52 = !DILocation(line: 31, column: 16, scope: !47)
!53 = !DILocation(line: 31, column: 9, scope: !47)
!54 = !DILocation(line: 33, column: 26, scope: !47)
!55 = !DILocation(line: 33, column: 9, scope: !47)
!56 = !DILocation(line: 34, column: 24, scope: !47)
!57 = !DILocation(line: 34, column: 9, scope: !47)
!58 = !DILocation(line: 35, column: 22, scope: !47)
!59 = !DILocation(line: 35, column: 9, scope: !47)
!60 = !DILocation(line: 37, column: 1, scope: !37)
!61 = distinct !DISubprogram(name: "CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01_good", scope: !2, file: !2, line: 60, type: !38, scopeLine: 61, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!62 = !DILocation(line: 62, column: 5, scope: !61)
!63 = !DILocation(line: 63, column: 1, scope: !61)
!64 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 75, type: !65, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !22, retainedNodes: !40)
!65 = !DISubroutineType(types: !66)
!66 = !{!26, !26, !67}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!69 = !DILocalVariable(name: "argc", arg: 1, scope: !64, file: !2, line: 75, type: !26)
!70 = !DILocation(line: 75, column: 14, scope: !64)
!71 = !DILocalVariable(name: "argv", arg: 2, scope: !64, file: !2, line: 75, type: !67)
!72 = !DILocation(line: 75, column: 27, scope: !64)
!73 = !DILocation(line: 78, column: 22, scope: !64)
!74 = !DILocation(line: 78, column: 12, scope: !64)
!75 = !DILocation(line: 78, column: 5, scope: !64)
!76 = !DILocation(line: 80, column: 5, scope: !64)
!77 = !DILocation(line: 81, column: 5, scope: !64)
!78 = !DILocation(line: 82, column: 5, scope: !64)
!79 = !DILocation(line: 85, column: 5, scope: !64)
!80 = !DILocation(line: 86, column: 5, scope: !64)
!81 = !DILocation(line: 87, column: 5, scope: !64)
!82 = !DILocation(line: 89, column: 5, scope: !64)
!83 = distinct !DISubprogram(name: "goodG2B", scope: !2, file: !2, line: 44, type: !38, scopeLine: 45, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !22, retainedNodes: !40)
!84 = !DILocalVariable(name: "data", scope: !83, file: !2, line: 46, type: !25)
!85 = !DILocation(line: 46, column: 11, scope: !83)
!86 = !DILocation(line: 47, column: 10, scope: !83)
!87 = !DILocation(line: 49, column: 19, scope: !83)
!88 = !DILocation(line: 49, column: 10, scope: !83)
!89 = !DILocalVariable(name: "source", scope: !90, file: !2, line: 51, type: !48)
!90 = distinct !DILexicalBlock(scope: !83, file: !2, line: 50, column: 5)
!91 = !DILocation(line: 51, column: 13, scope: !90)
!92 = !DILocation(line: 53, column: 16, scope: !90)
!93 = !DILocation(line: 53, column: 9, scope: !90)
!94 = !DILocation(line: 54, column: 24, scope: !90)
!95 = !DILocation(line: 54, column: 9, scope: !90)
!96 = !DILocation(line: 55, column: 24, scope: !90)
!97 = !DILocation(line: 55, column: 9, scope: !90)
!98 = !DILocation(line: 56, column: 22, scope: !90)
!99 = !DILocation(line: 56, column: 9, scope: !90)
!100 = !DILocation(line: 58, column: 1, scope: !83)
