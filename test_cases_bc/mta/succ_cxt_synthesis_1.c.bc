; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mta/succ_cxt_synthesis_1.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mta/succ_cxt_synthesis_1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@Global = dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"cs2.gplus\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"cs4.gplus\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"0,1,2\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"cs5.gplus\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"cs3.foo1,cs1.gplus\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"cs3.foo1,cs0.foo2,cs6.gplus\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"cs3.foo1,cs0.foo2\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"cs3.foo1\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"0,1\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@t1 = dso_local global i64 0, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

declare i32 @printf(ptr noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(ptr noundef %p, ptr noundef %q) #0 {
entry:
  %p.addr = alloca ptr, align 8
  %q.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %q, ptr %q.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 noundef %id, i32 noundef %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, ptr %id.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 noundef %thdid, ptr noundef %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 noundef %thdid, ptr noundef %cxt, ptr noundef %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca ptr, align 8
  %lev.addr = alloca ptr, align 8
  store i32 %thdid, ptr %thdid.addr, align 4
  store ptr %cxt, ptr %cxt.addr, align 8
  store ptr %lev, ptr %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(ptr noundef %lockname) #0 {
entry:
  %lockname.addr = alloca ptr, align 8
  store ptr %lockname, ptr %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(ptr noundef %str) #0 {
entry:
  %str.addr = alloca ptr, align 8
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.1, ptr noundef %0)
  %call1 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  %call2 = call i32 @getchar()
  ret void
}

declare i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gplus() #0 {
entry:
  %0 = load i32, ptr @Global, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.3, ptr noundef @.str.4)
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.5, ptr noundef @.str.6)
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.7, ptr noundef @.str.4)
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.8, ptr noundef @.str.6)
  call void @INTERLEV_ACCESS(i32 noundef 2, ptr noundef @.str.9, ptr noundef @.str.6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @foo2(ptr noundef %x) #0 {
entry:
  %x.addr = alloca ptr, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 42, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 2, ptr noundef @.str.10, ptr noundef @.str.6)
  br label %cs6

cs6:                                              ; preds = %entry
  call void @gplus()
  %0 = load ptr, ptr %x.addr, align 8
  ret ptr %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @foo1(ptr noundef %x) #0 {
entry:
  %x.addr = alloca ptr, align 8
  %t2 = alloca i64, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 42, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.12)
  %0 = load i32, ptr @Global, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 42, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.12)
  br label %cs0

cs0:                                              ; preds = %if.then
  %call = call i32 @pthread_create(ptr noundef %t2, ptr noundef null, ptr noundef @foo2, ptr noundef null) #3
  br label %cs1

cs1:                                              ; preds = %cs0
  call void @gplus()
  %1 = load i32, ptr @Global, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.6)
  %2 = load i64, ptr %t2, align 8
  %call1 = call i32 @pthread_join(i64 noundef %2, ptr noundef null)
  %3 = load i32, ptr @Global, align 4
  %inc2 = add nsw i32 %3, 1
  store i32 %inc2, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.12)
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i32, ptr @Global, align 4
  %inc3 = add nsw i32 %4, 1
  store i32 %inc3, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.12)
  br label %if.end

if.end:                                           ; preds = %if.else, %cs1
  %5 = load i32, ptr @Global, align 4
  %inc4 = add nsw i32 %5, 1
  store i32 %inc4, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 1, ptr noundef @.str.11, ptr noundef @.str.12)
  %6 = load ptr, ptr %x.addr, align 8
  ret ptr %6
}

; Function Attrs: nounwind
declare i32 @pthread_create(ptr noundef, ptr noundef, ptr noundef, ptr noundef) #2

declare i32 @pthread_join(i64 noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca i64, align 8
  store i32 0, ptr %retval, align 4
  store i32 399, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.13, ptr noundef @.str.4)
  br label %cs2

cs2:                                              ; preds = %entry
  call void @gplus()
  br label %cs3

cs3:                                              ; preds = %cs2
  %call = call i32 @pthread_create(ptr noundef %t1, ptr noundef null, ptr noundef @foo1, ptr noundef null) #3
  %0 = load i32, ptr @Global, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.13, ptr noundef @.str.6)
  br label %cs4

cs4:                                              ; preds = %cs3
  call void @gplus()
  %1 = load i64, ptr %t1, align 8
  %call1 = call i32 @pthread_join(i64 noundef %1, ptr noundef null)
  %2 = load i32, ptr @Global, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, ptr @Global, align 4
  call void @INTERLEV_ACCESS(i32 noundef 0, ptr noundef @.str.13, ptr noundef @.str.4)
  br label %cs5

cs5:                                              ; preds = %cs4
  call void @gplus()
  call void @CXT_THREAD(i32 noundef 1, ptr noundef @.str.11)
  call void @CXT_THREAD(i32 noundef 2, ptr noundef @.str.10)
  call void @TCT_ACCESS(i32 noundef 0, ptr noundef @.str.14)
  call void @TCT_ACCESS(i32 noundef 1, ptr noundef @.str.15)
  %3 = load i32, ptr @Global, align 4
  ret i32 %3
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.0"}
